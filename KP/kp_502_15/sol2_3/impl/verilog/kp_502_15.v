// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_15_kp_502_15,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=14.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.815000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=265,HLS_SYN_LUT=523,HLS_VERSION=2021_2}" *)

module kp_502_15 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_0_address0,
        r_0_ce0,
        r_0_we0,
        r_0_d0,
        r_1_address0,
        r_1_ce0,
        r_1_we0,
        r_1_d0,
        r_2_address0,
        r_2_ce0,
        r_2_we0,
        r_2_d0,
        r_3_address0,
        r_3_ce0,
        r_3_we0,
        r_3_d0,
        a_0_address0,
        a_0_ce0,
        a_0_q0,
        a_1_address0,
        a_1_ce0,
        a_1_q0,
        a_2_address0,
        a_2_ce0,
        a_2_q0,
        a_3_address0,
        a_3_ce0,
        a_3_q0,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        b_3_address0,
        b_3_ce0,
        b_3_q0,
        c_0_address0,
        c_0_ce0,
        c_0_q0,
        c_1_address0,
        c_1_ce0,
        c_1_q0,
        c_2_address0,
        c_2_ce0,
        c_2_q0,
        c_3_address0,
        c_3_ce0,
        c_3_q0,
        x_0_address0,
        x_0_ce0,
        x_0_q0,
        x_1_address0,
        x_1_ce0,
        x_1_q0,
        x_2_address0,
        x_2_ce0,
        x_2_q0,
        x_3_address0,
        x_3_ce0,
        x_3_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] r_0_address0;
output   r_0_ce0;
output   r_0_we0;
output  [31:0] r_0_d0;
output  [0:0] r_1_address0;
output   r_1_ce0;
output   r_1_we0;
output  [31:0] r_1_d0;
output  [0:0] r_2_address0;
output   r_2_ce0;
output   r_2_we0;
output  [31:0] r_2_d0;
output  [0:0] r_3_address0;
output   r_3_ce0;
output   r_3_we0;
output  [31:0] r_3_d0;
output  [0:0] a_0_address0;
output   a_0_ce0;
input  [31:0] a_0_q0;
output  [0:0] a_1_address0;
output   a_1_ce0;
input  [31:0] a_1_q0;
output  [0:0] a_2_address0;
output   a_2_ce0;
input  [31:0] a_2_q0;
output  [0:0] a_3_address0;
output   a_3_ce0;
input  [31:0] a_3_q0;
output  [0:0] b_0_address0;
output   b_0_ce0;
input  [31:0] b_0_q0;
output  [0:0] b_1_address0;
output   b_1_ce0;
input  [31:0] b_1_q0;
output  [0:0] b_2_address0;
output   b_2_ce0;
input  [31:0] b_2_q0;
output  [0:0] b_3_address0;
output   b_3_ce0;
input  [31:0] b_3_q0;
output  [0:0] c_0_address0;
output   c_0_ce0;
input  [31:0] c_0_q0;
output  [0:0] c_1_address0;
output   c_1_ce0;
input  [31:0] c_1_q0;
output  [0:0] c_2_address0;
output   c_2_ce0;
input  [31:0] c_2_q0;
output  [0:0] c_3_address0;
output   c_3_ce0;
input  [31:0] c_3_q0;
output  [0:0] x_0_address0;
output   x_0_ce0;
input  [31:0] x_0_q0;
output  [0:0] x_1_address0;
output   x_1_ce0;
input  [31:0] x_1_q0;
output  [0:0] x_2_address0;
output   x_2_ce0;
input  [31:0] x_2_q0;
output  [0:0] x_3_address0;
output   x_3_ce0;
input  [31:0] x_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_0_ce0;
reg r_0_we0;
reg r_1_ce0;
reg r_1_we0;
reg r_2_ce0;
reg r_2_we0;
reg r_3_ce0;
reg r_3_we0;
reg a_0_ce0;
reg a_1_ce0;
reg a_2_ce0;
reg a_3_ce0;
reg b_0_ce0;
reg b_1_ce0;
reg b_2_ce0;
reg b_3_ce0;
reg c_0_ce0;
reg c_1_ce0;
reg c_2_ce0;
reg c_3_ce0;
reg x_0_ce0;
reg x_1_ce0;
reg x_2_ce0;
reg x_3_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln10_fu_366_p1;
reg   [63:0] zext_ln10_reg_495;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_350_p3;
reg  signed [31:0] temp_x_reg_567;
wire    ap_CS_fsm_state3;
wire  signed [31:0] add_ln11_fu_399_p2;
reg  signed [31:0] add_ln11_reg_572;
reg  signed [31:0] temp_x_1_reg_582;
wire  signed [31:0] add_ln11_2_fu_411_p2;
reg  signed [31:0] add_ln11_2_reg_587;
reg  signed [31:0] temp_x_2_reg_597;
wire  signed [31:0] add_ln11_4_fu_423_p2;
reg  signed [31:0] add_ln11_4_reg_602;
reg  signed [31:0] temp_x_3_reg_612;
wire  signed [31:0] add_ln11_6_fu_435_p2;
reg  signed [31:0] add_ln11_6_reg_617;
wire    ap_CS_fsm_state4;
reg   [3:0] i_fu_78;
wire   [3:0] add_ln8_fu_382_p2;
wire   [0:0] tmp_1_fu_358_p3;
wire   [31:0] mul_ln11_fu_393_p2;
wire   [31:0] mul_ln11_2_fu_405_p2;
wire   [31:0] mul_ln11_4_fu_417_p2;
wire   [31:0] mul_ln11_6_fu_429_p2;
wire   [31:0] mul_ln11_1_fu_441_p2;
wire   [31:0] mul_ln11_3_fu_452_p2;
wire   [31:0] mul_ln11_5_fu_463_p2;
wire   [31:0] mul_ln11_7_fu_474_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(a_0_q0),
    .din1(x_0_q0),
    .dout(mul_ln11_fu_393_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(a_1_q0),
    .din1(x_1_q0),
    .dout(mul_ln11_2_fu_405_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(a_2_q0),
    .din1(x_2_q0),
    .dout(mul_ln11_4_fu_417_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(a_3_q0),
    .din1(x_3_q0),
    .dout(mul_ln11_6_fu_429_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(temp_x_reg_567),
    .din1(add_ln11_reg_572),
    .dout(mul_ln11_1_fu_441_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(temp_x_1_reg_582),
    .din1(add_ln11_2_reg_587),
    .dout(mul_ln11_3_fu_452_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(temp_x_2_reg_597),
    .din1(add_ln11_4_reg_602),
    .dout(mul_ln11_5_fu_463_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(temp_x_3_reg_612),
    .din1(add_ln11_6_reg_617),
    .dout(mul_ln11_7_fu_474_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_78 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_350_p3 == 1'd0))) begin
        i_fu_78 <= add_ln8_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln11_2_reg_587 <= add_ln11_2_fu_411_p2;
        add_ln11_4_reg_602 <= add_ln11_4_fu_423_p2;
        add_ln11_6_reg_617 <= add_ln11_6_fu_435_p2;
        add_ln11_reg_572 <= add_ln11_fu_399_p2;
        temp_x_1_reg_582 <= x_1_q0;
        temp_x_2_reg_597 <= x_2_q0;
        temp_x_3_reg_612 <= x_3_q0;
        temp_x_reg_567 <= x_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_350_p3 == 1'd0))) begin
        zext_ln10_reg_495[0] <= zext_ln10_fu_366_p1[0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_3_ce0 = 1'b1;
    end else begin
        a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_350_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_350_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_3_ce0 = 1'b1;
    end else begin
        b_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_0_ce0 = 1'b1;
    end else begin
        c_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_ce0 = 1'b1;
    end else begin
        c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_2_ce0 = 1'b1;
    end else begin
        c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_3_ce0 = 1'b1;
    end else begin
        c_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_ce0 = 1'b1;
    end else begin
        r_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_we0 = 1'b1;
    end else begin
        r_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_1_ce0 = 1'b1;
    end else begin
        r_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_1_we0 = 1'b1;
    end else begin
        r_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_2_ce0 = 1'b1;
    end else begin
        r_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_2_we0 = 1'b1;
    end else begin
        r_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_3_ce0 = 1'b1;
    end else begin
        r_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_3_we0 = 1'b1;
    end else begin
        r_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_0_ce0 = 1'b1;
    end else begin
        x_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_2_ce0 = 1'b1;
    end else begin
        x_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_3_ce0 = 1'b1;
    end else begin
        x_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_350_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = zext_ln10_fu_366_p1;

assign a_1_address0 = zext_ln10_fu_366_p1;

assign a_2_address0 = zext_ln10_fu_366_p1;

assign a_3_address0 = zext_ln10_fu_366_p1;

assign add_ln11_2_fu_411_p2 = (b_1_q0 + mul_ln11_2_fu_405_p2);

assign add_ln11_4_fu_423_p2 = (b_2_q0 + mul_ln11_4_fu_417_p2);

assign add_ln11_6_fu_435_p2 = (b_3_q0 + mul_ln11_6_fu_429_p2);

assign add_ln11_fu_399_p2 = (b_0_q0 + mul_ln11_fu_393_p2);

assign add_ln8_fu_382_p2 = (i_fu_78 + 4'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign b_0_address0 = zext_ln10_fu_366_p1;

assign b_1_address0 = zext_ln10_fu_366_p1;

assign b_2_address0 = zext_ln10_fu_366_p1;

assign b_3_address0 = zext_ln10_fu_366_p1;

assign c_0_address0 = zext_ln10_reg_495;

assign c_1_address0 = zext_ln10_reg_495;

assign c_2_address0 = zext_ln10_reg_495;

assign c_3_address0 = zext_ln10_reg_495;

assign r_0_address0 = zext_ln10_reg_495;

assign r_0_d0 = (c_0_q0 + mul_ln11_1_fu_441_p2);

assign r_1_address0 = zext_ln10_reg_495;

assign r_1_d0 = (c_1_q0 + mul_ln11_3_fu_452_p2);

assign r_2_address0 = zext_ln10_reg_495;

assign r_2_d0 = (c_2_q0 + mul_ln11_5_fu_463_p2);

assign r_3_address0 = zext_ln10_reg_495;

assign r_3_d0 = (c_3_q0 + mul_ln11_7_fu_474_p2);

assign tmp_1_fu_358_p3 = i_fu_78[32'd2];

assign tmp_fu_350_p3 = i_fu_78[32'd3];

assign x_0_address0 = zext_ln10_fu_366_p1;

assign x_1_address0 = zext_ln10_fu_366_p1;

assign x_2_address0 = zext_ln10_fu_366_p1;

assign x_3_address0 = zext_ln10_fu_366_p1;

assign zext_ln10_fu_366_p1 = tmp_1_fu_358_p3;

always @ (posedge ap_clk) begin
    zext_ln10_reg_495[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //kp_502_15

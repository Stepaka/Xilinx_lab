// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_15_kp_502_15,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=14.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.240000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=258,HLS_SYN_LUT=973,HLS_VERSION=2021_2}" *)

module kp_502_15 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_0,
        r_0_ap_vld,
        r_1,
        r_1_ap_vld,
        r_2,
        r_2_ap_vld,
        r_3,
        r_3_ap_vld,
        r_4,
        r_4_ap_vld,
        r_5,
        r_5_ap_vld,
        r_6,
        r_6_ap_vld,
        r_7,
        r_7_ap_vld,
        a_0,
        a_1,
        a_2,
        a_3,
        a_4,
        a_5,
        a_6,
        a_7,
        b_0,
        b_1,
        b_2,
        b_3,
        b_4,
        b_5,
        b_6,
        b_7,
        c_0,
        c_1,
        c_2,
        c_3,
        c_4,
        c_5,
        c_6,
        c_7,
        x_0,
        x_1,
        x_2,
        x_3,
        x_4,
        x_5,
        x_6,
        x_7
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] r_0;
output   r_0_ap_vld;
output  [31:0] r_1;
output   r_1_ap_vld;
output  [31:0] r_2;
output   r_2_ap_vld;
output  [31:0] r_3;
output   r_3_ap_vld;
output  [31:0] r_4;
output   r_4_ap_vld;
output  [31:0] r_5;
output   r_5_ap_vld;
output  [31:0] r_6;
output   r_6_ap_vld;
output  [31:0] r_7;
output   r_7_ap_vld;
input  [31:0] a_0;
input  [31:0] a_1;
input  [31:0] a_2;
input  [31:0] a_3;
input  [31:0] a_4;
input  [31:0] a_5;
input  [31:0] a_6;
input  [31:0] a_7;
input  [31:0] b_0;
input  [31:0] b_1;
input  [31:0] b_2;
input  [31:0] b_3;
input  [31:0] b_4;
input  [31:0] b_5;
input  [31:0] b_6;
input  [31:0] b_7;
input  [31:0] c_0;
input  [31:0] c_1;
input  [31:0] c_2;
input  [31:0] c_3;
input  [31:0] c_4;
input  [31:0] c_5;
input  [31:0] c_6;
input  [31:0] c_7;
input  [31:0] x_0;
input  [31:0] x_1;
input  [31:0] x_2;
input  [31:0] x_3;
input  [31:0] x_4;
input  [31:0] x_5;
input  [31:0] x_6;
input  [31:0] x_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_0_ap_vld;
reg r_1_ap_vld;
reg r_2_ap_vld;
reg r_3_ap_vld;
reg r_4_ap_vld;
reg r_5_ap_vld;
reg r_6_ap_vld;
reg r_7_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] mul_ln11_fu_346_p2;
reg   [31:0] mul_ln11_reg_535;
wire   [31:0] mul_ln11_2_fu_352_p2;
reg   [31:0] mul_ln11_2_reg_545;
wire   [31:0] mul_ln11_4_fu_358_p2;
reg   [31:0] mul_ln11_4_reg_555;
wire   [31:0] mul_ln11_6_fu_364_p2;
reg   [31:0] mul_ln11_6_reg_565;
wire   [31:0] mul_ln11_8_fu_370_p2;
reg   [31:0] mul_ln11_8_reg_575;
wire   [31:0] mul_ln11_10_fu_376_p2;
reg   [31:0] mul_ln11_10_reg_585;
wire   [31:0] mul_ln11_12_fu_382_p2;
reg   [31:0] mul_ln11_12_reg_595;
wire   [31:0] mul_ln11_14_fu_388_p2;
reg   [31:0] mul_ln11_14_reg_605;
wire    ap_CS_fsm_state2;
wire  signed [31:0] mul_ln11_1_fu_399_p1;
wire   [31:0] mul_ln11_1_fu_399_p2;
wire  signed [31:0] mul_ln11_3_fu_416_p1;
wire   [31:0] mul_ln11_3_fu_416_p2;
wire  signed [31:0] mul_ln11_5_fu_433_p1;
wire   [31:0] mul_ln11_5_fu_433_p2;
wire  signed [31:0] mul_ln11_7_fu_450_p1;
wire   [31:0] mul_ln11_7_fu_450_p2;
wire  signed [31:0] mul_ln11_9_fu_467_p1;
wire   [31:0] mul_ln11_9_fu_467_p2;
wire  signed [31:0] mul_ln11_11_fu_484_p1;
wire   [31:0] mul_ln11_11_fu_484_p2;
wire  signed [31:0] mul_ln11_13_fu_501_p1;
wire   [31:0] mul_ln11_13_fu_501_p2;
wire  signed [31:0] mul_ln11_15_fu_518_p1;
wire   [31:0] mul_ln11_15_fu_518_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(a_0),
    .din1(x_0),
    .dout(mul_ln11_fu_346_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(a_1),
    .din1(x_1),
    .dout(mul_ln11_2_fu_352_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(a_2),
    .din1(x_2),
    .dout(mul_ln11_4_fu_358_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(a_3),
    .din1(x_3),
    .dout(mul_ln11_6_fu_364_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(a_4),
    .din1(x_4),
    .dout(mul_ln11_8_fu_370_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(a_5),
    .din1(x_5),
    .dout(mul_ln11_10_fu_376_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(a_6),
    .din1(x_6),
    .dout(mul_ln11_12_fu_382_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(a_7),
    .din1(x_7),
    .dout(mul_ln11_14_fu_388_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(x_0),
    .din1(mul_ln11_1_fu_399_p1),
    .dout(mul_ln11_1_fu_399_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(x_1),
    .din1(mul_ln11_3_fu_416_p1),
    .dout(mul_ln11_3_fu_416_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(x_2),
    .din1(mul_ln11_5_fu_433_p1),
    .dout(mul_ln11_5_fu_433_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U12(
    .din0(x_3),
    .din1(mul_ln11_7_fu_450_p1),
    .dout(mul_ln11_7_fu_450_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U13(
    .din0(x_4),
    .din1(mul_ln11_9_fu_467_p1),
    .dout(mul_ln11_9_fu_467_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U14(
    .din0(x_5),
    .din1(mul_ln11_11_fu_484_p1),
    .dout(mul_ln11_11_fu_484_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U15(
    .din0(x_6),
    .din1(mul_ln11_13_fu_501_p1),
    .dout(mul_ln11_13_fu_501_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U16(
    .din0(x_7),
    .din1(mul_ln11_15_fu_518_p1),
    .dout(mul_ln11_15_fu_518_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_ln11_10_reg_585 <= mul_ln11_10_fu_376_p2;
        mul_ln11_12_reg_595 <= mul_ln11_12_fu_382_p2;
        mul_ln11_14_reg_605 <= mul_ln11_14_fu_388_p2;
        mul_ln11_2_reg_545 <= mul_ln11_2_fu_352_p2;
        mul_ln11_4_reg_555 <= mul_ln11_4_fu_358_p2;
        mul_ln11_6_reg_565 <= mul_ln11_6_fu_364_p2;
        mul_ln11_8_reg_575 <= mul_ln11_8_fu_370_p2;
        mul_ln11_reg_535 <= mul_ln11_fu_346_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_0_ap_vld = 1'b1;
    end else begin
        r_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_ap_vld = 1'b1;
    end else begin
        r_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_2_ap_vld = 1'b1;
    end else begin
        r_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_3_ap_vld = 1'b1;
    end else begin
        r_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_4_ap_vld = 1'b1;
    end else begin
        r_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_5_ap_vld = 1'b1;
    end else begin
        r_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_6_ap_vld = 1'b1;
    end else begin
        r_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_7_ap_vld = 1'b1;
    end else begin
        r_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign mul_ln11_11_fu_484_p1 = (b_5 + mul_ln11_10_reg_585);

assign mul_ln11_13_fu_501_p1 = (b_6 + mul_ln11_12_reg_595);

assign mul_ln11_15_fu_518_p1 = (b_7 + mul_ln11_14_reg_605);

assign mul_ln11_1_fu_399_p1 = (b_0 + mul_ln11_reg_535);

assign mul_ln11_3_fu_416_p1 = (b_1 + mul_ln11_2_reg_545);

assign mul_ln11_5_fu_433_p1 = (b_2 + mul_ln11_4_reg_555);

assign mul_ln11_7_fu_450_p1 = (b_3 + mul_ln11_6_reg_565);

assign mul_ln11_9_fu_467_p1 = (b_4 + mul_ln11_8_reg_575);

assign r_0 = (c_0 + mul_ln11_1_fu_399_p2);

assign r_1 = (c_1 + mul_ln11_3_fu_416_p2);

assign r_2 = (c_2 + mul_ln11_5_fu_433_p2);

assign r_3 = (c_3 + mul_ln11_7_fu_450_p2);

assign r_4 = (c_4 + mul_ln11_9_fu_467_p2);

assign r_5 = (c_5 + mul_ln11_11_fu_484_p2);

assign r_6 = (c_6 + mul_ln11_13_fu_501_p2);

assign r_7 = (c_7 + mul_ln11_15_fu_518_p2);

endmodule //kp_502_15

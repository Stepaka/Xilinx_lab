// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_15_kp_502_15,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=14.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.920000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=265,HLS_SYN_LUT=523,HLS_VERSION=2021_2}" *)

module kp_502_15 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_q0,
        x_address0,
        x_ce0,
        x_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] r_address0;
output   r_ce0;
output   r_we0;
output  [127:0] r_d0;
output  [0:0] a_address0;
output   a_ce0;
input  [127:0] a_q0;
output  [0:0] b_address0;
output   b_ce0;
input  [127:0] b_q0;
output  [0:0] c_address0;
output   c_ce0;
input  [127:0] c_q0;
output  [0:0] x_address0;
output   x_ce0;
input  [127:0] x_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_ce0;
reg r_we0;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg x_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln10_fu_157_p1;
reg   [63:0] zext_ln10_reg_422;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_141_p3;
wire  signed [31:0] temp_x_fu_175_p1;
reg  signed [31:0] temp_x_reg_443;
wire    ap_CS_fsm_state3;
wire  signed [31:0] add_ln11_fu_193_p2;
reg  signed [31:0] add_ln11_reg_448;
reg  signed [31:0] temp_x_1_reg_458;
wire  signed [31:0] add_ln11_2_fu_235_p2;
reg  signed [31:0] add_ln11_2_reg_463;
reg  signed [31:0] temp_x_2_reg_468;
wire  signed [31:0] add_ln11_4_fu_277_p2;
reg  signed [31:0] add_ln11_4_reg_473;
reg  signed [31:0] temp_x_3_reg_478;
wire  signed [31:0] add_ln11_6_fu_319_p2;
reg  signed [31:0] add_ln11_6_reg_483;
wire    ap_CS_fsm_state4;
reg   [3:0] i_fu_64;
wire   [3:0] add_ln8_fu_164_p2;
wire   [0:0] tmp_1_fu_149_p3;
wire  signed [31:0] mul_ln11_fu_183_p0;
wire  signed [31:0] mul_ln11_fu_183_p1;
wire   [31:0] trunc_ln11_1_fu_189_p1;
wire   [31:0] mul_ln11_fu_183_p2;
wire  signed [31:0] mul_ln11_2_fu_219_p0;
wire  signed [31:0] mul_ln11_2_fu_219_p1;
wire   [31:0] mul_ln11_2_fu_219_p2;
wire   [31:0] tmp_6_fu_225_p4;
wire  signed [31:0] mul_ln11_4_fu_261_p0;
wire  signed [31:0] mul_ln11_4_fu_261_p1;
wire   [31:0] mul_ln11_4_fu_261_p2;
wire   [31:0] tmp_s_fu_267_p4;
wire  signed [31:0] mul_ln11_6_fu_303_p0;
wire  signed [31:0] mul_ln11_6_fu_303_p1;
wire   [31:0] mul_ln11_6_fu_303_p2;
wire   [31:0] tmp_2_fu_309_p4;
wire   [31:0] trunc_ln11_2_fu_329_p1;
wire   [31:0] mul_ln11_1_fu_325_p2;
wire   [31:0] mul_ln11_3_fu_339_p2;
wire   [31:0] tmp_7_fu_343_p4;
wire   [31:0] mul_ln11_5_fu_359_p2;
wire   [31:0] tmp_4_fu_363_p4;
wire   [31:0] mul_ln11_7_fu_379_p2;
wire   [31:0] tmp_3_fu_383_p4;
wire   [31:0] add_ln11_7_fu_393_p2;
wire   [31:0] add_ln11_5_fu_373_p2;
wire   [31:0] add_ln11_3_fu_353_p2;
wire   [31:0] add_ln11_1_fu_333_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(mul_ln11_fu_183_p0),
    .din1(mul_ln11_fu_183_p1),
    .dout(mul_ln11_fu_183_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(mul_ln11_2_fu_219_p0),
    .din1(mul_ln11_2_fu_219_p1),
    .dout(mul_ln11_2_fu_219_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(mul_ln11_4_fu_261_p0),
    .din1(mul_ln11_4_fu_261_p1),
    .dout(mul_ln11_4_fu_261_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(mul_ln11_6_fu_303_p0),
    .din1(mul_ln11_6_fu_303_p1),
    .dout(mul_ln11_6_fu_303_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(add_ln11_reg_448),
    .din1(temp_x_reg_443),
    .dout(mul_ln11_1_fu_325_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(add_ln11_2_reg_463),
    .din1(temp_x_1_reg_458),
    .dout(mul_ln11_3_fu_339_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(add_ln11_4_reg_473),
    .din1(temp_x_2_reg_468),
    .dout(mul_ln11_5_fu_359_p2)
);

kp_502_15_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(add_ln11_6_reg_483),
    .din1(temp_x_3_reg_478),
    .dout(mul_ln11_7_fu_379_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_64 <= 4'd0;
    end else if (((tmp_fu_141_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_64 <= add_ln8_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln11_2_reg_463 <= add_ln11_2_fu_235_p2;
        add_ln11_4_reg_473 <= add_ln11_4_fu_277_p2;
        add_ln11_6_reg_483 <= add_ln11_6_fu_319_p2;
        add_ln11_reg_448 <= add_ln11_fu_193_p2;
        temp_x_1_reg_458 <= {{x_q0[63:32]}};
        temp_x_2_reg_468 <= {{x_q0[95:64]}};
        temp_x_3_reg_478 <= {{x_q0[127:96]}};
        temp_x_reg_443 <= temp_x_fu_175_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_141_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln10_reg_422[0] <= zext_ln10_fu_157_p1[0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((tmp_fu_141_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_141_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_141_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln10_fu_157_p1;

assign add_ln11_1_fu_333_p2 = (trunc_ln11_2_fu_329_p1 + mul_ln11_1_fu_325_p2);

assign add_ln11_2_fu_235_p2 = (mul_ln11_2_fu_219_p2 + tmp_6_fu_225_p4);

assign add_ln11_3_fu_353_p2 = (mul_ln11_3_fu_339_p2 + tmp_7_fu_343_p4);

assign add_ln11_4_fu_277_p2 = (mul_ln11_4_fu_261_p2 + tmp_s_fu_267_p4);

assign add_ln11_5_fu_373_p2 = (mul_ln11_5_fu_359_p2 + tmp_4_fu_363_p4);

assign add_ln11_6_fu_319_p2 = (mul_ln11_6_fu_303_p2 + tmp_2_fu_309_p4);

assign add_ln11_7_fu_393_p2 = (mul_ln11_7_fu_379_p2 + tmp_3_fu_383_p4);

assign add_ln11_fu_193_p2 = (trunc_ln11_1_fu_189_p1 + mul_ln11_fu_183_p2);

assign add_ln8_fu_164_p2 = (i_fu_64 + 4'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign b_address0 = zext_ln10_fu_157_p1;

assign c_address0 = zext_ln10_reg_422;

assign mul_ln11_2_fu_219_p0 = {{a_q0[63:32]}};

assign mul_ln11_2_fu_219_p1 = {{x_q0[63:32]}};

assign mul_ln11_4_fu_261_p0 = {{a_q0[95:64]}};

assign mul_ln11_4_fu_261_p1 = {{x_q0[95:64]}};

assign mul_ln11_6_fu_303_p0 = {{a_q0[127:96]}};

assign mul_ln11_6_fu_303_p1 = {{x_q0[127:96]}};

assign mul_ln11_fu_183_p0 = a_q0[31:0];

assign mul_ln11_fu_183_p1 = x_q0[31:0];

assign r_address0 = zext_ln10_reg_422;

assign r_d0 = {{{{add_ln11_7_fu_393_p2}, {add_ln11_5_fu_373_p2}}, {add_ln11_3_fu_353_p2}}, {add_ln11_1_fu_333_p2}};

assign temp_x_fu_175_p1 = x_q0[31:0];

assign tmp_1_fu_149_p3 = i_fu_64[32'd2];

assign tmp_2_fu_309_p4 = {{b_q0[127:96]}};

assign tmp_3_fu_383_p4 = {{c_q0[127:96]}};

assign tmp_4_fu_363_p4 = {{c_q0[95:64]}};

assign tmp_6_fu_225_p4 = {{b_q0[63:32]}};

assign tmp_7_fu_343_p4 = {{c_q0[63:32]}};

assign tmp_fu_141_p3 = i_fu_64[32'd3];

assign tmp_s_fu_267_p4 = {{b_q0[95:64]}};

assign trunc_ln11_1_fu_189_p1 = b_q0[31:0];

assign trunc_ln11_2_fu_329_p1 = c_q0[31:0];

assign x_address0 = zext_ln10_fu_157_p1;

assign zext_ln10_fu_157_p1 = tmp_1_fu_149_p3;

always @ (posedge ap_clk) begin
    zext_ln10_reg_422[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //kp_502_15

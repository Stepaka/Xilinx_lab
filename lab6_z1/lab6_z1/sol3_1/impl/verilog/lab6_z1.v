// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab6_z1_lab6_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.302000,HLS_SYN_LAT=41,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15,HLS_SYN_LUT=52,HLS_VERSION=2021_2}" *)

module lab6_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_we0,
        a_0_d0,
        a_1_address0,
        a_1_ce0,
        a_1_we0,
        a_1_d0,
        a_2_address0,
        a_2_ce0,
        a_2_we0,
        a_2_d0,
        a_3_address0,
        a_3_ce0,
        a_3_we0,
        a_3_d0,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        b_3_address0,
        b_3_ce0,
        b_3_q0,
        c_0_address0,
        c_0_ce0,
        c_0_q0,
        c_1_address0,
        c_1_ce0,
        c_1_q0,
        c_2_address0,
        c_2_ce0,
        c_2_q0,
        c_3_address0,
        c_3_ce0,
        c_3_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_0_address0;
output   a_0_ce0;
output   a_0_we0;
output  [15:0] a_0_d0;
output  [2:0] a_1_address0;
output   a_1_ce0;
output   a_1_we0;
output  [15:0] a_1_d0;
output  [2:0] a_2_address0;
output   a_2_ce0;
output   a_2_we0;
output  [15:0] a_2_d0;
output  [2:0] a_3_address0;
output   a_3_ce0;
output   a_3_we0;
output  [15:0] a_3_d0;
output  [2:0] b_0_address0;
output   b_0_ce0;
input  [15:0] b_0_q0;
output  [2:0] b_1_address0;
output   b_1_ce0;
input  [15:0] b_1_q0;
output  [2:0] b_2_address0;
output   b_2_ce0;
input  [15:0] b_2_q0;
output  [2:0] b_3_address0;
output   b_3_ce0;
input  [15:0] b_3_q0;
output  [2:0] c_0_address0;
output   c_0_ce0;
input  [15:0] c_0_q0;
output  [2:0] c_1_address0;
output   c_1_ce0;
input  [15:0] c_1_q0;
output  [2:0] c_2_address0;
output   c_2_ce0;
input  [15:0] c_2_q0;
output  [2:0] c_3_address0;
output   c_3_ce0;
input  [15:0] c_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_ce0;
reg a_0_we0;
reg a_1_ce0;
reg a_1_we0;
reg a_2_ce0;
reg a_2_we0;
reg a_3_ce0;
reg a_3_we0;
reg b_0_ce0;
reg b_1_ce0;
reg b_2_ce0;
reg b_3_ce0;
reg c_0_ce0;
reg c_1_ce0;
reg c_2_ce0;
reg c_3_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln5_fu_252_p1;
reg   [63:0] zext_ln5_reg_313;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_234_p3;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
reg   [5:0] i_fu_66;
wire   [5:0] add_ln4_fu_264_p2;
wire  signed [15:0] grp_fu_275_p2;
wire  signed [15:0] grp_fu_282_p2;
wire  signed [15:0] grp_fu_289_p2;
wire  signed [15:0] grp_fu_296_p2;
wire   [2:0] lshr_ln5_fu_242_p4;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

lab6_z1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_0_q0),
    .din1(b_0_q0),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

lab6_z1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_1_q0),
    .din1(b_1_q0),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

lab6_z1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_2_q0),
    .din1(b_2_q0),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

lab6_z1_mul_mul_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_16s_16_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_3_q0),
    .din1(b_3_q0),
    .ce(1'b1),
    .dout(grp_fu_296_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_66 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_234_p3 == 1'd0))) begin
        i_fu_66 <= add_ln4_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_234_p3 == 1'd0))) begin
        zext_ln5_reg_313[2 : 0] <= zext_ln5_fu_252_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_0_we0 = 1'b1;
    end else begin
        a_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_1_we0 = 1'b1;
    end else begin
        a_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_2_we0 = 1'b1;
    end else begin
        a_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_3_ce0 = 1'b1;
    end else begin
        a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_3_we0 = 1'b1;
    end else begin
        a_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_234_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_234_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_3_ce0 = 1'b1;
    end else begin
        b_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_0_ce0 = 1'b1;
    end else begin
        c_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_1_ce0 = 1'b1;
    end else begin
        c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_2_ce0 = 1'b1;
    end else begin
        c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_3_ce0 = 1'b1;
    end else begin
        c_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_234_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = zext_ln5_reg_313;

assign a_0_d0 = grp_fu_275_p2;

assign a_1_address0 = zext_ln5_reg_313;

assign a_1_d0 = grp_fu_282_p2;

assign a_2_address0 = zext_ln5_reg_313;

assign a_2_d0 = grp_fu_289_p2;

assign a_3_address0 = zext_ln5_reg_313;

assign a_3_d0 = grp_fu_296_p2;

assign add_ln4_fu_264_p2 = (i_fu_66 + 6'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign b_0_address0 = zext_ln5_fu_252_p1;

assign b_1_address0 = zext_ln5_fu_252_p1;

assign b_2_address0 = zext_ln5_fu_252_p1;

assign b_3_address0 = zext_ln5_fu_252_p1;

assign c_0_address0 = zext_ln5_fu_252_p1;

assign c_1_address0 = zext_ln5_fu_252_p1;

assign c_2_address0 = zext_ln5_fu_252_p1;

assign c_3_address0 = zext_ln5_fu_252_p1;

assign lshr_ln5_fu_242_p4 = {{i_fu_66[4:2]}};

assign tmp_fu_234_p3 = i_fu_66[32'd5];

assign zext_ln5_fu_252_p1 = lshr_ln5_fu_242_p4;

always @ (posedge ap_clk) begin
    zext_ln5_reg_313[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab6_z1

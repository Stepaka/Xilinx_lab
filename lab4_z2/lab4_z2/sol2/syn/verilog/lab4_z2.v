// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab4_z2_lab4_z2,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=163,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=297,HLS_SYN_LUT=268,HLS_VERSION=2021_2}" *)

module lab4_z2 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        scale,
        data_out1_address0,
        data_out1_ce0,
        data_out1_we0,
        data_out1_d0,
        data_out2_address0,
        data_out2_ce0,
        data_out2_we0,
        data_out2_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_in_address0;
output   data_in_ce0;
input  [31:0] data_in_q0;
input  [31:0] scale;
output  [3:0] data_out1_address0;
output   data_out1_ce0;
output   data_out1_we0;
output  [31:0] data_out1_d0;
output  [3:0] data_out2_address0;
output   data_out2_ce0;
output   data_out2_we0;
output  [31:0] data_out2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_ce0;
reg data_out1_ce0;
reg data_out1_we0;
reg data_out2_ce0;
reg data_out2_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln5_fu_167_p1;
reg   [63:0] zext_ln5_reg_283;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln5_fu_172_p2;
reg  signed [31:0] data_in_load_reg_304;
wire    ap_CS_fsm_state3;
wire   [31:0] res_fu_194_p2;
reg   [31:0] res_reg_309;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln11_fu_201_p1;
reg   [63:0] zext_ln11_reg_315;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln11_fu_206_p2;
wire   [31:0] tempA1_q0;
reg  signed [31:0] tempA1_load_reg_335;
wire    ap_CS_fsm_state7;
wire   [31:0] mul_ln13_fu_228_p2;
reg   [31:0] mul_ln13_reg_340;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln15_fu_236_p1;
reg   [63:0] zext_ln15_reg_345;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln15_fu_241_p2;
reg   [3:0] tempA1_address0;
reg    tempA1_ce0;
reg    tempA1_we0;
reg   [3:0] tempA2_address0;
reg    tempA2_ce0;
reg    tempA2_we0;
wire   [31:0] tempA2_q0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [4:0] i_fu_56;
wire   [4:0] add_ln5_fu_178_p2;
reg   [4:0] j_fu_68;
wire   [4:0] add_ln11_fu_212_p2;
reg   [4:0] k_fu_72;
wire   [4:0] add_ln15_fu_247_p2;
wire   [5:0] mul_ln13_fu_228_p1;
wire   [31:0] shl_ln17_fu_258_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

lab4_z2_tempA1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
tempA1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tempA1_address0),
    .ce0(tempA1_ce0),
    .we0(tempA1_we0),
    .d0(res_reg_309),
    .q0(tempA1_q0)
);

lab4_z2_tempA1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
tempA2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tempA2_address0),
    .ce0(tempA2_ce0),
    .we0(tempA2_we0),
    .d0(res_reg_309),
    .q0(tempA2_q0)
);

lab4_z2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(data_in_load_reg_304),
    .din1(scale),
    .dout(res_fu_194_p2)
);

lab4_z2_mul_32s_6ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mul_32s_6ns_32_1_1_U2(
    .din0(tempA1_load_reg_335),
    .din1(mul_ln13_fu_228_p1),
    .dout(mul_ln13_fu_228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_56 <= 5'd0;
    end else if (((icmp_ln5_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_56 <= add_ln5_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_68 <= 5'd0;
    end else if (((icmp_ln11_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_fu_68 <= add_ln11_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_fu_72 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln15_fu_241_p2 == 1'd0))) begin
        k_fu_72 <= add_ln15_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in_load_reg_304 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln13_reg_340 <= mul_ln13_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_reg_309 <= res_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tempA1_load_reg_335 <= tempA1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        zext_ln11_reg_315[4 : 0] <= zext_ln11_fu_201_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln15_reg_345[4 : 0] <= zext_ln15_fu_236_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln5_reg_283[4 : 0] <= zext_ln5_fu_167_p1[4 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln15_fu_241_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln15_fu_241_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_out1_ce0 = 1'b1;
    end else begin
        data_out1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        data_out1_we0 = 1'b1;
    end else begin
        data_out1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_out2_ce0 = 1'b1;
    end else begin
        data_out2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_out2_we0 = 1'b1;
    end else begin
        data_out2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tempA1_address0 = zext_ln11_fu_201_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tempA1_address0 = zext_ln5_reg_283;
    end else begin
        tempA1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        tempA1_ce0 = 1'b1;
    end else begin
        tempA1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tempA1_we0 = 1'b1;
    end else begin
        tempA1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tempA2_address0 = zext_ln15_fu_236_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tempA2_address0 = zext_ln5_reg_283;
    end else begin
        tempA2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        tempA2_ce0 = 1'b1;
    end else begin
        tempA2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tempA2_we0 = 1'b1;
    end else begin
        tempA2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln5_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln11_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln15_fu_241_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_212_p2 = (j_fu_68 + 5'd1);

assign add_ln15_fu_247_p2 = (k_fu_72 + 5'd1);

assign add_ln5_fu_178_p2 = (i_fu_56 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign data_in_address0 = zext_ln5_fu_167_p1;

assign data_out1_address0 = zext_ln11_reg_315;

assign data_out1_d0 = mul_ln13_reg_340;

assign data_out2_address0 = zext_ln15_reg_345;

assign data_out2_d0 = (tempA2_q0 + shl_ln17_fu_258_p2);

assign icmp_ln11_fu_206_p2 = ((j_fu_68 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_241_p2 = ((k_fu_72 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_172_p2 = ((i_fu_56 == 5'd16) ? 1'b1 : 1'b0);

assign mul_ln13_fu_228_p1 = 32'd22;

assign shl_ln17_fu_258_p2 = tempA2_q0 << 32'd5;

assign zext_ln11_fu_201_p1 = j_fu_68;

assign zext_ln15_fu_236_p1 = k_fu_72;

assign zext_ln5_fu_167_p1 = i_fu_56;

always @ (posedge ap_clk) begin
    zext_ln5_reg_283[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln11_reg_315[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln15_reg_345[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab4_z2

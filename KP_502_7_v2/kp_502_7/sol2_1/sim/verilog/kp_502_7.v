// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_7_kp_502_7,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.421914,HLS_SYN_LAT=337,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2738,HLS_SYN_LUT=2881,HLS_VERSION=2021_2}" *)

module kp_502_7 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_q0,
        X1_address1,
        X1_ce1,
        X1_we1,
        X1_d1,
        X2_address1,
        X2_ce1,
        X2_we1,
        X2_d1,
        D_address1,
        D_ce1,
        D_we1,
        D_d1
);

parameter    ap_ST_fsm_state1 = 85'd1;
parameter    ap_ST_fsm_state2 = 85'd2;
parameter    ap_ST_fsm_state3 = 85'd4;
parameter    ap_ST_fsm_state4 = 85'd8;
parameter    ap_ST_fsm_state5 = 85'd16;
parameter    ap_ST_fsm_state6 = 85'd32;
parameter    ap_ST_fsm_state7 = 85'd64;
parameter    ap_ST_fsm_state8 = 85'd128;
parameter    ap_ST_fsm_state9 = 85'd256;
parameter    ap_ST_fsm_state10 = 85'd512;
parameter    ap_ST_fsm_state11 = 85'd1024;
parameter    ap_ST_fsm_state12 = 85'd2048;
parameter    ap_ST_fsm_state13 = 85'd4096;
parameter    ap_ST_fsm_state14 = 85'd8192;
parameter    ap_ST_fsm_state15 = 85'd16384;
parameter    ap_ST_fsm_state16 = 85'd32768;
parameter    ap_ST_fsm_state17 = 85'd65536;
parameter    ap_ST_fsm_state18 = 85'd131072;
parameter    ap_ST_fsm_state19 = 85'd262144;
parameter    ap_ST_fsm_state20 = 85'd524288;
parameter    ap_ST_fsm_state21 = 85'd1048576;
parameter    ap_ST_fsm_state22 = 85'd2097152;
parameter    ap_ST_fsm_state23 = 85'd4194304;
parameter    ap_ST_fsm_state24 = 85'd8388608;
parameter    ap_ST_fsm_state25 = 85'd16777216;
parameter    ap_ST_fsm_state26 = 85'd33554432;
parameter    ap_ST_fsm_state27 = 85'd67108864;
parameter    ap_ST_fsm_state28 = 85'd134217728;
parameter    ap_ST_fsm_state29 = 85'd268435456;
parameter    ap_ST_fsm_state30 = 85'd536870912;
parameter    ap_ST_fsm_state31 = 85'd1073741824;
parameter    ap_ST_fsm_state32 = 85'd2147483648;
parameter    ap_ST_fsm_state33 = 85'd4294967296;
parameter    ap_ST_fsm_state34 = 85'd8589934592;
parameter    ap_ST_fsm_state35 = 85'd17179869184;
parameter    ap_ST_fsm_state36 = 85'd34359738368;
parameter    ap_ST_fsm_state37 = 85'd68719476736;
parameter    ap_ST_fsm_state38 = 85'd137438953472;
parameter    ap_ST_fsm_state39 = 85'd274877906944;
parameter    ap_ST_fsm_state40 = 85'd549755813888;
parameter    ap_ST_fsm_state41 = 85'd1099511627776;
parameter    ap_ST_fsm_state42 = 85'd2199023255552;
parameter    ap_ST_fsm_state43 = 85'd4398046511104;
parameter    ap_ST_fsm_state44 = 85'd8796093022208;
parameter    ap_ST_fsm_state45 = 85'd17592186044416;
parameter    ap_ST_fsm_state46 = 85'd35184372088832;
parameter    ap_ST_fsm_state47 = 85'd70368744177664;
parameter    ap_ST_fsm_state48 = 85'd140737488355328;
parameter    ap_ST_fsm_state49 = 85'd281474976710656;
parameter    ap_ST_fsm_state50 = 85'd562949953421312;
parameter    ap_ST_fsm_state51 = 85'd1125899906842624;
parameter    ap_ST_fsm_state52 = 85'd2251799813685248;
parameter    ap_ST_fsm_state53 = 85'd4503599627370496;
parameter    ap_ST_fsm_state54 = 85'd9007199254740992;
parameter    ap_ST_fsm_state55 = 85'd18014398509481984;
parameter    ap_ST_fsm_state56 = 85'd36028797018963968;
parameter    ap_ST_fsm_state57 = 85'd72057594037927936;
parameter    ap_ST_fsm_state58 = 85'd144115188075855872;
parameter    ap_ST_fsm_state59 = 85'd288230376151711744;
parameter    ap_ST_fsm_state60 = 85'd576460752303423488;
parameter    ap_ST_fsm_state61 = 85'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 85'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 85'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 85'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 85'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 85'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 85'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 85'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 85'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 85'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 85'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 85'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 85'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 85'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 85'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 85'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 85'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 85'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 85'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 85'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 85'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 85'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 85'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 85'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 85'd19342813113834066795298816;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [2:0] B_address0;
output   B_ce0;
input  [63:0] B_q0;
output  [2:0] C_address0;
output   C_ce0;
input  [63:0] C_q0;
output  [2:0] X1_address1;
output   X1_ce1;
output   X1_we1;
output  [63:0] X1_d1;
output  [2:0] X2_address1;
output   X2_ce1;
output   X2_we1;
output  [63:0] X2_d1;
output  [2:0] D_address1;
output   D_ce1;
output   D_we1;
output  [63:0] D_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] A_address0;
reg A_ce0;
reg[2:0] B_address0;
reg B_ce0;
reg[2:0] C_address0;
reg C_ce0;
reg[2:0] X1_address1;
reg X1_ce1;
reg X1_we1;
reg[63:0] X1_d1;
reg[2:0] X2_address1;
reg X2_ce1;
reg X2_we1;
reg[63:0] X2_d1;
reg[2:0] D_address1;
reg D_ce1;
reg D_we1;
reg[63:0] D_d1;

(* fsm_encoding = "none" *) reg   [84:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_239;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_fu_216_p2;
reg   [63:0] reg_243;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state53;
reg   [63:0] reg_251;
wire    ap_CS_fsm_state9;
reg   [63:0] reg_255;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state54;
wire   [63:0] grp_fu_208_p2;
reg   [63:0] reg_263;
wire    ap_CS_fsm_state18;
reg   [63:0] reg_269;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln5_fu_283_p1;
reg   [63:0] zext_ln5_reg_408;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_288_p3;
wire   [2:0] trunc_ln5_fu_296_p1;
reg   [2:0] trunc_ln5_reg_425;
wire   [63:0] zext_ln6_fu_316_p1;
reg   [63:0] zext_ln6_reg_430;
wire   [63:0] temp_A_fu_321_p1;
reg   [63:0] temp_A_reg_444;
wire   [63:0] temp_A_1_fu_326_p1;
reg   [63:0] temp_A_1_reg_449;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
reg   [63:0] B_load_reg_464;
wire   [63:0] temp_B_fu_331_p1;
reg   [63:0] temp_B_reg_480;
wire   [63:0] bitcast_ln10_fu_336_p1;
reg   [63:0] B_load_1_reg_492;
wire   [63:0] temp_B_1_fu_341_p1;
reg   [63:0] temp_B_1_reg_498;
wire    ap_CS_fsm_state10;
wire   [63:0] bitcast_ln10_2_fu_346_p1;
wire   [63:0] grp_fu_221_p2;
reg   [63:0] mul6_reg_510;
reg   [63:0] mul6_1_reg_515;
wire   [63:0] grp_fu_234_p2;
reg   [63:0] temp_D_reg_520;
wire    ap_CS_fsm_state48;
wire   [63:0] bitcast_ln16_2_fu_366_p1;
wire    ap_CS_fsm_state49;
reg   [63:0] temp_D_1_reg_531;
wire   [63:0] bitcast_ln16_3_fu_376_p1;
wire    ap_CS_fsm_state50;
wire   [63:0] grp_fu_212_p2;
reg   [63:0] add_reg_542;
reg   [63:0] add_1_reg_547;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
reg   [3:0] i_fu_66;
wire   [3:0] add_ln5_fu_300_p2;
wire   [63:0] bitcast_ln10_1_fu_351_p1;
wire   [63:0] bitcast_ln10_3_fu_356_p1;
wire   [63:0] bitcast_ln16_fu_381_p1;
wire   [63:0] bitcast_ln16_1_fu_391_p1;
wire   [63:0] bitcast_ln17_fu_386_p1;
wire   [63:0] bitcast_ln17_1_fu_396_p1;
reg   [63:0] grp_fu_208_p0;
reg   [63:0] grp_fu_208_p1;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_212_p0;
reg   [63:0] grp_fu_212_p1;
reg   [63:0] grp_fu_216_p0;
reg   [63:0] grp_fu_216_p1;
reg   [63:0] grp_fu_221_p0;
reg   [63:0] grp_fu_221_p1;
reg   [63:0] grp_fu_226_p0;
reg   [63:0] grp_fu_226_p1;
wire    ap_CS_fsm_state55;
reg   [63:0] grp_fu_230_p0;
reg   [63:0] grp_fu_230_p1;
reg   [63:0] grp_fu_234_p1;
wire    ap_CS_fsm_state20;
wire   [2:0] or_ln5_fu_311_p2;
wire   [63:0] xor_ln16_fu_361_p2;
wire   [63:0] xor_ln16_1_fu_371_p2;
wire   [63:0] grp_fu_226_p2;
wire   [63:0] grp_fu_230_p2;
reg   [84:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 85'd1;
end

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_208_p0),
    .din1(grp_fu_208_p1),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p0),
    .din1(grp_fu_212_p1),
    .ce(1'b1),
    .dout(grp_fu_212_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_216_p0),
    .din1(grp_fu_216_p1),
    .ce(1'b1),
    .dout(grp_fu_216_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_221_p0),
    .din1(grp_fu_221_p1),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .din1(grp_fu_226_p1),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_230_p0),
    .din1(grp_fu_230_p1),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_fu_234_p1),
    .ce(1'b1),
    .dout(grp_fu_234_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_66 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_288_p3 == 1'd0))) begin
        i_fu_66 <= add_ln5_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_load_1_reg_492 <= B_q0;
        temp_B_reg_480 <= temp_B_fu_331_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_load_reg_464 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        add_1_reg_547 <= grp_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        add_reg_542 <= grp_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul6_1_reg_515 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul6_reg_510 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_239 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_243 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_251 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_255 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_263 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state54))) begin
        reg_269 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_A_1_reg_449 <= temp_A_1_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_A_reg_444 <= temp_A_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_B_1_reg_498 <= temp_B_1_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        temp_D_1_reg_531 <= grp_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_D_reg_520 <= grp_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_288_p3 == 1'd0))) begin
        trunc_ln5_reg_425 <= trunc_ln5_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln5_reg_408[3 : 0] <= zext_ln5_fu_283_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln6_reg_430[2 : 1] <= zext_ln6_fu_316_p1[2 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = zext_ln6_fu_316_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln5_fu_283_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_address0 = zext_ln6_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = zext_ln5_reg_408;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C_address0 = zext_ln6_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address0 = zext_ln5_reg_408;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        D_address1 = zext_ln6_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        D_address1 = zext_ln5_reg_408;
    end else begin
        D_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        D_ce1 = 1'b1;
    end else begin
        D_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        D_d1 = bitcast_ln10_3_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        D_d1 = bitcast_ln10_1_fu_351_p1;
    end else begin
        D_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        D_we1 = 1'b1;
    end else begin
        D_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        X1_address1 = zext_ln6_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        X1_address1 = zext_ln5_reg_408;
    end else begin
        X1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84))) begin
        X1_ce1 = 1'b1;
    end else begin
        X1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        X1_d1 = bitcast_ln16_1_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        X1_d1 = bitcast_ln16_fu_381_p1;
    end else begin
        X1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84))) begin
        X1_we1 = 1'b1;
    end else begin
        X1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        X2_address1 = zext_ln6_reg_430;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        X2_address1 = zext_ln5_reg_408;
    end else begin
        X2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84))) begin
        X2_ce1 = 1'b1;
    end else begin
        X2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        X2_d1 = bitcast_ln17_1_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        X2_d1 = bitcast_ln17_fu_386_p1;
    end else begin
        X2_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84))) begin
        X2_we1 = 1'b1;
    end else begin
        X2_we1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_288_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_288_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_208_p0 = bitcast_ln16_3_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_208_p0 = bitcast_ln16_2_fu_366_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_208_p0 = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_208_p0 = reg_243;
    end else begin
        grp_fu_208_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_208_p1 = temp_D_1_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_208_p1 = temp_D_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_208_p1 = mul6_1_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_208_p1 = mul6_reg_510;
    end else begin
        grp_fu_208_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_212_p0 = temp_D_1_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_212_p0 = temp_D_reg_520;
    end else begin
        grp_fu_212_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_212_p1 = temp_B_1_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_212_p1 = temp_B_reg_480;
    end else begin
        grp_fu_212_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_216_p0 = temp_A_1_reg_449;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_216_p0 = temp_A_reg_444;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_216_p0 = temp_B_1_fu_341_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_216_p0 = temp_B_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_216_p0 = temp_A_1_fu_326_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_216_p0 = temp_A_fu_321_p1;
    end else begin
        grp_fu_216_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49))) begin
        grp_fu_216_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_216_p1 = temp_B_1_fu_341_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_216_p1 = temp_B_fu_331_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_216_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_216_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_221_p0 = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_221_p0 = reg_243;
    end else begin
        grp_fu_221_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_221_p1 = bitcast_ln10_2_fu_346_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_221_p1 = bitcast_ln10_fu_336_p1;
    end else begin
        grp_fu_221_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_226_p0 = reg_269;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_226_p0 = reg_263;
    end else begin
        grp_fu_226_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_226_p1 = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_226_p1 = reg_243;
    end else begin
        grp_fu_226_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_230_p0 = add_1_reg_547;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_230_p0 = add_reg_542;
    end else begin
        grp_fu_230_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_230_p1 = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_230_p1 = reg_243;
    end else begin
        grp_fu_230_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_234_p1 = reg_269;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_234_p1 = reg_263;
    end else begin
        grp_fu_234_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_288_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5_fu_300_p2 = (i_fu_66 + 4'd2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign bitcast_ln10_1_fu_351_p1 = grp_fu_208_p2;

assign bitcast_ln10_2_fu_346_p1 = reg_251;

assign bitcast_ln10_3_fu_356_p1 = grp_fu_208_p2;

assign bitcast_ln10_fu_336_p1 = reg_251;

assign bitcast_ln16_1_fu_391_p1 = grp_fu_226_p2;

assign bitcast_ln16_2_fu_366_p1 = xor_ln16_fu_361_p2;

assign bitcast_ln16_3_fu_376_p1 = xor_ln16_1_fu_371_p2;

assign bitcast_ln16_fu_381_p1 = grp_fu_226_p2;

assign bitcast_ln17_1_fu_396_p1 = grp_fu_230_p2;

assign bitcast_ln17_fu_386_p1 = grp_fu_230_p2;

assign or_ln5_fu_311_p2 = (trunc_ln5_reg_425 | 3'd1);

assign temp_A_1_fu_326_p1 = reg_239;

assign temp_A_fu_321_p1 = reg_239;

assign temp_B_1_fu_341_p1 = B_load_1_reg_492;

assign temp_B_fu_331_p1 = B_load_reg_464;

assign tmp_fu_288_p3 = i_fu_66[32'd3];

assign trunc_ln5_fu_296_p1 = i_fu_66[2:0];

assign xor_ln16_1_fu_371_p2 = (64'd9223372036854775808 ^ B_load_1_reg_492);

assign xor_ln16_fu_361_p2 = (64'd9223372036854775808 ^ B_load_reg_464);

assign zext_ln5_fu_283_p1 = i_fu_66;

assign zext_ln6_fu_316_p1 = or_ln5_fu_311_p2;

always @ (posedge ap_clk) begin
    zext_ln5_reg_408[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln6_reg_430[0] <= 1'b1;
    zext_ln6_reg_430[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //kp_502_7

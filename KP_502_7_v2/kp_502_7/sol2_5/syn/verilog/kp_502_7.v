// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_7_kp_502_7,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.567000,HLS_SYN_LAT=80,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15569,HLS_SYN_LUT=17262,HLS_VERSION=2021_2}" *)

module kp_502_7 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0,
        A_1,
        A_2,
        A_3,
        A_4,
        A_5,
        A_6,
        A_7,
        B_0,
        B_1,
        B_2,
        B_3,
        B_4,
        B_5,
        B_6,
        B_7,
        C_0,
        C_1,
        C_2,
        C_3,
        C_4,
        C_5,
        C_6,
        C_7,
        X1_0,
        X1_0_ap_vld,
        X1_1,
        X1_1_ap_vld,
        X1_2,
        X1_2_ap_vld,
        X1_3,
        X1_3_ap_vld,
        X1_4,
        X1_4_ap_vld,
        X1_5,
        X1_5_ap_vld,
        X1_6,
        X1_6_ap_vld,
        X1_7,
        X1_7_ap_vld,
        X2_0,
        X2_0_ap_vld,
        X2_1,
        X2_1_ap_vld,
        X2_2,
        X2_2_ap_vld,
        X2_3,
        X2_3_ap_vld,
        X2_4,
        X2_4_ap_vld,
        X2_5,
        X2_5_ap_vld,
        X2_6,
        X2_6_ap_vld,
        X2_7,
        X2_7_ap_vld,
        D_0,
        D_0_ap_vld,
        D_1,
        D_1_ap_vld,
        D_2,
        D_2_ap_vld,
        D_3,
        D_3_ap_vld,
        D_4,
        D_4_ap_vld,
        D_5,
        D_5_ap_vld,
        D_6,
        D_6_ap_vld,
        D_7,
        D_7_ap_vld
);

parameter    ap_ST_fsm_state1 = 81'd1;
parameter    ap_ST_fsm_state2 = 81'd2;
parameter    ap_ST_fsm_state3 = 81'd4;
parameter    ap_ST_fsm_state4 = 81'd8;
parameter    ap_ST_fsm_state5 = 81'd16;
parameter    ap_ST_fsm_state6 = 81'd32;
parameter    ap_ST_fsm_state7 = 81'd64;
parameter    ap_ST_fsm_state8 = 81'd128;
parameter    ap_ST_fsm_state9 = 81'd256;
parameter    ap_ST_fsm_state10 = 81'd512;
parameter    ap_ST_fsm_state11 = 81'd1024;
parameter    ap_ST_fsm_state12 = 81'd2048;
parameter    ap_ST_fsm_state13 = 81'd4096;
parameter    ap_ST_fsm_state14 = 81'd8192;
parameter    ap_ST_fsm_state15 = 81'd16384;
parameter    ap_ST_fsm_state16 = 81'd32768;
parameter    ap_ST_fsm_state17 = 81'd65536;
parameter    ap_ST_fsm_state18 = 81'd131072;
parameter    ap_ST_fsm_state19 = 81'd262144;
parameter    ap_ST_fsm_state20 = 81'd524288;
parameter    ap_ST_fsm_state21 = 81'd1048576;
parameter    ap_ST_fsm_state22 = 81'd2097152;
parameter    ap_ST_fsm_state23 = 81'd4194304;
parameter    ap_ST_fsm_state24 = 81'd8388608;
parameter    ap_ST_fsm_state25 = 81'd16777216;
parameter    ap_ST_fsm_state26 = 81'd33554432;
parameter    ap_ST_fsm_state27 = 81'd67108864;
parameter    ap_ST_fsm_state28 = 81'd134217728;
parameter    ap_ST_fsm_state29 = 81'd268435456;
parameter    ap_ST_fsm_state30 = 81'd536870912;
parameter    ap_ST_fsm_state31 = 81'd1073741824;
parameter    ap_ST_fsm_state32 = 81'd2147483648;
parameter    ap_ST_fsm_state33 = 81'd4294967296;
parameter    ap_ST_fsm_state34 = 81'd8589934592;
parameter    ap_ST_fsm_state35 = 81'd17179869184;
parameter    ap_ST_fsm_state36 = 81'd34359738368;
parameter    ap_ST_fsm_state37 = 81'd68719476736;
parameter    ap_ST_fsm_state38 = 81'd137438953472;
parameter    ap_ST_fsm_state39 = 81'd274877906944;
parameter    ap_ST_fsm_state40 = 81'd549755813888;
parameter    ap_ST_fsm_state41 = 81'd1099511627776;
parameter    ap_ST_fsm_state42 = 81'd2199023255552;
parameter    ap_ST_fsm_state43 = 81'd4398046511104;
parameter    ap_ST_fsm_state44 = 81'd8796093022208;
parameter    ap_ST_fsm_state45 = 81'd17592186044416;
parameter    ap_ST_fsm_state46 = 81'd35184372088832;
parameter    ap_ST_fsm_state47 = 81'd70368744177664;
parameter    ap_ST_fsm_state48 = 81'd140737488355328;
parameter    ap_ST_fsm_state49 = 81'd281474976710656;
parameter    ap_ST_fsm_state50 = 81'd562949953421312;
parameter    ap_ST_fsm_state51 = 81'd1125899906842624;
parameter    ap_ST_fsm_state52 = 81'd2251799813685248;
parameter    ap_ST_fsm_state53 = 81'd4503599627370496;
parameter    ap_ST_fsm_state54 = 81'd9007199254740992;
parameter    ap_ST_fsm_state55 = 81'd18014398509481984;
parameter    ap_ST_fsm_state56 = 81'd36028797018963968;
parameter    ap_ST_fsm_state57 = 81'd72057594037927936;
parameter    ap_ST_fsm_state58 = 81'd144115188075855872;
parameter    ap_ST_fsm_state59 = 81'd288230376151711744;
parameter    ap_ST_fsm_state60 = 81'd576460752303423488;
parameter    ap_ST_fsm_state61 = 81'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 81'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 81'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 81'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 81'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 81'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 81'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 81'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 81'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 81'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 81'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 81'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 81'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 81'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 81'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 81'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 81'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 81'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 81'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 81'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 81'd1208925819614629174706176;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] A_0;
input  [63:0] A_1;
input  [63:0] A_2;
input  [63:0] A_3;
input  [63:0] A_4;
input  [63:0] A_5;
input  [63:0] A_6;
input  [63:0] A_7;
input  [63:0] B_0;
input  [63:0] B_1;
input  [63:0] B_2;
input  [63:0] B_3;
input  [63:0] B_4;
input  [63:0] B_5;
input  [63:0] B_6;
input  [63:0] B_7;
input  [63:0] C_0;
input  [63:0] C_1;
input  [63:0] C_2;
input  [63:0] C_3;
input  [63:0] C_4;
input  [63:0] C_5;
input  [63:0] C_6;
input  [63:0] C_7;
output  [63:0] X1_0;
output   X1_0_ap_vld;
output  [63:0] X1_1;
output   X1_1_ap_vld;
output  [63:0] X1_2;
output   X1_2_ap_vld;
output  [63:0] X1_3;
output   X1_3_ap_vld;
output  [63:0] X1_4;
output   X1_4_ap_vld;
output  [63:0] X1_5;
output   X1_5_ap_vld;
output  [63:0] X1_6;
output   X1_6_ap_vld;
output  [63:0] X1_7;
output   X1_7_ap_vld;
output  [63:0] X2_0;
output   X2_0_ap_vld;
output  [63:0] X2_1;
output   X2_1_ap_vld;
output  [63:0] X2_2;
output   X2_2_ap_vld;
output  [63:0] X2_3;
output   X2_3_ap_vld;
output  [63:0] X2_4;
output   X2_4_ap_vld;
output  [63:0] X2_5;
output   X2_5_ap_vld;
output  [63:0] X2_6;
output   X2_6_ap_vld;
output  [63:0] X2_7;
output   X2_7_ap_vld;
output  [63:0] D_0;
output   D_0_ap_vld;
output  [63:0] D_1;
output   D_1_ap_vld;
output  [63:0] D_2;
output   D_2_ap_vld;
output  [63:0] D_3;
output   D_3_ap_vld;
output  [63:0] D_4;
output   D_4_ap_vld;
output  [63:0] D_5;
output   D_5_ap_vld;
output  [63:0] D_6;
output   D_6_ap_vld;
output  [63:0] D_7;
output   D_7_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X1_0_ap_vld;
reg X1_1_ap_vld;
reg X1_2_ap_vld;
reg X1_3_ap_vld;
reg X1_4_ap_vld;
reg X1_5_ap_vld;
reg X1_6_ap_vld;
reg X1_7_ap_vld;
reg X2_0_ap_vld;
reg X2_1_ap_vld;
reg X2_2_ap_vld;
reg X2_3_ap_vld;
reg X2_4_ap_vld;
reg X2_5_ap_vld;
reg X2_6_ap_vld;
reg X2_7_ap_vld;
reg D_0_ap_vld;
reg D_1_ap_vld;
reg D_2_ap_vld;
reg D_3_ap_vld;
reg D_4_ap_vld;
reg D_5_ap_vld;
reg D_6_ap_vld;
reg D_7_ap_vld;

(* fsm_encoding = "none" *) reg   [80:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_498_p2;
reg   [63:0] reg_682;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state50;
wire   [63:0] grp_fu_503_p2;
reg   [63:0] reg_690;
wire   [63:0] grp_fu_508_p2;
reg   [63:0] reg_698;
wire   [63:0] grp_fu_513_p2;
reg   [63:0] reg_706;
wire   [63:0] grp_fu_518_p2;
reg   [63:0] reg_714;
wire   [63:0] grp_fu_523_p2;
reg   [63:0] reg_722;
wire   [63:0] grp_fu_528_p2;
reg   [63:0] reg_730;
wire   [63:0] grp_fu_533_p2;
reg   [63:0] reg_738;
wire   [63:0] grp_fu_434_p2;
reg   [63:0] reg_746;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_438_p2;
reg   [63:0] reg_752;
wire   [63:0] grp_fu_442_p2;
reg   [63:0] reg_758;
wire   [63:0] grp_fu_446_p2;
reg   [63:0] reg_764;
wire   [63:0] grp_fu_450_p2;
reg   [63:0] reg_770;
wire   [63:0] grp_fu_454_p2;
reg   [63:0] reg_776;
wire   [63:0] grp_fu_458_p2;
reg   [63:0] reg_782;
wire   [63:0] grp_fu_462_p2;
reg   [63:0] reg_788;
wire   [63:0] temp_A_fu_794_p1;
reg   [63:0] temp_A_reg_1122;
wire   [63:0] temp_A_1_fu_799_p1;
reg   [63:0] temp_A_1_reg_1127;
wire   [63:0] temp_A_2_fu_804_p1;
reg   [63:0] temp_A_2_reg_1132;
wire   [63:0] temp_A_3_fu_809_p1;
reg   [63:0] temp_A_3_reg_1137;
wire   [63:0] temp_A_4_fu_814_p1;
reg   [63:0] temp_A_4_reg_1142;
wire   [63:0] temp_A_5_fu_819_p1;
reg   [63:0] temp_A_5_reg_1147;
wire   [63:0] temp_A_6_fu_824_p1;
reg   [63:0] temp_A_6_reg_1152;
wire   [63:0] temp_A_7_fu_829_p1;
reg   [63:0] temp_A_7_reg_1157;
wire    ap_CS_fsm_state6;
wire   [63:0] temp_B_fu_834_p1;
reg   [63:0] temp_B_reg_1167;
wire   [63:0] bitcast_ln10_fu_840_p1;
wire   [63:0] temp_B_1_fu_845_p1;
reg   [63:0] temp_B_1_reg_1184;
wire   [63:0] bitcast_ln10_2_fu_851_p1;
wire   [63:0] temp_B_2_fu_856_p1;
reg   [63:0] temp_B_2_reg_1201;
wire   [63:0] bitcast_ln10_4_fu_862_p1;
wire   [63:0] temp_B_3_fu_867_p1;
reg   [63:0] temp_B_3_reg_1218;
wire   [63:0] bitcast_ln10_6_fu_873_p1;
wire   [63:0] temp_B_4_fu_878_p1;
reg   [63:0] temp_B_4_reg_1235;
wire   [63:0] temp_B_5_fu_889_p1;
reg   [63:0] temp_B_5_reg_1252;
wire   [63:0] temp_B_6_fu_900_p1;
reg   [63:0] temp_B_6_reg_1269;
wire   [63:0] temp_B_7_fu_911_p1;
reg   [63:0] temp_B_7_reg_1286;
wire   [63:0] grp_fu_538_p2;
reg   [63:0] mul_4_reg_1298;
wire   [63:0] grp_fu_542_p2;
reg   [63:0] mul6_4_reg_1303;
wire   [63:0] grp_fu_546_p2;
reg   [63:0] mul_5_reg_1308;
wire   [63:0] grp_fu_550_p2;
reg   [63:0] mul6_5_reg_1313;
wire   [63:0] grp_fu_554_p2;
reg   [63:0] mul_6_reg_1318;
wire   [63:0] grp_fu_558_p2;
reg   [63:0] mul6_6_reg_1323;
wire   [63:0] grp_fu_562_p2;
reg   [63:0] mul_7_reg_1328;
wire   [63:0] grp_fu_566_p2;
reg   [63:0] mul6_7_reg_1333;
wire   [63:0] grp_fu_642_p2;
reg   [63:0] temp_D_reg_1338;
wire    ap_CS_fsm_state45;
wire   [63:0] grp_fu_647_p2;
reg   [63:0] temp_D_1_reg_1344;
wire   [63:0] grp_fu_652_p2;
reg   [63:0] temp_D_2_reg_1350;
wire   [63:0] grp_fu_657_p2;
reg   [63:0] temp_D_3_reg_1356;
wire   [63:0] grp_fu_662_p2;
reg   [63:0] temp_D_4_reg_1362;
wire   [63:0] grp_fu_667_p2;
reg   [63:0] temp_D_5_reg_1368;
wire   [63:0] grp_fu_672_p2;
reg   [63:0] temp_D_6_reg_1374;
wire   [63:0] grp_fu_677_p2;
reg   [63:0] temp_D_7_reg_1380;
wire   [63:0] bitcast_ln16_8_fu_967_p1;
wire    ap_CS_fsm_state46;
wire   [63:0] bitcast_ln16_9_fu_977_p1;
wire   [63:0] bitcast_ln16_10_fu_987_p1;
wire   [63:0] bitcast_ln16_11_fu_997_p1;
wire   [63:0] grp_fu_466_p2;
reg   [63:0] sub12_4_reg_1426;
wire   [63:0] grp_fu_470_p2;
reg   [63:0] add_4_reg_1431;
wire   [63:0] grp_fu_474_p2;
reg   [63:0] sub12_5_reg_1436;
wire   [63:0] grp_fu_478_p2;
reg   [63:0] add_5_reg_1441;
wire   [63:0] grp_fu_482_p2;
reg   [63:0] sub12_6_reg_1446;
wire   [63:0] grp_fu_486_p2;
reg   [63:0] add_6_reg_1451;
wire   [63:0] grp_fu_490_p2;
reg   [63:0] sub12_7_reg_1456;
wire   [63:0] grp_fu_494_p2;
reg   [63:0] add_7_reg_1461;
wire    ap_CS_fsm_state81;
reg   [63:0] grp_fu_434_p0;
reg   [63:0] grp_fu_434_p1;
wire    ap_CS_fsm_state11;
reg   [63:0] grp_fu_438_p0;
reg   [63:0] grp_fu_438_p1;
reg   [63:0] grp_fu_442_p0;
reg   [63:0] grp_fu_442_p1;
reg   [63:0] grp_fu_446_p0;
reg   [63:0] grp_fu_446_p1;
reg   [63:0] grp_fu_450_p0;
reg   [63:0] grp_fu_450_p1;
reg   [63:0] grp_fu_454_p0;
reg   [63:0] grp_fu_454_p1;
reg   [63:0] grp_fu_458_p0;
reg   [63:0] grp_fu_458_p1;
reg   [63:0] grp_fu_462_p0;
reg   [63:0] grp_fu_462_p1;
wire   [63:0] grp_fu_466_p0;
wire   [63:0] grp_fu_474_p0;
wire   [63:0] grp_fu_482_p0;
wire   [63:0] grp_fu_490_p0;
reg   [63:0] grp_fu_498_p0;
reg   [63:0] grp_fu_498_p1;
reg   [63:0] grp_fu_503_p0;
reg   [63:0] grp_fu_503_p1;
reg   [63:0] grp_fu_508_p0;
reg   [63:0] grp_fu_508_p1;
reg   [63:0] grp_fu_513_p0;
reg   [63:0] grp_fu_513_p1;
reg   [63:0] grp_fu_518_p0;
reg   [63:0] grp_fu_518_p1;
reg   [63:0] grp_fu_523_p0;
reg   [63:0] grp_fu_523_p1;
reg   [63:0] grp_fu_528_p0;
reg   [63:0] grp_fu_528_p1;
reg   [63:0] grp_fu_533_p0;
reg   [63:0] grp_fu_533_p1;
wire   [63:0] grp_fu_542_p1;
wire   [63:0] grp_fu_550_p1;
wire   [63:0] grp_fu_558_p1;
wire   [63:0] grp_fu_566_p1;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state16;
wire   [63:0] xor_ln16_fu_962_p2;
wire   [63:0] xor_ln16_1_fu_972_p2;
wire   [63:0] xor_ln16_2_fu_982_p2;
wire   [63:0] xor_ln16_3_fu_992_p2;
wire   [63:0] xor_ln16_4_fu_1002_p2;
wire   [63:0] xor_ln16_5_fu_1012_p2;
wire   [63:0] xor_ln16_6_fu_1022_p2;
wire   [63:0] xor_ln16_7_fu_1032_p2;
wire   [63:0] grp_fu_578_p2;
wire   [63:0] grp_fu_582_p2;
wire   [63:0] grp_fu_586_p2;
wire   [63:0] grp_fu_590_p2;
wire   [63:0] grp_fu_594_p2;
wire   [63:0] grp_fu_598_p2;
wire   [63:0] grp_fu_602_p2;
wire   [63:0] grp_fu_606_p2;
wire   [63:0] grp_fu_610_p2;
wire   [63:0] grp_fu_614_p2;
wire   [63:0] grp_fu_618_p2;
wire   [63:0] grp_fu_622_p2;
wire   [63:0] grp_fu_626_p2;
wire   [63:0] grp_fu_630_p2;
wire   [63:0] grp_fu_634_p2;
wire   [63:0] grp_fu_638_p2;
reg   [80:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 81'd1;
end

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_434_p0),
    .din1(grp_fu_434_p1),
    .ce(1'b1),
    .dout(grp_fu_434_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_438_p0),
    .din1(grp_fu_438_p1),
    .ce(1'b1),
    .dout(grp_fu_438_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_442_p0),
    .din1(grp_fu_442_p1),
    .ce(1'b1),
    .dout(grp_fu_442_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_446_p0),
    .din1(grp_fu_446_p1),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_450_p0),
    .din1(grp_fu_450_p1),
    .ce(1'b1),
    .dout(grp_fu_450_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_454_p0),
    .din1(grp_fu_454_p1),
    .ce(1'b1),
    .dout(grp_fu_454_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_458_p0),
    .din1(grp_fu_458_p1),
    .ce(1'b1),
    .dout(grp_fu_458_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_462_p0),
    .din1(grp_fu_462_p1),
    .ce(1'b1),
    .dout(grp_fu_462_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_466_p0),
    .din1(temp_D_4_reg_1362),
    .ce(1'b1),
    .dout(grp_fu_466_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_D_4_reg_1362),
    .din1(temp_B_4_reg_1235),
    .ce(1'b1),
    .dout(grp_fu_470_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_474_p0),
    .din1(temp_D_5_reg_1368),
    .ce(1'b1),
    .dout(grp_fu_474_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_D_5_reg_1368),
    .din1(temp_B_5_reg_1252),
    .ce(1'b1),
    .dout(grp_fu_478_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_482_p0),
    .din1(temp_D_6_reg_1374),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_D_6_reg_1374),
    .din1(temp_B_6_reg_1269),
    .ce(1'b1),
    .dout(grp_fu_486_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_490_p0),
    .din1(temp_D_7_reg_1380),
    .ce(1'b1),
    .dout(grp_fu_490_p2)
);

kp_502_7_dsub_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_D_7_reg_1380),
    .din1(temp_B_7_reg_1286),
    .ce(1'b1),
    .dout(grp_fu_494_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_498_p0),
    .din1(grp_fu_498_p1),
    .ce(1'b1),
    .dout(grp_fu_498_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_503_p0),
    .din1(grp_fu_503_p1),
    .ce(1'b1),
    .dout(grp_fu_503_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_508_p0),
    .din1(grp_fu_508_p1),
    .ce(1'b1),
    .dout(grp_fu_508_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .ce(1'b1),
    .dout(grp_fu_513_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_518_p0),
    .din1(grp_fu_518_p1),
    .ce(1'b1),
    .dout(grp_fu_518_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_523_p0),
    .din1(grp_fu_523_p1),
    .ce(1'b1),
    .dout(grp_fu_523_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_528_p0),
    .din1(grp_fu_528_p1),
    .ce(1'b1),
    .dout(grp_fu_528_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_533_p0),
    .din1(grp_fu_533_p1),
    .ce(1'b1),
    .dout(grp_fu_533_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_4_fu_878_p1),
    .din1(temp_B_4_fu_878_p1),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_714),
    .din1(grp_fu_542_p1),
    .ce(1'b1),
    .dout(grp_fu_542_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_5_fu_889_p1),
    .din1(temp_B_5_fu_889_p1),
    .ce(1'b1),
    .dout(grp_fu_546_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_722),
    .din1(grp_fu_550_p1),
    .ce(1'b1),
    .dout(grp_fu_550_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_6_fu_900_p1),
    .din1(temp_B_6_fu_900_p1),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_730),
    .din1(grp_fu_558_p1),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_7_fu_911_p1),
    .din1(temp_B_7_fu_911_p1),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

kp_502_7_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_738),
    .din1(grp_fu_566_p1),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_746),
    .din1(reg_682),
    .ce(1'b1),
    .dout(grp_fu_578_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_752),
    .din1(reg_682),
    .ce(1'b1),
    .dout(grp_fu_582_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_758),
    .din1(reg_690),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_764),
    .din1(reg_690),
    .ce(1'b1),
    .dout(grp_fu_590_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_770),
    .din1(reg_698),
    .ce(1'b1),
    .dout(grp_fu_594_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_776),
    .din1(reg_698),
    .ce(1'b1),
    .dout(grp_fu_598_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_782),
    .din1(reg_706),
    .ce(1'b1),
    .dout(grp_fu_602_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_788),
    .din1(reg_706),
    .ce(1'b1),
    .dout(grp_fu_606_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub12_4_reg_1426),
    .din1(reg_714),
    .ce(1'b1),
    .dout(grp_fu_610_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_4_reg_1431),
    .din1(reg_714),
    .ce(1'b1),
    .dout(grp_fu_614_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub12_5_reg_1436),
    .din1(reg_722),
    .ce(1'b1),
    .dout(grp_fu_618_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_5_reg_1441),
    .din1(reg_722),
    .ce(1'b1),
    .dout(grp_fu_622_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub12_6_reg_1446),
    .din1(reg_730),
    .ce(1'b1),
    .dout(grp_fu_626_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_6_reg_1451),
    .din1(reg_730),
    .ce(1'b1),
    .dout(grp_fu_630_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub12_7_reg_1456),
    .din1(reg_738),
    .ce(1'b1),
    .dout(grp_fu_634_p2)
);

kp_502_7_ddiv_64ns_64ns_64_31_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_31_no_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_7_reg_1461),
    .din1(reg_738),
    .ce(1'b1),
    .dout(grp_fu_638_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_746),
    .ce(1'b1),
    .dout(grp_fu_642_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_752),
    .ce(1'b1),
    .dout(grp_fu_647_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_758),
    .ce(1'b1),
    .dout(grp_fu_652_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_764),
    .ce(1'b1),
    .dout(grp_fu_657_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_770),
    .ce(1'b1),
    .dout(grp_fu_662_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_776),
    .ce(1'b1),
    .dout(grp_fu_667_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_782),
    .ce(1'b1),
    .dout(grp_fu_672_p2)
);

kp_502_7_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_788),
    .ce(1'b1),
    .dout(grp_fu_677_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        add_4_reg_1431 <= grp_fu_470_p2;
        add_5_reg_1441 <= grp_fu_478_p2;
        add_6_reg_1451 <= grp_fu_486_p2;
        add_7_reg_1461 <= grp_fu_494_p2;
        sub12_4_reg_1426 <= grp_fu_466_p2;
        sub12_5_reg_1436 <= grp_fu_474_p2;
        sub12_6_reg_1446 <= grp_fu_482_p2;
        sub12_7_reg_1456 <= grp_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul6_4_reg_1303 <= grp_fu_542_p2;
        mul6_5_reg_1313 <= grp_fu_550_p2;
        mul6_6_reg_1323 <= grp_fu_558_p2;
        mul6_7_reg_1333 <= grp_fu_566_p2;
        mul_4_reg_1298 <= grp_fu_538_p2;
        mul_5_reg_1308 <= grp_fu_546_p2;
        mul_6_reg_1318 <= grp_fu_554_p2;
        mul_7_reg_1328 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_682 <= grp_fu_498_p2;
        reg_690 <= grp_fu_503_p2;
        reg_698 <= grp_fu_508_p2;
        reg_706 <= grp_fu_513_p2;
        reg_714 <= grp_fu_518_p2;
        reg_722 <= grp_fu_523_p2;
        reg_730 <= grp_fu_528_p2;
        reg_738 <= grp_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state50))) begin
        reg_746 <= grp_fu_434_p2;
        reg_752 <= grp_fu_438_p2;
        reg_758 <= grp_fu_442_p2;
        reg_764 <= grp_fu_446_p2;
        reg_770 <= grp_fu_450_p2;
        reg_776 <= grp_fu_454_p2;
        reg_782 <= grp_fu_458_p2;
        reg_788 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_A_1_reg_1127 <= temp_A_1_fu_799_p1;
        temp_A_2_reg_1132 <= temp_A_2_fu_804_p1;
        temp_A_3_reg_1137 <= temp_A_3_fu_809_p1;
        temp_A_4_reg_1142 <= temp_A_4_fu_814_p1;
        temp_A_5_reg_1147 <= temp_A_5_fu_819_p1;
        temp_A_6_reg_1152 <= temp_A_6_fu_824_p1;
        temp_A_7_reg_1157 <= temp_A_7_fu_829_p1;
        temp_A_reg_1122 <= temp_A_fu_794_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_B_1_reg_1184 <= temp_B_1_fu_845_p1;
        temp_B_2_reg_1201 <= temp_B_2_fu_856_p1;
        temp_B_3_reg_1218 <= temp_B_3_fu_867_p1;
        temp_B_4_reg_1235 <= temp_B_4_fu_878_p1;
        temp_B_5_reg_1252 <= temp_B_5_fu_889_p1;
        temp_B_6_reg_1269 <= temp_B_6_fu_900_p1;
        temp_B_7_reg_1286 <= temp_B_7_fu_911_p1;
        temp_B_reg_1167 <= temp_B_fu_834_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        temp_D_1_reg_1344 <= grp_fu_647_p2;
        temp_D_2_reg_1350 <= grp_fu_652_p2;
        temp_D_3_reg_1356 <= grp_fu_657_p2;
        temp_D_4_reg_1362 <= grp_fu_662_p2;
        temp_D_5_reg_1368 <= grp_fu_667_p2;
        temp_D_6_reg_1374 <= grp_fu_672_p2;
        temp_D_7_reg_1380 <= grp_fu_677_p2;
        temp_D_reg_1338 <= grp_fu_642_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_0_ap_vld = 1'b1;
    end else begin
        D_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_1_ap_vld = 1'b1;
    end else begin
        D_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_2_ap_vld = 1'b1;
    end else begin
        D_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_3_ap_vld = 1'b1;
    end else begin
        D_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_4_ap_vld = 1'b1;
    end else begin
        D_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_5_ap_vld = 1'b1;
    end else begin
        D_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_6_ap_vld = 1'b1;
    end else begin
        D_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        D_7_ap_vld = 1'b1;
    end else begin
        D_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_0_ap_vld = 1'b1;
    end else begin
        X1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_1_ap_vld = 1'b1;
    end else begin
        X1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_2_ap_vld = 1'b1;
    end else begin
        X1_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_3_ap_vld = 1'b1;
    end else begin
        X1_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_4_ap_vld = 1'b1;
    end else begin
        X1_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_5_ap_vld = 1'b1;
    end else begin
        X1_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_6_ap_vld = 1'b1;
    end else begin
        X1_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X1_7_ap_vld = 1'b1;
    end else begin
        X1_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_0_ap_vld = 1'b1;
    end else begin
        X2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_1_ap_vld = 1'b1;
    end else begin
        X2_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_2_ap_vld = 1'b1;
    end else begin
        X2_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_3_ap_vld = 1'b1;
    end else begin
        X2_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_4_ap_vld = 1'b1;
    end else begin
        X2_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_5_ap_vld = 1'b1;
    end else begin
        X2_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_6_ap_vld = 1'b1;
    end else begin
        X2_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        X2_7_ap_vld = 1'b1;
    end else begin
        X2_7_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_434_p0 = bitcast_ln16_8_fu_967_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_434_p0 = reg_682;
    end else begin
        grp_fu_434_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_434_p1 = temp_D_reg_1338;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_434_p1 = reg_690;
    end else begin
        grp_fu_434_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_438_p0 = temp_D_reg_1338;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_438_p0 = reg_698;
    end else begin
        grp_fu_438_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_438_p1 = temp_B_reg_1167;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_438_p1 = reg_706;
    end else begin
        grp_fu_438_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_442_p0 = bitcast_ln16_9_fu_977_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_442_p0 = reg_714;
    end else begin
        grp_fu_442_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_442_p1 = temp_D_1_reg_1344;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_442_p1 = reg_722;
    end else begin
        grp_fu_442_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_446_p0 = temp_D_1_reg_1344;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_446_p0 = reg_730;
    end else begin
        grp_fu_446_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_446_p1 = temp_B_1_reg_1184;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_446_p1 = reg_738;
    end else begin
        grp_fu_446_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_450_p0 = bitcast_ln16_10_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_450_p0 = mul_4_reg_1298;
    end else begin
        grp_fu_450_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_450_p1 = temp_D_2_reg_1350;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_450_p1 = mul6_4_reg_1303;
    end else begin
        grp_fu_450_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_454_p0 = temp_D_2_reg_1350;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_454_p0 = mul_5_reg_1308;
    end else begin
        grp_fu_454_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_454_p1 = temp_B_2_reg_1201;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_454_p1 = mul6_5_reg_1313;
    end else begin
        grp_fu_454_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_458_p0 = bitcast_ln16_11_fu_997_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_458_p0 = mul_6_reg_1318;
    end else begin
        grp_fu_458_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_458_p1 = temp_D_3_reg_1356;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_458_p1 = mul6_6_reg_1323;
    end else begin
        grp_fu_458_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_462_p0 = temp_D_3_reg_1356;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_462_p0 = mul_7_reg_1328;
    end else begin
        grp_fu_462_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_462_p1 = temp_B_3_reg_1218;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_462_p1 = mul6_7_reg_1333;
    end else begin
        grp_fu_462_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_498_p0 = temp_A_reg_1122;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_498_p0 = temp_B_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_498_p0 = temp_A_fu_794_p1;
    end else begin
        grp_fu_498_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_498_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_498_p1 = temp_B_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_498_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_498_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_503_p0 = temp_A_1_reg_1127;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_503_p0 = reg_682;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_503_p0 = temp_A_1_fu_799_p1;
    end else begin
        grp_fu_503_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_503_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_503_p1 = bitcast_ln10_fu_840_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_503_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_503_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_508_p0 = temp_A_2_reg_1132;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_508_p0 = temp_B_1_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_508_p0 = temp_A_2_fu_804_p1;
    end else begin
        grp_fu_508_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_508_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_508_p1 = temp_B_1_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_508_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_508_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_513_p0 = temp_A_3_reg_1137;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_513_p0 = reg_690;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_513_p0 = temp_A_3_fu_809_p1;
    end else begin
        grp_fu_513_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_513_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_513_p1 = bitcast_ln10_2_fu_851_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_513_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_513_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_518_p0 = temp_A_4_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_518_p0 = temp_B_2_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_518_p0 = temp_A_4_fu_814_p1;
    end else begin
        grp_fu_518_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_518_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_518_p1 = temp_B_2_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_518_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_518_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_523_p0 = temp_A_5_reg_1147;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_523_p0 = reg_698;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_523_p0 = temp_A_5_fu_819_p1;
    end else begin
        grp_fu_523_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_523_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_523_p1 = bitcast_ln10_4_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_523_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_523_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_528_p0 = temp_A_6_reg_1152;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_528_p0 = temp_B_3_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_528_p0 = temp_A_6_fu_824_p1;
    end else begin
        grp_fu_528_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_528_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_528_p1 = temp_B_3_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_528_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_528_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_533_p0 = temp_A_7_reg_1157;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_533_p0 = reg_706;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_533_p0 = temp_A_7_fu_829_p1;
    end else begin
        grp_fu_533_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_533_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_533_p1 = bitcast_ln10_6_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_533_p1 = 64'd4616189618054758400;
    end else begin
        grp_fu_533_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_0 = grp_fu_434_p2;

assign D_1 = grp_fu_438_p2;

assign D_2 = grp_fu_442_p2;

assign D_3 = grp_fu_446_p2;

assign D_4 = grp_fu_450_p2;

assign D_5 = grp_fu_454_p2;

assign D_6 = grp_fu_458_p2;

assign D_7 = grp_fu_462_p2;

assign X1_0 = grp_fu_578_p2;

assign X1_1 = grp_fu_586_p2;

assign X1_2 = grp_fu_594_p2;

assign X1_3 = grp_fu_602_p2;

assign X1_4 = grp_fu_610_p2;

assign X1_5 = grp_fu_618_p2;

assign X1_6 = grp_fu_626_p2;

assign X1_7 = grp_fu_634_p2;

assign X2_0 = grp_fu_582_p2;

assign X2_1 = grp_fu_590_p2;

assign X2_2 = grp_fu_598_p2;

assign X2_3 = grp_fu_606_p2;

assign X2_4 = grp_fu_614_p2;

assign X2_5 = grp_fu_622_p2;

assign X2_6 = grp_fu_630_p2;

assign X2_7 = grp_fu_638_p2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign bitcast_ln10_2_fu_851_p1 = C_1;

assign bitcast_ln10_4_fu_862_p1 = C_2;

assign bitcast_ln10_6_fu_873_p1 = C_3;

assign bitcast_ln10_fu_840_p1 = C_0;

assign bitcast_ln16_10_fu_987_p1 = xor_ln16_2_fu_982_p2;

assign bitcast_ln16_11_fu_997_p1 = xor_ln16_3_fu_992_p2;

assign bitcast_ln16_8_fu_967_p1 = xor_ln16_fu_962_p2;

assign bitcast_ln16_9_fu_977_p1 = xor_ln16_1_fu_972_p2;

assign grp_fu_466_p0 = xor_ln16_4_fu_1002_p2;

assign grp_fu_474_p0 = xor_ln16_5_fu_1012_p2;

assign grp_fu_482_p0 = xor_ln16_6_fu_1022_p2;

assign grp_fu_490_p0 = xor_ln16_7_fu_1032_p2;

assign grp_fu_542_p1 = C_4;

assign grp_fu_550_p1 = C_5;

assign grp_fu_558_p1 = C_6;

assign grp_fu_566_p1 = C_7;

assign temp_A_1_fu_799_p1 = A_1;

assign temp_A_2_fu_804_p1 = A_2;

assign temp_A_3_fu_809_p1 = A_3;

assign temp_A_4_fu_814_p1 = A_4;

assign temp_A_5_fu_819_p1 = A_5;

assign temp_A_6_fu_824_p1 = A_6;

assign temp_A_7_fu_829_p1 = A_7;

assign temp_A_fu_794_p1 = A_0;

assign temp_B_1_fu_845_p1 = B_1;

assign temp_B_2_fu_856_p1 = B_2;

assign temp_B_3_fu_867_p1 = B_3;

assign temp_B_4_fu_878_p1 = B_4;

assign temp_B_5_fu_889_p1 = B_5;

assign temp_B_6_fu_900_p1 = B_6;

assign temp_B_7_fu_911_p1 = B_7;

assign temp_B_fu_834_p1 = B_0;

assign xor_ln16_1_fu_972_p2 = (64'd9223372036854775808 ^ B_1);

assign xor_ln16_2_fu_982_p2 = (64'd9223372036854775808 ^ B_2);

assign xor_ln16_3_fu_992_p2 = (64'd9223372036854775808 ^ B_3);

assign xor_ln16_4_fu_1002_p2 = (64'd9223372036854775808 ^ B_4);

assign xor_ln16_5_fu_1012_p2 = (64'd9223372036854775808 ^ B_5);

assign xor_ln16_6_fu_1022_p2 = (64'd9223372036854775808 ^ B_6);

assign xor_ln16_7_fu_1032_p2 = (64'd9223372036854775808 ^ B_7);

assign xor_ln16_fu_962_p2 = (64'd9223372036854775808 ^ B_0);

endmodule //kp_502_7

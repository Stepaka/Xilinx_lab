// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab5_z1_lab5_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.697000,HLS_SYN_LAT=129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=217,HLS_VERSION=2021_2}" *)

module lab5_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_0_address0,
        d_in_0_ce0,
        d_in_0_q0,
        d_in_0_address1,
        d_in_0_ce1,
        d_in_0_q1,
        d_in_1_address0,
        d_in_1_ce0,
        d_in_1_q0,
        d_in_1_address1,
        d_in_1_ce1,
        d_in_1_q1,
        d_in_2_address0,
        d_in_2_ce0,
        d_in_2_q0,
        d_in_2_address1,
        d_in_2_ce1,
        d_in_2_q1,
        d_in_3_address0,
        d_in_3_ce0,
        d_in_3_q0,
        d_in_3_address1,
        d_in_3_ce1,
        d_in_3_q1,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0,
        d_out_address1,
        d_out_ce1,
        d_out_we1,
        d_out_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] d_in_0_address0;
output   d_in_0_ce0;
input  [15:0] d_in_0_q0;
output  [6:0] d_in_0_address1;
output   d_in_0_ce1;
input  [15:0] d_in_0_q1;
output  [6:0] d_in_1_address0;
output   d_in_1_ce0;
input  [15:0] d_in_1_q0;
output  [6:0] d_in_1_address1;
output   d_in_1_ce1;
input  [15:0] d_in_1_q1;
output  [6:0] d_in_2_address0;
output   d_in_2_ce0;
input  [15:0] d_in_2_q0;
output  [6:0] d_in_2_address1;
output   d_in_2_ce1;
input  [15:0] d_in_2_q1;
output  [6:0] d_in_3_address0;
output   d_in_3_ce0;
input  [15:0] d_in_3_q0;
output  [6:0] d_in_3_address1;
output   d_in_3_ce1;
input  [15:0] d_in_3_q1;
output  [6:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [15:0] d_out_d0;
output  [6:0] d_out_address1;
output   d_out_ce1;
output   d_out_we1;
output  [15:0] d_out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_in_0_ce0;
reg d_in_0_ce1;
reg d_in_1_ce0;
reg d_in_1_ce1;
reg d_in_2_ce0;
reg d_in_2_ce1;
reg d_in_3_ce0;
reg d_in_3_ce1;
reg d_out_ce0;
reg d_out_we0;
reg d_out_ce1;
reg d_out_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln6_fu_211_p1;
reg   [63:0] zext_ln6_reg_367;
wire    ap_CS_fsm_state2;
wire   [9:0] zext_ln6_1_fu_216_p1;
reg   [9:0] zext_ln6_1_reg_372;
wire   [0:0] tmp_fu_224_p3;
wire   [63:0] zext_ln7_fu_249_p1;
reg   [63:0] zext_ln7_reg_400;
reg   [1:0] lshr_ln8_reg_410;
wire   [63:0] zext_ln8_fu_236_p1;
wire    ap_CS_fsm_state3;
reg   [7:0] i_fu_74;
wire   [7:0] add_ln6_fu_273_p2;
wire   [6:0] trunc_ln6_fu_232_p1;
wire   [6:0] or_ln6_fu_243_p2;
wire   [8:0] zext_ln6_2_fu_220_p1;
wire   [8:0] add_ln8_fu_257_p2;
wire   [15:0] add_ln11_1_fu_290_p2;
wire   [15:0] add_ln11_fu_284_p2;
wire   [9:0] add_ln10_fu_312_p2;
wire   [2:0] tmp_7_fu_327_p5;
wire   [15:0] tmp_5_fu_303_p4;
wire   [15:0] tmp_7_fu_327_p6;
wire   [15:0] add_ln11_4_fu_347_p2;
wire   [15:0] add_ln11_3_fu_341_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

lab5_z1_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U1(
    .din0(16'd0),
    .din1(d_in_1_q0),
    .din2(lshr_ln8_reg_410),
    .dout(tmp_5_fu_303_p4)
);

lab5_z1_mux_43_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_43_16_1_1_U2(
    .din0(16'd0),
    .din1(16'd0),
    .din2(16'd0),
    .din3(d_in_3_q0),
    .din4(tmp_7_fu_327_p5),
    .dout(tmp_7_fu_327_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_74 <= 8'd0;
    end else if (((tmp_fu_224_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_74 <= add_ln6_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_224_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        lshr_ln8_reg_410 <= {{add_ln8_fu_257_p2[8:7]}};
        zext_ln7_reg_400[6 : 1] <= zext_ln7_fu_249_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln6_1_reg_372[7 : 0] <= zext_ln6_1_fu_216_p1[7 : 0];
        zext_ln6_reg_367[7 : 0] <= zext_ln6_fu_211_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((tmp_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_0_ce0 = 1'b1;
    end else begin
        d_in_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_0_ce1 = 1'b1;
    end else begin
        d_in_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_1_ce0 = 1'b1;
    end else begin
        d_in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_1_ce1 = 1'b1;
    end else begin
        d_in_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_2_ce0 = 1'b1;
    end else begin
        d_in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_2_ce1 = 1'b1;
    end else begin
        d_in_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_3_ce0 = 1'b1;
    end else begin
        d_in_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_3_ce1 = 1'b1;
    end else begin
        d_in_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_out_ce1 = 1'b1;
    end else begin
        d_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_out_we1 = 1'b1;
    end else begin
        d_out_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_224_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_312_p2 = (zext_ln6_1_reg_372 + 10'd385);

assign add_ln11_1_fu_290_p2 = (d_in_2_q1 + d_in_3_q1);

assign add_ln11_3_fu_341_p2 = (d_in_0_q0 + tmp_5_fu_303_p4);

assign add_ln11_4_fu_347_p2 = (d_in_2_q0 + tmp_7_fu_327_p6);

assign add_ln11_fu_284_p2 = (d_in_1_q1 + d_in_0_q1);

assign add_ln6_fu_273_p2 = (i_fu_74 + 8'd2);

assign add_ln8_fu_257_p2 = (zext_ln6_2_fu_220_p1 + 9'd129);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign d_in_0_address0 = zext_ln7_fu_249_p1;

assign d_in_0_address1 = zext_ln6_fu_211_p1;

assign d_in_1_address0 = zext_ln7_fu_249_p1;

assign d_in_1_address1 = zext_ln8_fu_236_p1;

assign d_in_2_address0 = zext_ln7_fu_249_p1;

assign d_in_2_address1 = zext_ln8_fu_236_p1;

assign d_in_3_address0 = zext_ln7_fu_249_p1;

assign d_in_3_address1 = zext_ln8_fu_236_p1;

assign d_out_address0 = zext_ln7_reg_400;

assign d_out_address1 = zext_ln6_reg_367;

assign d_out_d0 = (add_ln11_4_fu_347_p2 + add_ln11_3_fu_341_p2);

assign d_out_d1 = (add_ln11_1_fu_290_p2 + add_ln11_fu_284_p2);

assign or_ln6_fu_243_p2 = (trunc_ln6_fu_232_p1 | 7'd1);

assign tmp_7_fu_327_p5 = {{add_ln10_fu_312_p2[9:7]}};

assign tmp_fu_224_p3 = i_fu_74[32'd7];

assign trunc_ln6_fu_232_p1 = i_fu_74[6:0];

assign zext_ln6_1_fu_216_p1 = i_fu_74;

assign zext_ln6_2_fu_220_p1 = i_fu_74;

assign zext_ln6_fu_211_p1 = i_fu_74;

assign zext_ln7_fu_249_p1 = or_ln6_fu_243_p2;

assign zext_ln8_fu_236_p1 = trunc_ln6_fu_232_p1;

always @ (posedge ap_clk) begin
    zext_ln6_reg_367[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln6_1_reg_372[9:8] <= 2'b00;
    zext_ln7_reg_400[0] <= 1'b1;
    zext_ln7_reg_400[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab5_z1

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab5_z1_lab5_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.697000,HLS_SYN_LAT=2050,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=53,HLS_SYN_LUT=251,HLS_VERSION=2021_2}" *)

module lab5_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_0_address0,
        d_in_0_ce0,
        d_in_0_q0,
        d_in_0_address1,
        d_in_0_ce1,
        d_in_0_q1,
        d_in_1_address0,
        d_in_1_ce0,
        d_in_1_q0,
        d_in_1_address1,
        d_in_1_ce1,
        d_in_1_q1,
        d_in_2_address0,
        d_in_2_ce0,
        d_in_2_q0,
        d_in_2_address1,
        d_in_2_ce1,
        d_in_2_q1,
        d_in_3_address0,
        d_in_3_ce0,
        d_in_3_q0,
        d_in_3_address1,
        d_in_3_ce1,
        d_in_3_q1,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0,
        d_out_address1,
        d_out_ce1,
        d_out_we1,
        d_out_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] d_in_0_address0;
output   d_in_0_ce0;
input  [15:0] d_in_0_q0;
output  [11:0] d_in_0_address1;
output   d_in_0_ce1;
input  [15:0] d_in_0_q1;
output  [11:0] d_in_1_address0;
output   d_in_1_ce0;
input  [15:0] d_in_1_q0;
output  [11:0] d_in_1_address1;
output   d_in_1_ce1;
input  [15:0] d_in_1_q1;
output  [11:0] d_in_2_address0;
output   d_in_2_ce0;
input  [15:0] d_in_2_q0;
output  [11:0] d_in_2_address1;
output   d_in_2_ce1;
input  [15:0] d_in_2_q1;
output  [11:0] d_in_3_address0;
output   d_in_3_ce0;
input  [15:0] d_in_3_q0;
output  [11:0] d_in_3_address1;
output   d_in_3_ce1;
input  [15:0] d_in_3_q1;
output  [11:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [15:0] d_out_d0;
output  [11:0] d_out_address1;
output   d_out_ce1;
output   d_out_we1;
output  [15:0] d_out_d1;

reg ap_idle;
reg d_in_0_ce0;
reg d_in_0_ce1;
reg d_in_1_ce0;
reg d_in_1_ce1;
reg d_in_2_ce0;
reg d_in_2_ce1;
reg d_in_3_ce0;
reg d_in_3_ce1;
reg d_out_ce0;
reg d_out_we0;
reg d_out_ce1;
reg d_out_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_213_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [12:0] i_1_reg_369;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln6_fu_221_p1;
reg   [63:0] zext_ln6_reg_378;
wire   [63:0] zext_ln7_fu_243_p1;
reg   [63:0] zext_ln7_reg_403;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln8_fu_230_p1;
reg   [12:0] i_fu_76;
wire   [12:0] add_ln6_fu_251_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i_1;
wire   [11:0] trunc_ln6_fu_226_p1;
wire   [11:0] or_ln6_fu_237_p2;
wire   [15:0] add_ln11_1_fu_274_p2;
wire   [15:0] add_ln11_fu_268_p2;
wire   [13:0] zext_ln6_2_fu_265_p1;
wire   [13:0] add_ln8_fu_287_p2;
wire   [1:0] tmp_5_fu_303_p3;
wire   [14:0] zext_ln6_1_fu_262_p1;
wire   [14:0] add_ln10_fu_313_p2;
wire   [2:0] tmp_7_fu_329_p5;
wire   [15:0] tmp_5_fu_303_p4;
wire   [15:0] tmp_7_fu_329_p6;
wire   [15:0] add_ln11_4_fu_349_p2;
wire   [15:0] add_ln11_3_fu_343_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_143;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lab5_z1_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U1(
    .din0(16'd0),
    .din1(d_in_1_q0),
    .din2(tmp_5_fu_303_p3),
    .dout(tmp_5_fu_303_p4)
);

lab5_z1_mux_43_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_43_16_1_1_U2(
    .din0(16'd0),
    .din1(16'd0),
    .din2(16'd0),
    .din3(d_in_3_q0),
    .din4(tmp_7_fu_329_p5),
    .dout(tmp_7_fu_329_p6)
);

lab5_z1_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_143)) begin
        if ((tmp_fu_213_p3 == 1'd0)) begin
            i_fu_76 <= add_ln6_fu_251_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_369 <= ap_sig_allocacmp_i_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_213_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln6_reg_378[12 : 0] <= zext_ln6_fu_221_p1[12 : 0];
        zext_ln7_reg_403[11 : 1] <= zext_ln7_fu_243_p1[11 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_213_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_0_ce0 = 1'b1;
    end else begin
        d_in_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_0_ce1 = 1'b1;
    end else begin
        d_in_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_1_ce0 = 1'b1;
    end else begin
        d_in_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_1_ce1 = 1'b1;
    end else begin
        d_in_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_2_ce0 = 1'b1;
    end else begin
        d_in_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_2_ce1 = 1'b1;
    end else begin
        d_in_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_3_ce0 = 1'b1;
    end else begin
        d_in_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_3_ce1 = 1'b1;
    end else begin
        d_in_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_out_ce1 = 1'b1;
    end else begin
        d_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_out_we1 = 1'b1;
    end else begin
        d_out_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_313_p2 = (zext_ln6_1_fu_262_p1 + 15'd12289);

assign add_ln11_1_fu_274_p2 = (d_in_2_q1 + d_in_3_q1);

assign add_ln11_3_fu_343_p2 = (d_in_0_q0 + tmp_5_fu_303_p4);

assign add_ln11_4_fu_349_p2 = (d_in_2_q0 + tmp_7_fu_329_p6);

assign add_ln11_fu_268_p2 = (d_in_1_q1 + d_in_0_q1);

assign add_ln6_fu_251_p2 = (ap_sig_allocacmp_i_1 + 13'd2);

assign add_ln8_fu_287_p2 = (zext_ln6_2_fu_265_p1 + 14'd4097);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_143 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign d_in_0_address0 = zext_ln7_fu_243_p1;

assign d_in_0_address1 = zext_ln6_fu_221_p1;

assign d_in_1_address0 = zext_ln7_fu_243_p1;

assign d_in_1_address1 = zext_ln8_fu_230_p1;

assign d_in_2_address0 = zext_ln7_fu_243_p1;

assign d_in_2_address1 = zext_ln8_fu_230_p1;

assign d_in_3_address0 = zext_ln7_fu_243_p1;

assign d_in_3_address1 = zext_ln8_fu_230_p1;

assign d_out_address0 = zext_ln7_reg_403;

assign d_out_address1 = zext_ln6_reg_378;

assign d_out_d0 = (add_ln11_4_fu_349_p2 + add_ln11_3_fu_343_p2);

assign d_out_d1 = (add_ln11_1_fu_274_p2 + add_ln11_fu_268_p2);

assign or_ln6_fu_237_p2 = (trunc_ln6_fu_226_p1 | 12'd1);

assign tmp_5_fu_303_p3 = {{add_ln8_fu_287_p2[13:12]}};

assign tmp_7_fu_329_p5 = {{add_ln10_fu_313_p2[14:12]}};

assign tmp_fu_213_p3 = ap_sig_allocacmp_i_1[32'd12];

assign trunc_ln6_fu_226_p1 = ap_sig_allocacmp_i_1[11:0];

assign zext_ln6_1_fu_262_p1 = i_1_reg_369;

assign zext_ln6_2_fu_265_p1 = i_1_reg_369;

assign zext_ln6_fu_221_p1 = ap_sig_allocacmp_i_1;

assign zext_ln7_fu_243_p1 = or_ln6_fu_237_p2;

assign zext_ln8_fu_230_p1 = trunc_ln6_fu_226_p1;

always @ (posedge ap_clk) begin
    zext_ln6_reg_378[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln7_reg_403[0] <= 1'b1;
    zext_ln7_reg_403[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //lab5_z1

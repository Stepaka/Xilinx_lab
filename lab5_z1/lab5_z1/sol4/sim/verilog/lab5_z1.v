// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab5_z1_lab5_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.454800,HLS_SYN_LAT=385,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=1827,HLS_VERSION=2021_2}" *)

module lab5_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_address0,
        d_in_ce0,
        d_in_q0,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] d_in_address0;
output   d_in_ce0;
input  [63:0] d_in_q0;
output  [6:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [15:0] d_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_in_ce0;
reg d_out_ce0;
reg d_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln6_fu_114_p1;
reg   [63:0] zext_ln6_reg_552;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_119_p2;
reg   [4:0] trunc_ln8_2_reg_565;
reg   [0:0] tmp_2_reg_571;
wire   [15:0] add_ln11_2_fu_539_p2;
reg   [15:0] add_ln11_2_reg_576;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [7:0] i_fu_76;
wire   [7:0] add_ln6_fu_125_p2;
wire   [4:0] xor_ln8_fu_158_p2;
wire   [0:0] tmp_fu_163_p3;
wire  signed [4:0] and_ln8_fu_171_p3;
wire  signed [4:0] or_ln8_fu_179_p2;
wire   [6:0] zext_ln8_fu_191_p1;
wire   [6:0] zext_ln8_1_fu_195_p1;
wire   [0:0] icmp_ln8_fu_185_p2;
wire   [6:0] sub_ln8_fu_209_p2;
wire   [6:0] sub_ln8_1_fu_221_p2;
reg   [63:0] tmp_1_fu_199_p4;
wire   [6:0] xor_ln8_1_fu_215_p2;
wire   [6:0] select_ln8_fu_227_p3;
wire   [6:0] select_ln8_2_fu_243_p3;
wire   [6:0] sub_ln8_2_fu_251_p2;
wire   [63:0] select_ln8_1_fu_235_p3;
wire   [63:0] zext_ln8_2_fu_257_p1;
wire   [63:0] zext_ln8_3_fu_261_p1;
wire   [63:0] lshr_ln8_fu_265_p2;
wire   [63:0] lshr_ln8_1_fu_271_p2;
wire   [63:0] and_ln8_1_fu_277_p2;
wire   [5:0] and_ln9_1_fu_287_p4;
wire   [4:0] or_ln9_2_fu_302_p2;
wire   [5:0] or_ln9_1_fu_296_p2;
wire   [5:0] or_ln9_fu_307_p3;
wire   [6:0] zext_ln9_fu_321_p1;
wire   [6:0] zext_ln9_1_fu_325_p1;
wire   [0:0] icmp_ln9_fu_315_p2;
wire   [6:0] sub_ln9_fu_339_p2;
wire   [6:0] sub_ln9_1_fu_351_p2;
reg   [63:0] tmp_3_fu_329_p4;
wire   [6:0] xor_ln9_fu_345_p2;
wire   [6:0] select_ln9_fu_357_p3;
wire   [6:0] select_ln9_2_fu_373_p3;
wire   [6:0] sub_ln9_2_fu_381_p2;
wire   [63:0] select_ln9_1_fu_365_p3;
wire   [63:0] zext_ln9_2_fu_387_p1;
wire   [63:0] zext_ln9_3_fu_391_p1;
wire   [63:0] lshr_ln9_fu_395_p2;
wire   [63:0] lshr_ln9_1_fu_401_p2;
wire   [63:0] and_ln9_fu_407_p2;
wire  signed [5:0] sext_ln10_fu_417_p1;
wire  signed [5:0] sext_ln10_1_fu_421_p1;
wire   [6:0] zext_ln10_fu_431_p1;
wire   [6:0] zext_ln10_1_fu_435_p1;
wire   [0:0] icmp_ln10_fu_425_p2;
wire   [6:0] sub_ln10_fu_449_p2;
wire   [6:0] sub_ln10_1_fu_461_p2;
reg   [63:0] tmp_4_fu_439_p4;
wire   [6:0] xor_ln10_fu_455_p2;
wire   [6:0] select_ln10_fu_467_p3;
wire   [6:0] select_ln10_2_fu_483_p3;
wire   [6:0] sub_ln10_2_fu_491_p2;
wire   [63:0] select_ln10_1_fu_475_p3;
wire   [63:0] zext_ln10_2_fu_497_p1;
wire   [63:0] zext_ln10_3_fu_501_p1;
wire   [63:0] lshr_ln10_fu_505_p2;
wire   [63:0] lshr_ln10_1_fu_511_p2;
wire   [63:0] and_ln10_fu_517_p2;
wire   [15:0] trunc_ln8_fu_283_p1;
wire   [15:0] trunc_ln7_fu_154_p1;
wire   [15:0] trunc_ln9_fu_413_p1;
wire   [15:0] trunc_ln10_fu_523_p1;
wire   [15:0] add_ln11_1_fu_533_p2;
wire   [15:0] add_ln11_fu_527_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_76 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_119_p2 == 1'd0))) begin
        i_fu_76 <= add_ln6_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln11_2_reg_576 <= add_ln11_2_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_119_p2 == 1'd0))) begin
        tmp_2_reg_571 <= i_fu_76[32'd7];
        trunc_ln8_2_reg_565 <= {{i_fu_76[7:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln6_reg_552[7 : 0] <= zext_ln6_fu_114_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_119_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_119_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_ce0 = 1'b1;
    end else begin
        d_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_119_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_533_p2 = (trunc_ln9_fu_413_p1 + trunc_ln10_fu_523_p1);

assign add_ln11_2_fu_539_p2 = (add_ln11_1_fu_533_p2 + add_ln11_fu_527_p2);

assign add_ln11_fu_527_p2 = (trunc_ln8_fu_283_p1 + trunc_ln7_fu_154_p1);

assign add_ln6_fu_125_p2 = (i_fu_76 + 8'd1);

assign and_ln10_fu_517_p2 = (lshr_ln10_fu_505_p2 & lshr_ln10_1_fu_511_p2);

assign and_ln8_1_fu_277_p2 = (lshr_ln8_fu_265_p2 & lshr_ln8_1_fu_271_p2);

assign and_ln8_fu_171_p3 = {{tmp_fu_163_p3}, {4'd0}};

assign and_ln9_1_fu_287_p4 = {{{{1'd0}, {tmp_2_reg_571}}}, {4'd0}};

assign and_ln9_fu_407_p2 = (lshr_ln9_fu_395_p2 & lshr_ln9_1_fu_401_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign d_in_address0 = zext_ln6_fu_114_p1;

assign d_out_address0 = zext_ln6_reg_552;

assign d_out_d0 = add_ln11_2_reg_576;

assign icmp_ln10_fu_425_p2 = ((and_ln8_fu_171_p3 > or_ln8_fu_179_p2) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_119_p2 = ((i_fu_76 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_185_p2 = ((and_ln8_fu_171_p3 > or_ln8_fu_179_p2) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_315_p2 = ((or_ln9_1_fu_296_p2 > or_ln9_fu_307_p3) ? 1'b1 : 1'b0);

assign lshr_ln10_1_fu_511_p2 = 64'd18446744073709551615 >> zext_ln10_3_fu_501_p1;

assign lshr_ln10_fu_505_p2 = select_ln10_1_fu_475_p3 >> zext_ln10_2_fu_497_p1;

assign lshr_ln8_1_fu_271_p2 = 64'd18446744073709551615 >> zext_ln8_3_fu_261_p1;

assign lshr_ln8_fu_265_p2 = select_ln8_1_fu_235_p3 >> zext_ln8_2_fu_257_p1;

assign lshr_ln9_1_fu_401_p2 = 64'd18446744073709551615 >> zext_ln9_3_fu_391_p1;

assign lshr_ln9_fu_395_p2 = select_ln9_1_fu_365_p3 >> zext_ln9_2_fu_387_p1;

assign or_ln8_fu_179_p2 = (xor_ln8_fu_158_p2 | 5'd15);

assign or_ln9_1_fu_296_p2 = (6'd32 | and_ln9_1_fu_287_p4);

assign or_ln9_2_fu_302_p2 = (trunc_ln8_2_reg_565 | 5'd15);

assign or_ln9_fu_307_p3 = {{1'd1}, {or_ln9_2_fu_302_p2}};

assign select_ln10_1_fu_475_p3 = ((icmp_ln10_fu_425_p2[0:0] == 1'b1) ? tmp_4_fu_439_p4 : d_in_q0);

assign select_ln10_2_fu_483_p3 = ((icmp_ln10_fu_425_p2[0:0] == 1'b1) ? xor_ln10_fu_455_p2 : zext_ln10_fu_431_p1);

assign select_ln10_fu_467_p3 = ((icmp_ln10_fu_425_p2[0:0] == 1'b1) ? sub_ln10_fu_449_p2 : sub_ln10_1_fu_461_p2);

assign select_ln8_1_fu_235_p3 = ((icmp_ln8_fu_185_p2[0:0] == 1'b1) ? tmp_1_fu_199_p4 : d_in_q0);

assign select_ln8_2_fu_243_p3 = ((icmp_ln8_fu_185_p2[0:0] == 1'b1) ? xor_ln8_1_fu_215_p2 : zext_ln8_fu_191_p1);

assign select_ln8_fu_227_p3 = ((icmp_ln8_fu_185_p2[0:0] == 1'b1) ? sub_ln8_fu_209_p2 : sub_ln8_1_fu_221_p2);

assign select_ln9_1_fu_365_p3 = ((icmp_ln9_fu_315_p2[0:0] == 1'b1) ? tmp_3_fu_329_p4 : d_in_q0);

assign select_ln9_2_fu_373_p3 = ((icmp_ln9_fu_315_p2[0:0] == 1'b1) ? xor_ln9_fu_345_p2 : zext_ln9_fu_321_p1);

assign select_ln9_fu_357_p3 = ((icmp_ln9_fu_315_p2[0:0] == 1'b1) ? sub_ln9_fu_339_p2 : sub_ln9_1_fu_351_p2);

assign sext_ln10_1_fu_421_p1 = or_ln8_fu_179_p2;

assign sext_ln10_fu_417_p1 = and_ln8_fu_171_p3;

assign sub_ln10_1_fu_461_p2 = (zext_ln10_1_fu_435_p1 - zext_ln10_fu_431_p1);

assign sub_ln10_2_fu_491_p2 = (7'd63 - select_ln10_fu_467_p3);

assign sub_ln10_fu_449_p2 = (zext_ln10_fu_431_p1 - zext_ln10_1_fu_435_p1);

assign sub_ln8_1_fu_221_p2 = (zext_ln8_1_fu_195_p1 - zext_ln8_fu_191_p1);

assign sub_ln8_2_fu_251_p2 = (7'd63 - select_ln8_fu_227_p3);

assign sub_ln8_fu_209_p2 = (zext_ln8_fu_191_p1 - zext_ln8_1_fu_195_p1);

assign sub_ln9_1_fu_351_p2 = (zext_ln9_1_fu_325_p1 - zext_ln9_fu_321_p1);

assign sub_ln9_2_fu_381_p2 = (7'd63 - select_ln9_fu_357_p3);

assign sub_ln9_fu_339_p2 = (zext_ln9_fu_321_p1 - zext_ln9_1_fu_325_p1);

integer ap_tvar_int_0;

always @ (d_in_q0) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_1_fu_199_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_199_p4[ap_tvar_int_0] = d_in_q0[63 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (d_in_q0) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_3_fu_329_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_3_fu_329_p4[ap_tvar_int_1] = d_in_q0[63 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (d_in_q0) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            tmp_4_fu_439_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_4_fu_439_p4[ap_tvar_int_2] = d_in_q0[63 - ap_tvar_int_2];
        end
    end
end

assign tmp_fu_163_p3 = xor_ln8_fu_158_p2[32'd4];

assign trunc_ln10_fu_523_p1 = and_ln10_fu_517_p2[15:0];

assign trunc_ln7_fu_154_p1 = d_in_q0[15:0];

assign trunc_ln8_fu_283_p1 = and_ln8_1_fu_277_p2[15:0];

assign trunc_ln9_fu_413_p1 = and_ln9_fu_407_p2[15:0];

assign xor_ln10_fu_455_p2 = (zext_ln10_fu_431_p1 ^ 7'd63);

assign xor_ln8_1_fu_215_p2 = (zext_ln8_fu_191_p1 ^ 7'd63);

assign xor_ln8_fu_158_p2 = (trunc_ln8_2_reg_565 ^ 5'd16);

assign xor_ln9_fu_345_p2 = (zext_ln9_fu_321_p1 ^ 7'd63);

assign zext_ln10_1_fu_435_p1 = $unsigned(sext_ln10_1_fu_421_p1);

assign zext_ln10_2_fu_497_p1 = select_ln10_2_fu_483_p3;

assign zext_ln10_3_fu_501_p1 = sub_ln10_2_fu_491_p2;

assign zext_ln10_fu_431_p1 = $unsigned(sext_ln10_fu_417_p1);

assign zext_ln6_fu_114_p1 = i_fu_76;

assign zext_ln8_1_fu_195_p1 = $unsigned(or_ln8_fu_179_p2);

assign zext_ln8_2_fu_257_p1 = select_ln8_2_fu_243_p3;

assign zext_ln8_3_fu_261_p1 = sub_ln8_2_fu_251_p2;

assign zext_ln8_fu_191_p1 = $unsigned(and_ln8_fu_171_p3);

assign zext_ln9_1_fu_325_p1 = or_ln9_fu_307_p3;

assign zext_ln9_2_fu_387_p1 = select_ln9_2_fu_373_p3;

assign zext_ln9_3_fu_391_p1 = sub_ln9_2_fu_381_p2;

assign zext_ln9_fu_321_p1 = or_ln9_1_fu_296_p2;

always @ (posedge ap_clk) begin
    zext_ln6_reg_552[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //lab5_z1

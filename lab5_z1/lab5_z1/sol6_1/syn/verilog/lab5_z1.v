// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab5_z1_lab5_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.345000,HLS_SYN_LAT=131,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=82,HLS_SYN_LUT=473,HLS_VERSION=2021_2}" *)

module lab5_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_address0,
        d_in_ce0,
        d_in_q0,
        d_in_address1,
        d_in_ce1,
        d_in_q1,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] d_in_address0;
output   d_in_ce0;
input  [31:0] d_in_q0;
output  [7:0] d_in_address1;
output   d_in_ce1;
input  [31:0] d_in_q1;
output  [6:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [15:0] d_out_d0;

reg ap_idle;
reg d_in_ce0;
reg d_in_ce1;
reg d_out_ce0;
reg d_out_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln6_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] i_1_reg_334;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln6_fu_146_p1;
reg   [63:0] zext_ln6_reg_349;
wire   [15:0] trunc_ln8_fu_150_p1;
reg   [15:0] trunc_ln8_reg_359;
wire   [5:0] sub_ln10_2_fu_261_p2;
reg   [5:0] sub_ln10_2_reg_364;
wire   [31:0] lshr_ln10_fu_271_p2;
reg   [31:0] lshr_ln10_reg_369;
wire   [63:0] zext_ln8_fu_136_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] i_fu_68;
wire   [7:0] add_ln6_fu_124_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire   [7:0] xor_ln8_fu_130_p2;
wire   [3:0] trunc_ln_fu_154_p4;
wire  signed [3:0] xor_ln10_fu_163_p2;
wire   [0:0] tmp_fu_173_p3;
wire  signed [4:0] sext_ln10_fu_169_p1;
wire   [4:0] and_ln_fu_181_p3;
wire   [4:0] or_ln10_fu_189_p2;
wire   [5:0] zext_ln10_fu_201_p1;
wire   [5:0] zext_ln10_1_fu_205_p1;
wire   [0:0] icmp_ln10_fu_195_p2;
wire   [5:0] sub_ln10_fu_219_p2;
wire   [5:0] sub_ln10_1_fu_231_p2;
reg   [31:0] tmp_1_fu_209_p4;
wire   [5:0] xor_ln10_1_fu_225_p2;
wire   [5:0] select_ln10_fu_237_p3;
wire   [5:0] select_ln10_2_fu_253_p3;
wire   [31:0] select_ln10_1_fu_245_p3;
wire   [31:0] zext_ln10_2_fu_267_p1;
wire   [31:0] zext_ln10_3_fu_291_p1;
wire   [31:0] lshr_ln10_1_fu_294_p2;
wire   [31:0] and_ln10_fu_300_p2;
wire   [15:0] trunc_ln7_fu_277_p1;
wire   [15:0] tmp_2_fu_281_p4;
wire   [15:0] trunc_ln10_fu_305_p1;
wire   [15:0] add_ln11_1_fu_314_p2;
wire   [15:0] add_ln11_fu_309_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_110;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lab5_z1_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_110)) begin
        if ((icmp_ln6_fu_118_p2 == 1'd0)) begin
            i_fu_68 <= add_ln6_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_1_reg_334 <= ap_sig_allocacmp_i_1;
        lshr_ln10_reg_369 <= lshr_ln10_fu_271_p2;
        sub_ln10_2_reg_364[5 : 1] <= sub_ln10_2_fu_261_p2[5 : 1];
        trunc_ln8_reg_359 <= trunc_ln8_fu_150_p1;
        zext_ln6_reg_349[7 : 0] <= zext_ln6_fu_146_p1[7 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln6_fu_118_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_in_ce0 = 1'b1;
    end else begin
        d_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        d_in_ce1 = 1'b1;
    end else begin
        d_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_314_p2 = (tmp_2_fu_281_p4 + trunc_ln10_fu_305_p1);

assign add_ln11_fu_309_p2 = (trunc_ln8_reg_359 + trunc_ln7_fu_277_p1);

assign add_ln6_fu_124_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign and_ln10_fu_300_p2 = (lshr_ln10_reg_369 & lshr_ln10_1_fu_294_p2);

assign and_ln_fu_181_p3 = {{tmp_fu_173_p3}, {4'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_110 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign d_in_address0 = zext_ln6_fu_146_p1;

assign d_in_address1 = zext_ln8_fu_136_p1;

assign d_out_address0 = zext_ln6_reg_349;

assign d_out_d0 = (add_ln11_1_fu_314_p2 + add_ln11_fu_309_p2);

assign icmp_ln10_fu_195_p2 = ((and_ln_fu_181_p3 > or_ln10_fu_189_p2) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_118_p2 = ((ap_sig_allocacmp_i_1 == 8'd128) ? 1'b1 : 1'b0);

assign lshr_ln10_1_fu_294_p2 = 32'd4294967295 >> zext_ln10_3_fu_291_p1;

assign lshr_ln10_fu_271_p2 = select_ln10_1_fu_245_p3 >> zext_ln10_2_fu_267_p1;

assign or_ln10_fu_189_p2 = (sext_ln10_fu_169_p1 | 5'd15);

assign select_ln10_1_fu_245_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? tmp_1_fu_209_p4 : d_in_q1);

assign select_ln10_2_fu_253_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? xor_ln10_1_fu_225_p2 : zext_ln10_fu_201_p1);

assign select_ln10_fu_237_p3 = ((icmp_ln10_fu_195_p2[0:0] == 1'b1) ? sub_ln10_fu_219_p2 : sub_ln10_1_fu_231_p2);

assign sext_ln10_fu_169_p1 = xor_ln10_fu_163_p2;

assign sub_ln10_1_fu_231_p2 = (zext_ln10_1_fu_205_p1 - zext_ln10_fu_201_p1);

assign sub_ln10_2_fu_261_p2 = (6'd31 - select_ln10_fu_237_p3);

assign sub_ln10_fu_219_p2 = (zext_ln10_fu_201_p1 - zext_ln10_1_fu_205_p1);

integer ap_tvar_int_0;

always @ (d_in_q1) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_1_fu_209_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_209_p4[ap_tvar_int_0] = d_in_q1[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_281_p4 = {{d_in_q0[31:16]}};

assign tmp_fu_173_p3 = xor_ln10_fu_163_p2[32'd3];

assign trunc_ln10_fu_305_p1 = and_ln10_fu_300_p2[15:0];

assign trunc_ln7_fu_277_p1 = d_in_q0[15:0];

assign trunc_ln8_fu_150_p1 = d_in_q1[15:0];

assign trunc_ln_fu_154_p4 = {{i_1_reg_334[7:4]}};

assign xor_ln10_1_fu_225_p2 = (zext_ln10_fu_201_p1 ^ 6'd31);

assign xor_ln10_fu_163_p2 = (trunc_ln_fu_154_p4 ^ 4'd8);

assign xor_ln8_fu_130_p2 = (ap_sig_allocacmp_i_1 ^ 8'd128);

assign zext_ln10_1_fu_205_p1 = or_ln10_fu_189_p2;

assign zext_ln10_2_fu_267_p1 = select_ln10_2_fu_253_p3;

assign zext_ln10_3_fu_291_p1 = sub_ln10_2_reg_364;

assign zext_ln10_fu_201_p1 = and_ln_fu_181_p3;

assign zext_ln6_fu_146_p1 = i_1_reg_334;

assign zext_ln8_fu_136_p1 = xor_ln8_fu_130_p2;

always @ (posedge ap_clk) begin
    zext_ln6_reg_349[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    sub_ln10_2_reg_364[0] <= 1'b0;
end

endmodule //lab5_z1

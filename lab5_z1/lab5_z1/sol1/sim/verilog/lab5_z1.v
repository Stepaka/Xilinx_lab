// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab5_z1_lab5_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.697000,HLS_SYN_LAT=641,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=149,HLS_VERSION=2021_2}" *)

module lab5_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_address0,
        d_in_ce0,
        d_in_q0,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] d_in_address0;
output   d_in_ce0;
input  [15:0] d_in_q0;
output  [6:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [15:0] d_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] d_in_address0;
reg d_in_ce0;
reg d_out_ce0;
reg d_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] i_1_reg_187;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln6_fu_112_p1;
reg   [63:0] zext_ln6_reg_193;
wire   [0:0] icmp_ln6_fu_117_p2;
reg   [15:0] d_in_load_reg_206;
wire    ap_CS_fsm_state3;
wire  signed [7:0] xor_ln8_fu_134_p2;
reg  signed [7:0] xor_ln8_reg_211;
reg   [15:0] d_in_load_1_reg_221;
wire    ap_CS_fsm_state4;
reg   [15:0] d_in_load_2_reg_231;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln8_fu_139_p1;
wire   [63:0] zext_ln9_fu_151_p1;
wire   [63:0] zext_ln10_fu_159_p1;
wire    ap_CS_fsm_state6;
reg   [7:0] i_fu_50;
wire   [7:0] add_ln6_fu_123_p2;
wire   [8:0] or_ln9_fu_144_p3;
wire  signed [8:0] sext_ln10_fu_156_p1;
wire   [15:0] add_ln11_1_fu_168_p2;
wire   [15:0] add_ln11_fu_164_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_50 <= 8'd0;
    end else if (((icmp_ln6_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_50 <= add_ln6_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_in_load_1_reg_221 <= d_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_in_load_2_reg_231 <= d_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_in_load_reg_206 <= d_in_q0;
        xor_ln8_reg_211 <= xor_ln8_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_187 <= i_fu_50;
        zext_ln6_reg_193[7 : 0] <= zext_ln6_fu_112_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln6_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_in_address0 = zext_ln10_fu_159_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_in_address0 = zext_ln9_fu_151_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_in_address0 = zext_ln8_fu_139_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_address0 = zext_ln6_fu_112_p1;
    end else begin
        d_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        d_in_ce0 = 1'b1;
    end else begin
        d_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_168_p2 = (d_in_load_2_reg_231 + d_in_q0);

assign add_ln11_fu_164_p2 = (d_in_load_1_reg_221 + d_in_load_reg_206);

assign add_ln6_fu_123_p2 = (i_fu_50 + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign d_out_address0 = zext_ln6_reg_193;

assign d_out_d0 = (add_ln11_1_fu_168_p2 + add_ln11_fu_164_p2);

assign icmp_ln6_fu_117_p2 = ((i_fu_50 == 8'd128) ? 1'b1 : 1'b0);

assign or_ln9_fu_144_p3 = {{1'd1}, {i_1_reg_187}};

assign sext_ln10_fu_156_p1 = xor_ln8_reg_211;

assign xor_ln8_fu_134_p2 = (i_1_reg_187 ^ 8'd128);

assign zext_ln10_fu_159_p1 = $unsigned(sext_ln10_fu_156_p1);

assign zext_ln6_fu_112_p1 = i_fu_50;

assign zext_ln8_fu_139_p1 = $unsigned(xor_ln8_fu_134_p2);

assign zext_ln9_fu_151_p1 = or_ln9_fu_144_p3;

always @ (posedge ap_clk) begin
    zext_ln6_reg_193[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //lab5_z1

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab5_z1_lab5_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.176000,HLS_SYN_LAT=385,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=40,HLS_SYN_LUT=463,HLS_VERSION=2021_2}" *)

module lab5_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_address0,
        d_in_ce0,
        d_in_q0,
        d_in_address1,
        d_in_ce1,
        d_in_q1,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] d_in_address0;
output   d_in_ce0;
input  [31:0] d_in_q0;
output  [7:0] d_in_address1;
output   d_in_ce1;
input  [31:0] d_in_q1;
output  [6:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [15:0] d_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_in_ce0;
reg d_in_ce1;
reg d_out_ce0;
reg d_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln6_fu_116_p1;
reg   [63:0] zext_ln6_reg_335;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_121_p2;
reg   [3:0] trunc_ln_reg_353;
wire   [15:0] add_ln11_2_fu_322_p2;
reg   [15:0] add_ln11_2_reg_358;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln8_fu_139_p1;
wire    ap_CS_fsm_state4;
reg   [7:0] i_fu_66;
wire   [7:0] add_ln6_fu_127_p2;
wire   [7:0] xor_ln8_fu_133_p2;
wire  signed [3:0] xor_ln10_fu_177_p2;
wire   [0:0] tmp_fu_186_p3;
wire  signed [4:0] sext_ln10_fu_182_p1;
wire   [4:0] and_ln_fu_194_p3;
wire   [4:0] or_ln10_fu_202_p2;
wire   [5:0] zext_ln10_fu_214_p1;
wire   [5:0] zext_ln10_1_fu_218_p1;
wire   [0:0] icmp_ln10_fu_208_p2;
wire   [5:0] sub_ln10_fu_232_p2;
wire   [5:0] sub_ln10_1_fu_244_p2;
reg   [31:0] tmp_1_fu_222_p4;
wire   [5:0] xor_ln10_1_fu_238_p2;
wire   [5:0] select_ln10_fu_250_p3;
wire   [5:0] select_ln10_2_fu_266_p3;
wire   [5:0] sub_ln10_2_fu_274_p2;
wire   [31:0] select_ln10_1_fu_258_p3;
wire   [31:0] zext_ln10_2_fu_280_p1;
wire   [31:0] zext_ln10_3_fu_284_p1;
wire   [31:0] lshr_ln10_fu_288_p2;
wire   [31:0] lshr_ln10_1_fu_294_p2;
wire   [31:0] and_ln10_fu_300_p2;
wire   [15:0] trunc_ln8_fu_163_p1;
wire   [15:0] trunc_ln7_fu_159_p1;
wire   [15:0] tmp_2_fu_167_p4;
wire   [15:0] trunc_ln10_fu_306_p1;
wire   [15:0] add_ln11_1_fu_316_p2;
wire   [15:0] add_ln11_fu_310_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_66 <= 8'd0;
    end else if (((icmp_ln6_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_66 <= add_ln6_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln11_2_reg_358 <= add_ln11_2_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln_reg_353 <= {{i_fu_66[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln6_reg_335[7 : 0] <= zext_ln6_fu_116_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln6_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_ce0 = 1'b1;
    end else begin
        d_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_ce1 = 1'b1;
    end else begin
        d_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_316_p2 = (tmp_2_fu_167_p4 + trunc_ln10_fu_306_p1);

assign add_ln11_2_fu_322_p2 = (add_ln11_1_fu_316_p2 + add_ln11_fu_310_p2);

assign add_ln11_fu_310_p2 = (trunc_ln8_fu_163_p1 + trunc_ln7_fu_159_p1);

assign add_ln6_fu_127_p2 = (i_fu_66 + 8'd1);

assign and_ln10_fu_300_p2 = (lshr_ln10_fu_288_p2 & lshr_ln10_1_fu_294_p2);

assign and_ln_fu_194_p3 = {{tmp_fu_186_p3}, {4'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign d_in_address0 = zext_ln8_fu_139_p1;

assign d_in_address1 = zext_ln6_fu_116_p1;

assign d_out_address0 = zext_ln6_reg_335;

assign d_out_d0 = add_ln11_2_reg_358;

assign icmp_ln10_fu_208_p2 = ((and_ln_fu_194_p3 > or_ln10_fu_202_p2) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_121_p2 = ((i_fu_66 == 8'd128) ? 1'b1 : 1'b0);

assign lshr_ln10_1_fu_294_p2 = 32'd4294967295 >> zext_ln10_3_fu_284_p1;

assign lshr_ln10_fu_288_p2 = select_ln10_1_fu_258_p3 >> zext_ln10_2_fu_280_p1;

assign or_ln10_fu_202_p2 = (sext_ln10_fu_182_p1 | 5'd15);

assign select_ln10_1_fu_258_p3 = ((icmp_ln10_fu_208_p2[0:0] == 1'b1) ? tmp_1_fu_222_p4 : d_in_q0);

assign select_ln10_2_fu_266_p3 = ((icmp_ln10_fu_208_p2[0:0] == 1'b1) ? xor_ln10_1_fu_238_p2 : zext_ln10_fu_214_p1);

assign select_ln10_fu_250_p3 = ((icmp_ln10_fu_208_p2[0:0] == 1'b1) ? sub_ln10_fu_232_p2 : sub_ln10_1_fu_244_p2);

assign sext_ln10_fu_182_p1 = xor_ln10_fu_177_p2;

assign sub_ln10_1_fu_244_p2 = (zext_ln10_1_fu_218_p1 - zext_ln10_fu_214_p1);

assign sub_ln10_2_fu_274_p2 = (6'd31 - select_ln10_fu_250_p3);

assign sub_ln10_fu_232_p2 = (zext_ln10_fu_214_p1 - zext_ln10_1_fu_218_p1);

integer ap_tvar_int_0;

always @ (d_in_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_1_fu_222_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_222_p4[ap_tvar_int_0] = d_in_q0[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_167_p4 = {{d_in_q1[31:16]}};

assign tmp_fu_186_p3 = xor_ln10_fu_177_p2[32'd3];

assign trunc_ln10_fu_306_p1 = and_ln10_fu_300_p2[15:0];

assign trunc_ln7_fu_159_p1 = d_in_q1[15:0];

assign trunc_ln8_fu_163_p1 = d_in_q0[15:0];

assign xor_ln10_1_fu_238_p2 = (zext_ln10_fu_214_p1 ^ 6'd31);

assign xor_ln10_fu_177_p2 = (trunc_ln_reg_353 ^ 4'd8);

assign xor_ln8_fu_133_p2 = (i_fu_66 ^ 8'd128);

assign zext_ln10_1_fu_218_p1 = or_ln10_fu_202_p2;

assign zext_ln10_2_fu_280_p1 = select_ln10_2_fu_266_p3;

assign zext_ln10_3_fu_284_p1 = sub_ln10_2_fu_274_p2;

assign zext_ln10_fu_214_p1 = and_ln_fu_194_p3;

assign zext_ln6_fu_116_p1 = i_fu_66;

assign zext_ln8_fu_139_p1 = xor_ln8_fu_133_p2;

always @ (posedge ap_clk) begin
    zext_ln6_reg_335[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //lab5_z1

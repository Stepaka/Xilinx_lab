// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab4_z1_lab4_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=77,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=150,HLS_SYN_LUT=160,HLS_VERSION=2021_2}" *)

module lab4_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_a_address0,
        in_a_ce0,
        in_a_q0,
        in_b_address0,
        in_b_ce0,
        in_b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] in_a_address0;
output   in_a_ce0;
input  [31:0] in_a_q0;
output  [1:0] in_b_address0;
output   in_b_ce0;
input  [31:0] in_b_q0;
output  [1:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_a_ce0;
reg in_b_ce0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln6_fu_117_p1;
reg   [63:0] zext_ln6_reg_171;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln6_fu_128_p2;
reg   [2:0] add_ln6_reg_179;
wire   [0:0] icmp_ln6_fu_122_p2;
reg  signed [31:0] temp_a_reg_189;
wire    ap_CS_fsm_state3;
wire   [2:0] add_ln9_fu_145_p2;
reg   [2:0] add_ln9_reg_197;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln9_fu_139_p2;
reg  signed [31:0] in_b_load_reg_207;
wire    ap_CS_fsm_state5;
wire   [31:0] mul_ln10_fu_155_p2;
reg   [31:0] mul_ln10_reg_212;
wire    ap_CS_fsm_state6;
wire   [31:0] product_1_fu_159_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] i_reg_85;
reg   [31:0] product_reg_96;
wire   [63:0] zext_ln9_fu_134_p1;
reg   [2:0] j_fu_42;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

lab4_z1_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(in_b_load_reg_207),
    .din1(temp_a_reg_189),
    .dout(mul_ln10_fu_155_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_85 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_85 <= add_ln9_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_42 <= 3'd0;
    end else if (((icmp_ln9_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_fu_42 <= add_ln6_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        product_reg_96 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        product_reg_96 <= product_1_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln6_reg_179 <= add_ln6_fu_128_p2;
        zext_ln6_reg_171[2 : 0] <= zext_ln6_fu_117_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln9_reg_197 <= add_ln9_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_b_load_reg_207 <= in_b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln10_reg_212 <= mul_ln10_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_a_reg_189 <= in_a_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln6_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_a_ce0 = 1'b1;
    end else begin
        in_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_b_ce0 = 1'b1;
    end else begin
        in_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln9_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln6_fu_128_p2 = (j_fu_42 + 3'd1);

assign add_ln9_fu_145_p2 = (i_reg_85 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign icmp_ln6_fu_122_p2 = ((j_fu_42 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_139_p2 = ((i_reg_85 == 3'd4) ? 1'b1 : 1'b0);

assign in_a_address0 = zext_ln6_fu_117_p1;

assign in_b_address0 = zext_ln9_fu_134_p1;

assign product_1_fu_159_p2 = (mul_ln10_reg_212 + product_reg_96);

assign res_address0 = zext_ln6_reg_171;

assign res_d0 = product_reg_96;

assign zext_ln6_fu_117_p1 = j_fu_42;

assign zext_ln9_fu_134_p1 = i_reg_85;

always @ (posedge ap_clk) begin
    zext_ln6_reg_171[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab4_z1

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab4_z1_lab4_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=268435460,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=402,HLS_SYN_LUT=442,HLS_VERSION=2021_2}" *)

module lab4_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_a_address0,
        in_a_ce0,
        in_a_q0,
        in_b_address0,
        in_b_ce0,
        in_b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] in_a_address0;
output   in_a_ce0;
input  [31:0] in_a_q0;
output  [13:0] in_b_address0;
output   in_b_ce0;
input  [31:0] in_b_q0;
output  [13:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_idle;
reg in_a_ce0;
reg in_b_ce0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln6_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln9_fu_146_p2;
reg   [0:0] icmp_ln9_reg_284;
reg   [0:0] icmp_ln9_reg_284_pp0_iter1_reg;
reg   [0:0] icmp_ln9_reg_284_pp0_iter2_reg;
wire   [63:0] zext_ln6_fu_182_p1;
reg   [63:0] zext_ln6_reg_289;
reg   [63:0] zext_ln6_reg_289_pp0_iter1_reg;
reg   [63:0] zext_ln6_reg_289_pp0_iter2_reg;
wire   [0:0] icmp_ln9_1_fu_206_p2;
reg   [0:0] icmp_ln9_1_reg_304;
reg   [0:0] icmp_ln9_1_reg_304_pp0_iter1_reg;
reg   [0:0] icmp_ln9_1_reg_304_pp0_iter2_reg;
reg  signed [31:0] in_a_load_reg_308;
reg  signed [31:0] in_b_load_reg_313;
wire   [31:0] mul_ln10_fu_227_p2;
reg   [31:0] mul_ln10_reg_318;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln9_fu_195_p1;
reg   [31:0] product_fu_50;
wire   [31:0] product_1_fu_241_p2;
wire    ap_loop_init;
reg   [14:0] i_fu_54;
wire   [14:0] add_ln9_fu_200_p2;
reg   [14:0] ap_sig_allocacmp_i_load;
reg   [14:0] j_fu_58;
wire   [14:0] select_ln6_4_fu_187_p3;
reg   [14:0] ap_sig_allocacmp_j_load;
reg   [28:0] indvar_flatten_fu_62;
wire   [28:0] add_ln6_fu_134_p2;
reg   [28:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [14:0] add_ln6_1_fu_160_p2;
wire   [13:0] trunc_ln6_fu_166_p1;
wire   [13:0] trunc_ln6_1_fu_170_p1;
wire   [13:0] select_ln6_3_fu_174_p3;
wire   [14:0] select_ln6_fu_152_p3;
wire   [31:0] select_ln6_1_fu_234_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_131;
reg    ap_condition_130;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lab4_z1_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(in_b_load_reg_313),
    .din1(in_a_load_reg_308),
    .dout(mul_ln10_fu_227_p2)
);

lab4_z1_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((icmp_ln6_fu_128_p2 == 1'd0)) begin
            i_fu_54 <= add_ln9_fu_200_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((icmp_ln6_fu_128_p2 == 1'd0)) begin
            indvar_flatten_fu_62 <= add_ln6_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 29'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_131)) begin
        if ((icmp_ln6_fu_128_p2 == 1'd0)) begin
            j_fu_58 <= select_ln6_4_fu_187_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_130)) begin
            product_fu_50 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            product_fu_50 <= product_1_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln9_1_reg_304_pp0_iter1_reg <= icmp_ln9_1_reg_304;
        icmp_ln9_reg_284_pp0_iter1_reg <= icmp_ln9_reg_284;
        in_a_load_reg_308 <= in_a_q0;
        in_b_load_reg_313 <= in_b_q0;
        zext_ln6_reg_289_pp0_iter1_reg[13 : 0] <= zext_ln6_reg_289[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln6_fu_128_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln9_1_reg_304 <= icmp_ln9_1_fu_206_p2;
        icmp_ln9_reg_284 <= icmp_ln9_fu_146_p2;
        zext_ln6_reg_289[13 : 0] <= zext_ln6_fu_182_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln9_1_reg_304_pp0_iter2_reg <= icmp_ln9_1_reg_304_pp0_iter1_reg;
        icmp_ln9_reg_284_pp0_iter2_reg <= icmp_ln9_reg_284_pp0_iter1_reg;
        mul_ln10_reg_318 <= mul_ln10_fu_227_p2;
        zext_ln6_reg_289_pp0_iter2_reg[13 : 0] <= zext_ln6_reg_289_pp0_iter1_reg[13 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln6_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 15'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 29'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 15'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_58;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_a_ce0 = 1'b1;
    end else begin
        in_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_b_ce0 = 1'b1;
    end else begin
        in_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln9_1_reg_304_pp0_iter2_reg == 1'd1))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln6_1_fu_160_p2 = (ap_sig_allocacmp_j_load + 15'd1);

assign add_ln6_fu_134_p2 = (ap_sig_allocacmp_indvar_flatten_load + 29'd1);

assign add_ln9_fu_200_p2 = (select_ln6_fu_152_p3 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_130 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1));
end

always @ (*) begin
    ap_condition_131 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln6_fu_128_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 29'd268435456) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_206_p2 = ((add_ln9_fu_200_p2 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_146_p2 = ((ap_sig_allocacmp_i_load == 15'd16384) ? 1'b1 : 1'b0);

assign in_a_address0 = zext_ln6_fu_182_p1;

assign in_b_address0 = zext_ln9_fu_195_p1;

assign product_1_fu_241_p2 = (mul_ln10_reg_318 + select_ln6_1_fu_234_p3);

assign res_address0 = zext_ln6_reg_289_pp0_iter2_reg;

assign res_d0 = (mul_ln10_reg_318 + select_ln6_1_fu_234_p3);

assign select_ln6_1_fu_234_p3 = ((icmp_ln9_reg_284_pp0_iter2_reg[0:0] == 1'b1) ? 32'd0 : product_fu_50);

assign select_ln6_3_fu_174_p3 = ((icmp_ln9_fu_146_p2[0:0] == 1'b1) ? trunc_ln6_fu_166_p1 : trunc_ln6_1_fu_170_p1);

assign select_ln6_4_fu_187_p3 = ((icmp_ln9_fu_146_p2[0:0] == 1'b1) ? add_ln6_1_fu_160_p2 : ap_sig_allocacmp_j_load);

assign select_ln6_fu_152_p3 = ((icmp_ln9_fu_146_p2[0:0] == 1'b1) ? 15'd0 : ap_sig_allocacmp_i_load);

assign trunc_ln6_1_fu_170_p1 = ap_sig_allocacmp_j_load[13:0];

assign trunc_ln6_fu_166_p1 = add_ln6_1_fu_160_p2[13:0];

assign zext_ln6_fu_182_p1 = select_ln6_3_fu_174_p3;

assign zext_ln9_fu_195_p1 = select_ln6_fu_152_p3;

always @ (posedge ap_clk) begin
    zext_ln6_reg_289[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln6_reg_289_pp0_iter1_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln6_reg_289_pp0_iter2_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //lab4_z1

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab7_z4_lab7_z4,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23,HLS_SYN_LUT=243,HLS_VERSION=2021_2}" *)

module lab7_z4 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_we0,
        a_0_d0,
        a_1_address0,
        a_1_ce0,
        a_1_we0,
        a_1_d0,
        a_2_address0,
        a_2_ce0,
        a_2_we0,
        a_2_d0,
        a_3_address0,
        a_3_ce0,
        a_3_we0,
        a_3_d0,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        b_3_address0,
        b_3_ce0,
        b_3_q0,
        c_0_address0,
        c_0_ce0,
        c_0_q0,
        c_1_address0,
        c_1_ce0,
        c_1_q0,
        c_2_address0,
        c_2_ce0,
        c_2_q0,
        c_3_address0,
        c_3_ce0,
        c_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_0_address0;
output   a_0_ce0;
output   a_0_we0;
output  [255:0] a_0_d0;
output  [4:0] a_1_address0;
output   a_1_ce0;
output   a_1_we0;
output  [255:0] a_1_d0;
output  [4:0] a_2_address0;
output   a_2_ce0;
output   a_2_we0;
output  [255:0] a_2_d0;
output  [4:0] a_3_address0;
output   a_3_ce0;
output   a_3_we0;
output  [255:0] a_3_d0;
output  [4:0] b_0_address0;
output   b_0_ce0;
input  [255:0] b_0_q0;
output  [4:0] b_1_address0;
output   b_1_ce0;
input  [255:0] b_1_q0;
output  [4:0] b_2_address0;
output   b_2_ce0;
input  [255:0] b_2_q0;
output  [4:0] b_3_address0;
output   b_3_ce0;
input  [255:0] b_3_q0;
output  [4:0] c_0_address0;
output   c_0_ce0;
input  [255:0] c_0_q0;
output  [4:0] c_1_address0;
output   c_1_ce0;
input  [255:0] c_1_q0;
output  [4:0] c_2_address0;
output   c_2_ce0;
input  [255:0] c_2_q0;
output  [4:0] c_3_address0;
output   c_3_ce0;
input  [255:0] c_3_q0;

reg ap_idle;
reg a_0_ce0;
reg a_0_we0;
reg a_1_ce0;
reg a_1_we0;
reg a_2_ce0;
reg a_2_we0;
reg a_3_ce0;
reg a_3_we0;
reg b_0_ce0;
reg b_1_ce0;
reg b_2_ce0;
reg b_3_ce0;
reg c_0_ce0;
reg c_1_ce0;
reg c_2_ce0;
reg c_3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_256_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln232_fu_274_p1;
reg   [63:0] zext_ln232_reg_336;
reg   [63:0] zext_ln232_reg_336_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
reg   [7:0] i_fu_88;
wire   [7:0] add_ln8_fu_286_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire   [255:0] grp_fu_297_p2;
wire   [255:0] grp_fu_304_p2;
wire   [255:0] grp_fu_311_p2;
wire   [255:0] grp_fu_318_p2;
wire   [4:0] lshr_ln_fu_264_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_183;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lab7_z4_mul_256s_256s_256_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 256 ),
    .din1_WIDTH( 256 ),
    .dout_WIDTH( 256 ))
mul_256s_256s_256_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_0_q0),
    .din1(b_0_q0),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

lab7_z4_mul_256s_256s_256_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 256 ),
    .din1_WIDTH( 256 ),
    .dout_WIDTH( 256 ))
mul_256s_256s_256_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_1_q0),
    .din1(b_1_q0),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

lab7_z4_mul_256s_256s_256_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 256 ),
    .din1_WIDTH( 256 ),
    .dout_WIDTH( 256 ))
mul_256s_256s_256_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_2_q0),
    .din1(b_2_q0),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

lab7_z4_mul_256s_256s_256_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 256 ),
    .din1_WIDTH( 256 ),
    .dout_WIDTH( 256 ))
mul_256s_256s_256_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_3_q0),
    .din1(b_3_q0),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

lab7_z4_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_183)) begin
        if ((tmp_fu_256_p3 == 1'd0)) begin
            i_fu_88 <= add_ln8_fu_286_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln232_reg_336_pp0_iter1_reg[4 : 0] <= zext_ln232_reg_336[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_256_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln232_reg_336[4 : 0] <= zext_ln232_fu_274_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_0_we0 = 1'b1;
    end else begin
        a_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_1_we0 = 1'b1;
    end else begin
        a_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_2_we0 = 1'b1;
    end else begin
        a_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_3_ce0 = 1'b1;
    end else begin
        a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_3_we0 = 1'b1;
    end else begin
        a_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_256_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_3_ce0 = 1'b1;
    end else begin
        b_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_0_ce0 = 1'b1;
    end else begin
        c_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_1_ce0 = 1'b1;
    end else begin
        c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_2_ce0 = 1'b1;
    end else begin
        c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_3_ce0 = 1'b1;
    end else begin
        c_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = zext_ln232_reg_336_pp0_iter1_reg;

assign a_0_d0 = grp_fu_297_p2;

assign a_1_address0 = zext_ln232_reg_336_pp0_iter1_reg;

assign a_1_d0 = grp_fu_304_p2;

assign a_2_address0 = zext_ln232_reg_336_pp0_iter1_reg;

assign a_2_d0 = grp_fu_311_p2;

assign a_3_address0 = zext_ln232_reg_336_pp0_iter1_reg;

assign a_3_d0 = grp_fu_318_p2;

assign add_ln8_fu_286_p2 = (ap_sig_allocacmp_i_1 + 8'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_183 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_0_address0 = zext_ln232_fu_274_p1;

assign b_1_address0 = zext_ln232_fu_274_p1;

assign b_2_address0 = zext_ln232_fu_274_p1;

assign b_3_address0 = zext_ln232_fu_274_p1;

assign c_0_address0 = zext_ln232_fu_274_p1;

assign c_1_address0 = zext_ln232_fu_274_p1;

assign c_2_address0 = zext_ln232_fu_274_p1;

assign c_3_address0 = zext_ln232_fu_274_p1;

assign lshr_ln_fu_264_p4 = {{ap_sig_allocacmp_i_1[6:2]}};

assign tmp_fu_256_p3 = ap_sig_allocacmp_i_1[32'd7];

assign zext_ln232_fu_274_p1 = lshr_ln_fu_264_p4;

always @ (posedge ap_clk) begin
    zext_ln232_reg_336[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln232_reg_336_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab7_z4

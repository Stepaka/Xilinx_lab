// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_7_kp_502_7,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.000000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9222,HLS_SYN_LUT=8731,HLS_VERSION=2021_2}" *)

module kp_502_7 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_q0,
        X1_address0,
        X1_ce0,
        X1_we0,
        X1_d0,
        X2_address0,
        X2_ce0,
        X2_we0,
        X2_d0,
        D_address0,
        D_ce0,
        D_we0,
        D_d0
);

parameter    ap_ST_fsm_state1 = 57'd1;
parameter    ap_ST_fsm_state2 = 57'd2;
parameter    ap_ST_fsm_state3 = 57'd4;
parameter    ap_ST_fsm_state4 = 57'd8;
parameter    ap_ST_fsm_state5 = 57'd16;
parameter    ap_ST_fsm_state6 = 57'd32;
parameter    ap_ST_fsm_state7 = 57'd64;
parameter    ap_ST_fsm_state8 = 57'd128;
parameter    ap_ST_fsm_state9 = 57'd256;
parameter    ap_ST_fsm_state10 = 57'd512;
parameter    ap_ST_fsm_state11 = 57'd1024;
parameter    ap_ST_fsm_state12 = 57'd2048;
parameter    ap_ST_fsm_state13 = 57'd4096;
parameter    ap_ST_fsm_state14 = 57'd8192;
parameter    ap_ST_fsm_state15 = 57'd16384;
parameter    ap_ST_fsm_state16 = 57'd32768;
parameter    ap_ST_fsm_state17 = 57'd65536;
parameter    ap_ST_fsm_state18 = 57'd131072;
parameter    ap_ST_fsm_state19 = 57'd262144;
parameter    ap_ST_fsm_state20 = 57'd524288;
parameter    ap_ST_fsm_state21 = 57'd1048576;
parameter    ap_ST_fsm_state22 = 57'd2097152;
parameter    ap_ST_fsm_state23 = 57'd4194304;
parameter    ap_ST_fsm_state24 = 57'd8388608;
parameter    ap_ST_fsm_state25 = 57'd16777216;
parameter    ap_ST_fsm_state26 = 57'd33554432;
parameter    ap_ST_fsm_state27 = 57'd67108864;
parameter    ap_ST_fsm_state28 = 57'd134217728;
parameter    ap_ST_fsm_state29 = 57'd268435456;
parameter    ap_ST_fsm_state30 = 57'd536870912;
parameter    ap_ST_fsm_state31 = 57'd1073741824;
parameter    ap_ST_fsm_state32 = 57'd2147483648;
parameter    ap_ST_fsm_state33 = 57'd4294967296;
parameter    ap_ST_fsm_state34 = 57'd8589934592;
parameter    ap_ST_fsm_state35 = 57'd17179869184;
parameter    ap_ST_fsm_state36 = 57'd34359738368;
parameter    ap_ST_fsm_state37 = 57'd68719476736;
parameter    ap_ST_fsm_state38 = 57'd137438953472;
parameter    ap_ST_fsm_state39 = 57'd274877906944;
parameter    ap_ST_fsm_state40 = 57'd549755813888;
parameter    ap_ST_fsm_state41 = 57'd1099511627776;
parameter    ap_ST_fsm_state42 = 57'd2199023255552;
parameter    ap_ST_fsm_state43 = 57'd4398046511104;
parameter    ap_ST_fsm_state44 = 57'd8796093022208;
parameter    ap_ST_fsm_state45 = 57'd17592186044416;
parameter    ap_ST_fsm_state46 = 57'd35184372088832;
parameter    ap_ST_fsm_state47 = 57'd70368744177664;
parameter    ap_ST_fsm_state48 = 57'd140737488355328;
parameter    ap_ST_fsm_state49 = 57'd281474976710656;
parameter    ap_ST_fsm_state50 = 57'd562949953421312;
parameter    ap_ST_fsm_state51 = 57'd1125899906842624;
parameter    ap_ST_fsm_state52 = 57'd2251799813685248;
parameter    ap_ST_fsm_state53 = 57'd4503599627370496;
parameter    ap_ST_fsm_state54 = 57'd9007199254740992;
parameter    ap_ST_fsm_state55 = 57'd18014398509481984;
parameter    ap_ST_fsm_state56 = 57'd36028797018963968;
parameter    ap_ST_fsm_state57 = 57'd72057594037927936;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] A_address0;
output   A_ce0;
input  [127:0] A_q0;
output  [0:0] B_address0;
output   B_ce0;
input  [127:0] B_q0;
output  [0:0] C_address0;
output   C_ce0;
input  [127:0] C_q0;
output  [0:0] X1_address0;
output   X1_ce0;
output   X1_we0;
output  [127:0] X1_d0;
output  [0:0] X2_address0;
output   X2_ce0;
output   X2_we0;
output  [127:0] X2_d0;
output  [0:0] D_address0;
output   D_ce0;
output   D_we0;
output  [127:0] D_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg X1_ce0;
reg X1_we0;
reg X2_ce0;
reg X2_we0;
reg D_ce0;
reg D_we0;

(* fsm_encoding = "none" *) reg   [56:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln9_fu_206_p1;
reg   [63:0] zext_ln9_reg_617;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_190_p3;
wire  signed [31:0] temp_B_fu_224_p1;
reg  signed [31:0] temp_B_reg_639;
wire    ap_CS_fsm_state3;
wire  signed [31:0] temp_A_fu_228_p1;
reg  signed [31:0] temp_A_reg_647;
wire  signed [31:0] trunc_ln13_fu_232_p1;
reg  signed [31:0] trunc_ln13_reg_652;
wire   [30:0] trunc_ln19_fu_236_p1;
reg   [30:0] trunc_ln19_reg_657;
reg  signed [31:0] temp_B_1_reg_662;
reg  signed [31:0] temp_A_1_reg_670;
reg  signed [31:0] tmp_6_reg_675;
reg   [30:0] tmp_15_reg_680;
reg  signed [31:0] temp_B_2_reg_685;
reg  signed [31:0] temp_A_2_reg_693;
reg  signed [31:0] tmp_s_reg_698;
reg   [30:0] tmp_16_reg_703;
reg  signed [31:0] temp_B_3_reg_708;
reg  signed [31:0] temp_A_3_reg_716;
reg  signed [31:0] tmp_1_reg_721;
reg   [30:0] tmp_17_reg_726;
wire   [31:0] grp_fu_360_p2;
reg   [31:0] mul_ln13_reg_731;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_364_p2;
reg   [31:0] mul_ln13_1_reg_736;
wire   [31:0] grp_fu_368_p2;
reg   [31:0] mul_ln13_2_reg_741;
wire   [31:0] grp_fu_372_p2;
reg   [31:0] mul_ln13_3_reg_746;
wire   [31:0] grp_fu_376_p2;
reg   [31:0] mul_ln13_4_reg_751;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] mul_ln13_5_reg_756;
wire   [31:0] grp_fu_384_p2;
reg   [31:0] mul_ln13_6_reg_761;
wire   [31:0] grp_fu_388_p2;
reg   [31:0] mul_ln13_7_reg_766;
wire   [31:0] xf_V_fu_397_p2;
reg   [31:0] xf_V_reg_771;
wire    ap_CS_fsm_state7;
wire   [31:0] xf_V_1_fu_407_p2;
reg   [31:0] xf_V_1_reg_776;
wire   [31:0] xf_V_2_fu_417_p2;
reg   [31:0] xf_V_2_reg_781;
wire   [31:0] xf_V_3_fu_427_p2;
reg   [31:0] xf_V_3_reg_786;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_162_ap_return;
reg   [15:0] p_Val2_s_reg_791;
wire    ap_CS_fsm_state19;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_167_ap_return;
reg   [15:0] p_Val2_33_reg_796;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_172_ap_return;
reg   [15:0] p_Val2_34_reg_801;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_177_ap_return;
reg   [15:0] p_Val2_35_reg_806;
wire   [31:0] add_ln19_fu_448_p2;
reg   [31:0] add_ln19_reg_811;
wire    ap_CS_fsm_state20;
wire   [31:0] sub_ln20_fu_453_p2;
reg   [31:0] sub_ln20_reg_816;
wire   [31:0] add_ln19_1_fu_461_p2;
reg   [31:0] add_ln19_1_reg_821;
wire   [31:0] sub_ln20_1_fu_466_p2;
reg   [31:0] sub_ln20_1_reg_826;
wire   [31:0] add_ln19_2_fu_474_p2;
reg   [31:0] add_ln19_2_reg_831;
wire   [31:0] sub_ln20_2_fu_479_p2;
reg   [31:0] sub_ln20_2_reg_836;
wire   [31:0] add_ln19_3_fu_487_p2;
reg   [31:0] add_ln19_3_reg_841;
wire   [31:0] sub_ln20_3_fu_492_p2;
reg   [31:0] sub_ln20_3_reg_846;
wire   [31:0] shl_ln1_fu_497_p3;
wire    ap_CS_fsm_state21;
wire   [31:0] shl_ln19_1_fu_514_p3;
wire   [31:0] shl_ln19_2_fu_531_p3;
wire   [31:0] shl_ln19_3_fu_548_p3;
wire   [31:0] grp_fu_504_p2;
reg   [31:0] sdiv_ln19_1_reg_875;
wire    ap_CS_fsm_state56;
wire   [31:0] grp_fu_509_p2;
reg   [31:0] sdiv_ln20_reg_880;
wire   [31:0] grp_fu_521_p2;
reg   [31:0] sdiv_ln19_reg_885;
wire   [31:0] grp_fu_526_p2;
reg   [31:0] sdiv_ln20_1_reg_890;
wire   [31:0] grp_fu_538_p2;
reg   [31:0] sdiv_ln19_2_reg_895;
wire   [31:0] grp_fu_543_p2;
reg   [31:0] sdiv_ln20_2_reg_900;
wire   [31:0] grp_fu_555_p2;
reg   [31:0] sdiv_ln19_3_reg_905;
wire   [31:0] grp_fu_560_p2;
reg   [31:0] sdiv_ln20_3_reg_910;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state57;
reg   [3:0] i_fu_80;
wire   [3:0] add_ln8_fu_213_p2;
wire   [0:0] tmp_34_fu_198_p3;
wire    ap_CS_fsm_state4;
wire   [31:0] shl_ln13_fu_392_p2;
wire   [31:0] shl_ln13_1_fu_402_p2;
wire   [31:0] shl_ln13_2_fu_412_p2;
wire   [31:0] shl_ln13_3_fu_422_p2;
wire   [31:0] zext_ln840_fu_445_p1;
wire   [31:0] zext_ln840_1_fu_458_p1;
wire   [31:0] zext_ln840_2_fu_471_p1;
wire   [31:0] zext_ln840_3_fu_484_p1;
wire   [31:0] sub_ln19_3_fu_580_p2;
wire   [31:0] sub_ln19_2_fu_575_p2;
wire   [31:0] sub_ln19_1_fu_570_p2;
wire   [31:0] sub_ln19_fu_565_p2;
reg    grp_fu_504_ap_start;
wire    grp_fu_504_ap_done;
reg    grp_fu_509_ap_start;
wire    grp_fu_509_ap_done;
reg    grp_fu_521_ap_start;
wire    grp_fu_521_ap_done;
reg    grp_fu_526_ap_start;
wire    grp_fu_526_ap_done;
reg    grp_fu_538_ap_start;
wire    grp_fu_538_ap_done;
reg    grp_fu_543_ap_start;
wire    grp_fu_543_ap_done;
reg    grp_fu_555_ap_start;
wire    grp_fu_555_ap_done;
reg    grp_fu_560_ap_start;
wire    grp_fu_560_ap_done;
reg   [56:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 57'd1;
end

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_162(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_reg_771),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_162_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_167(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_1_reg_776),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_167_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_172(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_2_reg_781),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_172_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_177(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_3_reg_786),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_177_ap_return)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_reg_639),
    .din1(temp_B_reg_639),
    .ce(1'b1),
    .dout(grp_fu_360_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_A_reg_647),
    .din1(trunc_ln13_reg_652),
    .ce(1'b1),
    .dout(grp_fu_364_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_1_reg_662),
    .din1(temp_B_1_reg_662),
    .ce(1'b1),
    .dout(grp_fu_368_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_A_1_reg_670),
    .din1(tmp_6_reg_675),
    .ce(1'b1),
    .dout(grp_fu_372_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_2_reg_685),
    .din1(temp_B_2_reg_685),
    .ce(1'b1),
    .dout(grp_fu_376_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_A_2_reg_693),
    .din1(tmp_s_reg_698),
    .ce(1'b1),
    .dout(grp_fu_380_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_B_3_reg_708),
    .din1(temp_B_3_reg_708),
    .ce(1'b1),
    .dout(grp_fu_384_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_A_3_reg_716),
    .din1(tmp_1_reg_721),
    .ce(1'b1),
    .dout(grp_fu_388_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_504_ap_start),
    .done(grp_fu_504_ap_done),
    .din0(add_ln19_reg_811),
    .din1(shl_ln1_fu_497_p3),
    .ce(1'b1),
    .dout(grp_fu_504_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_509_ap_start),
    .done(grp_fu_509_ap_done),
    .din0(sub_ln20_reg_816),
    .din1(shl_ln1_fu_497_p3),
    .ce(1'b1),
    .dout(grp_fu_509_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_521_ap_start),
    .done(grp_fu_521_ap_done),
    .din0(add_ln19_1_reg_821),
    .din1(shl_ln19_1_fu_514_p3),
    .ce(1'b1),
    .dout(grp_fu_521_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_526_ap_start),
    .done(grp_fu_526_ap_done),
    .din0(sub_ln20_1_reg_826),
    .din1(shl_ln19_1_fu_514_p3),
    .ce(1'b1),
    .dout(grp_fu_526_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_538_ap_start),
    .done(grp_fu_538_ap_done),
    .din0(add_ln19_2_reg_831),
    .din1(shl_ln19_2_fu_531_p3),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_543_ap_start),
    .done(grp_fu_543_ap_done),
    .din0(sub_ln20_2_reg_836),
    .din1(shl_ln19_2_fu_531_p3),
    .ce(1'b1),
    .dout(grp_fu_543_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_555_ap_start),
    .done(grp_fu_555_ap_done),
    .din0(add_ln19_3_reg_841),
    .din1(shl_ln19_3_fu_548_p3),
    .ce(1'b1),
    .dout(grp_fu_555_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_560_ap_start),
    .done(grp_fu_560_ap_done),
    .din0(sub_ln20_3_reg_846),
    .din1(shl_ln19_3_fu_548_p3),
    .ce(1'b1),
    .dout(grp_fu_560_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_80 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_190_p3 == 1'd0))) begin
        i_fu_80 <= add_ln8_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln19_1_reg_821 <= add_ln19_1_fu_461_p2;
        add_ln19_2_reg_831 <= add_ln19_2_fu_474_p2;
        add_ln19_3_reg_841 <= add_ln19_3_fu_487_p2;
        add_ln19_reg_811 <= add_ln19_fu_448_p2;
        sub_ln20_1_reg_826 <= sub_ln20_1_fu_466_p2;
        sub_ln20_2_reg_836 <= sub_ln20_2_fu_479_p2;
        sub_ln20_3_reg_846 <= sub_ln20_3_fu_492_p2;
        sub_ln20_reg_816 <= sub_ln20_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln13_1_reg_736 <= grp_fu_364_p2;
        mul_ln13_2_reg_741 <= grp_fu_368_p2;
        mul_ln13_3_reg_746 <= grp_fu_372_p2;
        mul_ln13_4_reg_751 <= grp_fu_376_p2;
        mul_ln13_5_reg_756 <= grp_fu_380_p2;
        mul_ln13_6_reg_761 <= grp_fu_384_p2;
        mul_ln13_7_reg_766 <= grp_fu_388_p2;
        mul_ln13_reg_731 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_33_reg_796 <= grp_sqrt_fixed_32_32_s_fu_167_ap_return;
        p_Val2_34_reg_801 <= grp_sqrt_fixed_32_32_s_fu_172_ap_return;
        p_Val2_35_reg_806 <= grp_sqrt_fixed_32_32_s_fu_177_ap_return;
        p_Val2_s_reg_791 <= grp_sqrt_fixed_32_32_s_fu_162_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        sdiv_ln19_1_reg_875 <= grp_fu_504_p2;
        sdiv_ln19_2_reg_895 <= grp_fu_538_p2;
        sdiv_ln19_3_reg_905 <= grp_fu_555_p2;
        sdiv_ln19_reg_885 <= grp_fu_521_p2;
        sdiv_ln20_1_reg_890 <= grp_fu_526_p2;
        sdiv_ln20_2_reg_900 <= grp_fu_543_p2;
        sdiv_ln20_3_reg_910 <= grp_fu_560_p2;
        sdiv_ln20_reg_880 <= grp_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        temp_A_1_reg_670 <= {{A_q0[63:32]}};
        temp_A_2_reg_693 <= {{A_q0[95:64]}};
        temp_A_3_reg_716 <= {{A_q0[127:96]}};
        temp_A_reg_647 <= temp_A_fu_228_p1;
        temp_B_1_reg_662 <= {{B_q0[63:32]}};
        temp_B_2_reg_685 <= {{B_q0[95:64]}};
        temp_B_3_reg_708 <= {{B_q0[127:96]}};
        temp_B_reg_639 <= temp_B_fu_224_p1;
        tmp_15_reg_680 <= {{A_q0[62:32]}};
        tmp_16_reg_703 <= {{A_q0[94:64]}};
        tmp_17_reg_726 <= {{A_q0[126:96]}};
        tmp_1_reg_721 <= {{C_q0[127:96]}};
        tmp_6_reg_675 <= {{C_q0[63:32]}};
        tmp_s_reg_698 <= {{C_q0[95:64]}};
        trunc_ln13_reg_652 <= trunc_ln13_fu_232_p1;
        trunc_ln19_reg_657 <= trunc_ln19_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xf_V_1_reg_776 <= xf_V_1_fu_407_p2;
        xf_V_2_reg_781 <= xf_V_2_fu_417_p2;
        xf_V_3_reg_786 <= xf_V_3_fu_427_p2;
        xf_V_reg_771 <= xf_V_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_190_p3 == 1'd0))) begin
        zext_ln9_reg_617[0] <= zext_ln9_fu_206_p1[0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        D_we0 = 1'b1;
    end else begin
        D_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        X1_ce0 = 1'b1;
    end else begin
        X1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        X1_we0 = 1'b1;
    end else begin
        X1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        X2_ce0 = 1'b1;
    end else begin
        X2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        X2_we0 = 1'b1;
    end else begin
        X2_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_190_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_190_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_504_ap_start = 1'b1;
    end else begin
        grp_fu_504_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_509_ap_start = 1'b1;
    end else begin
        grp_fu_509_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_521_ap_start = 1'b1;
    end else begin
        grp_fu_521_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_526_ap_start = 1'b1;
    end else begin
        grp_fu_526_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_538_ap_start = 1'b1;
    end else begin
        grp_fu_538_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_543_ap_start = 1'b1;
    end else begin
        grp_fu_543_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_555_ap_start = 1'b1;
    end else begin
        grp_fu_555_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_560_ap_start = 1'b1;
    end else begin
        grp_fu_560_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_190_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln9_fu_206_p1;

assign B_address0 = zext_ln9_fu_206_p1;

assign C_address0 = zext_ln9_fu_206_p1;

assign D_address0 = zext_ln9_reg_617;

assign D_d0 = {{{{xf_V_3_fu_427_p2}, {xf_V_2_fu_417_p2}}, {xf_V_1_fu_407_p2}}, {xf_V_fu_397_p2}};

assign X1_address0 = zext_ln9_reg_617;

assign X1_d0 = {{{{sub_ln19_3_fu_580_p2}, {sub_ln19_2_fu_575_p2}}, {sub_ln19_1_fu_570_p2}}, {sub_ln19_fu_565_p2}};

assign X2_address0 = zext_ln9_reg_617;

assign X2_d0 = {{{{sdiv_ln20_3_reg_910}, {sdiv_ln20_2_reg_900}}, {sdiv_ln20_1_reg_890}}, {sdiv_ln20_reg_880}};

assign add_ln19_1_fu_461_p2 = ($signed(zext_ln840_1_fu_458_p1) + $signed(temp_B_1_reg_662));

assign add_ln19_2_fu_474_p2 = ($signed(zext_ln840_2_fu_471_p1) + $signed(temp_B_2_reg_685));

assign add_ln19_3_fu_487_p2 = ($signed(zext_ln840_3_fu_484_p1) + $signed(temp_B_3_reg_708));

assign add_ln19_fu_448_p2 = ($signed(zext_ln840_fu_445_p1) + $signed(temp_B_reg_639));

assign add_ln8_fu_213_p2 = (i_fu_80 + 4'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign shl_ln13_1_fu_402_p2 = mul_ln13_3_reg_746 << 32'd2;

assign shl_ln13_2_fu_412_p2 = mul_ln13_5_reg_756 << 32'd2;

assign shl_ln13_3_fu_422_p2 = mul_ln13_7_reg_766 << 32'd2;

assign shl_ln13_fu_392_p2 = mul_ln13_1_reg_736 << 32'd2;

assign shl_ln19_1_fu_514_p3 = {{tmp_15_reg_680}, {1'd0}};

assign shl_ln19_2_fu_531_p3 = {{tmp_16_reg_703}, {1'd0}};

assign shl_ln19_3_fu_548_p3 = {{tmp_17_reg_726}, {1'd0}};

assign shl_ln1_fu_497_p3 = {{trunc_ln19_reg_657}, {1'd0}};

assign sub_ln19_1_fu_570_p2 = (32'd0 - sdiv_ln19_reg_885);

assign sub_ln19_2_fu_575_p2 = (32'd0 - sdiv_ln19_2_reg_895);

assign sub_ln19_3_fu_580_p2 = (32'd0 - sdiv_ln19_3_reg_905);

assign sub_ln19_fu_565_p2 = (32'd0 - sdiv_ln19_1_reg_875);

assign sub_ln20_1_fu_466_p2 = ($signed(zext_ln840_1_fu_458_p1) - $signed(temp_B_1_reg_662));

assign sub_ln20_2_fu_479_p2 = ($signed(zext_ln840_2_fu_471_p1) - $signed(temp_B_2_reg_685));

assign sub_ln20_3_fu_492_p2 = ($signed(zext_ln840_3_fu_484_p1) - $signed(temp_B_3_reg_708));

assign sub_ln20_fu_453_p2 = ($signed(zext_ln840_fu_445_p1) - $signed(temp_B_reg_639));

assign temp_A_fu_228_p1 = A_q0[31:0];

assign temp_B_fu_224_p1 = B_q0[31:0];

assign tmp_34_fu_198_p3 = i_fu_80[32'd2];

assign tmp_fu_190_p3 = i_fu_80[32'd3];

assign trunc_ln13_fu_232_p1 = C_q0[31:0];

assign trunc_ln19_fu_236_p1 = A_q0[30:0];

assign xf_V_1_fu_407_p2 = (mul_ln13_2_reg_741 - shl_ln13_1_fu_402_p2);

assign xf_V_2_fu_417_p2 = (mul_ln13_4_reg_751 - shl_ln13_2_fu_412_p2);

assign xf_V_3_fu_427_p2 = (mul_ln13_6_reg_761 - shl_ln13_3_fu_422_p2);

assign xf_V_fu_397_p2 = (mul_ln13_reg_731 - shl_ln13_fu_392_p2);

assign zext_ln840_1_fu_458_p1 = p_Val2_33_reg_796;

assign zext_ln840_2_fu_471_p1 = p_Val2_34_reg_801;

assign zext_ln840_3_fu_484_p1 = p_Val2_35_reg_806;

assign zext_ln840_fu_445_p1 = p_Val2_s_reg_791;

assign zext_ln9_fu_206_p1 = tmp_34_fu_198_p3;

always @ (posedge ap_clk) begin
    zext_ln9_reg_617[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //kp_502_7

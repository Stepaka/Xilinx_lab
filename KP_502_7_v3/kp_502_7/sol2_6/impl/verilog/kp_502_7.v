// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kp_502_7_kp_502_7,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-sbv484-2,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.000000,HLS_SYN_LAT=53,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17102,HLS_SYN_LUT=17157,HLS_VERSION=2021_2}" *)

module kp_502_7 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0,
        A_1,
        A_2,
        A_3,
        A_4,
        A_5,
        A_6,
        A_7,
        B_0,
        B_1,
        B_2,
        B_3,
        B_4,
        B_5,
        B_6,
        B_7,
        C_0,
        C_1,
        C_2,
        C_3,
        C_4,
        C_5,
        C_6,
        C_7,
        X1_0,
        X1_0_ap_vld,
        X1_1,
        X1_1_ap_vld,
        X1_2,
        X1_2_ap_vld,
        X1_3,
        X1_3_ap_vld,
        X1_4,
        X1_4_ap_vld,
        X1_5,
        X1_5_ap_vld,
        X1_6,
        X1_6_ap_vld,
        X1_7,
        X1_7_ap_vld,
        X2_0,
        X2_0_ap_vld,
        X2_1,
        X2_1_ap_vld,
        X2_2,
        X2_2_ap_vld,
        X2_3,
        X2_3_ap_vld,
        X2_4,
        X2_4_ap_vld,
        X2_5,
        X2_5_ap_vld,
        X2_6,
        X2_6_ap_vld,
        X2_7,
        X2_7_ap_vld,
        D_0,
        D_0_ap_vld,
        D_1,
        D_1_ap_vld,
        D_2,
        D_2_ap_vld,
        D_3,
        D_3_ap_vld,
        D_4,
        D_4_ap_vld,
        D_5,
        D_5_ap_vld,
        D_6,
        D_6_ap_vld,
        D_7,
        D_7_ap_vld
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] A_0;
input  [31:0] A_1;
input  [31:0] A_2;
input  [31:0] A_3;
input  [31:0] A_4;
input  [31:0] A_5;
input  [31:0] A_6;
input  [31:0] A_7;
input  [31:0] B_0;
input  [31:0] B_1;
input  [31:0] B_2;
input  [31:0] B_3;
input  [31:0] B_4;
input  [31:0] B_5;
input  [31:0] B_6;
input  [31:0] B_7;
input  [31:0] C_0;
input  [31:0] C_1;
input  [31:0] C_2;
input  [31:0] C_3;
input  [31:0] C_4;
input  [31:0] C_5;
input  [31:0] C_6;
input  [31:0] C_7;
output  [31:0] X1_0;
output   X1_0_ap_vld;
output  [31:0] X1_1;
output   X1_1_ap_vld;
output  [31:0] X1_2;
output   X1_2_ap_vld;
output  [31:0] X1_3;
output   X1_3_ap_vld;
output  [31:0] X1_4;
output   X1_4_ap_vld;
output  [31:0] X1_5;
output   X1_5_ap_vld;
output  [31:0] X1_6;
output   X1_6_ap_vld;
output  [31:0] X1_7;
output   X1_7_ap_vld;
output  [31:0] X2_0;
output   X2_0_ap_vld;
output  [31:0] X2_1;
output   X2_1_ap_vld;
output  [31:0] X2_2;
output   X2_2_ap_vld;
output  [31:0] X2_3;
output   X2_3_ap_vld;
output  [31:0] X2_4;
output   X2_4_ap_vld;
output  [31:0] X2_5;
output   X2_5_ap_vld;
output  [31:0] X2_6;
output   X2_6_ap_vld;
output  [31:0] X2_7;
output   X2_7_ap_vld;
output  [31:0] D_0;
output   D_0_ap_vld;
output  [31:0] D_1;
output   D_1_ap_vld;
output  [31:0] D_2;
output   D_2_ap_vld;
output  [31:0] D_3;
output   D_3_ap_vld;
output  [31:0] D_4;
output   D_4_ap_vld;
output  [31:0] D_5;
output   D_5_ap_vld;
output  [31:0] D_6;
output   D_6_ap_vld;
output  [31:0] D_7;
output   D_7_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X1_0_ap_vld;
reg X1_1_ap_vld;
reg X1_2_ap_vld;
reg X1_3_ap_vld;
reg X1_4_ap_vld;
reg X1_5_ap_vld;
reg X1_6_ap_vld;
reg X1_7_ap_vld;
reg X2_0_ap_vld;
reg X2_1_ap_vld;
reg X2_2_ap_vld;
reg X2_3_ap_vld;
reg X2_4_ap_vld;
reg X2_5_ap_vld;
reg X2_6_ap_vld;
reg X2_7_ap_vld;
reg D_0_ap_vld;
reg D_1_ap_vld;
reg D_2_ap_vld;
reg D_3_ap_vld;
reg D_4_ap_vld;
reg D_5_ap_vld;
reg D_6_ap_vld;
reg D_7_ap_vld;

(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_472_p2;
reg   [31:0] mul_ln13_reg_1088;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_478_p2;
reg   [31:0] mul_ln13_1_reg_1093;
wire   [31:0] grp_fu_484_p2;
reg   [31:0] mul_ln13_2_reg_1098;
wire   [31:0] grp_fu_490_p2;
reg   [31:0] mul_ln13_3_reg_1103;
wire   [31:0] grp_fu_496_p2;
reg   [31:0] mul_ln13_4_reg_1108;
wire   [31:0] grp_fu_502_p2;
reg   [31:0] mul_ln13_5_reg_1113;
wire   [31:0] grp_fu_508_p2;
reg   [31:0] mul_ln13_6_reg_1118;
wire   [31:0] grp_fu_514_p2;
reg   [31:0] mul_ln13_7_reg_1123;
wire   [31:0] grp_fu_520_p2;
reg   [31:0] mul_ln13_8_reg_1128;
wire   [31:0] grp_fu_526_p2;
reg   [31:0] mul_ln13_9_reg_1133;
wire   [31:0] grp_fu_532_p2;
reg   [31:0] mul_ln13_10_reg_1138;
wire   [31:0] grp_fu_538_p2;
reg   [31:0] mul_ln13_11_reg_1143;
wire   [31:0] grp_fu_544_p2;
reg   [31:0] mul_ln13_12_reg_1148;
wire   [31:0] grp_fu_550_p2;
reg   [31:0] mul_ln13_13_reg_1153;
wire   [31:0] grp_fu_556_p2;
reg   [31:0] mul_ln13_14_reg_1158;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] mul_ln13_15_reg_1163;
wire   [31:0] xf_V_fu_573_p2;
reg   [31:0] xf_V_reg_1168;
wire    ap_CS_fsm_state4;
wire   [31:0] xf_V_1_fu_584_p2;
reg   [31:0] xf_V_1_reg_1173;
wire   [31:0] xf_V_2_fu_595_p2;
reg   [31:0] xf_V_2_reg_1178;
wire   [31:0] xf_V_3_fu_606_p2;
reg   [31:0] xf_V_3_reg_1183;
wire   [31:0] xf_V_4_fu_617_p2;
reg   [31:0] xf_V_4_reg_1188;
wire   [31:0] xf_V_5_fu_628_p2;
reg   [31:0] xf_V_5_reg_1193;
wire   [31:0] xf_V_6_fu_639_p2;
reg   [31:0] xf_V_6_reg_1198;
wire   [31:0] xf_V_7_fu_650_p2;
reg   [31:0] xf_V_7_reg_1203;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_432_ap_return;
reg   [15:0] p_Val2_s_reg_1208;
wire    ap_CS_fsm_state16;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_437_ap_return;
reg   [15:0] p_Val2_33_reg_1213;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_442_ap_return;
reg   [15:0] p_Val2_34_reg_1218;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_447_ap_return;
reg   [15:0] p_Val2_35_reg_1223;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_452_ap_return;
reg   [15:0] p_Val2_36_reg_1228;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_457_ap_return;
reg   [15:0] p_Val2_37_reg_1233;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_462_ap_return;
reg   [15:0] p_Val2_38_reg_1238;
wire   [15:0] grp_sqrt_fixed_32_32_s_fu_467_ap_return;
reg   [15:0] p_Val2_39_reg_1243;
wire   [31:0] add_ln19_fu_659_p2;
reg   [31:0] add_ln19_reg_1248;
wire    ap_CS_fsm_state17;
wire   [31:0] sub_ln20_fu_664_p2;
reg   [31:0] sub_ln20_reg_1253;
wire   [31:0] add_ln19_1_fu_672_p2;
reg   [31:0] add_ln19_1_reg_1258;
wire   [31:0] sub_ln20_1_fu_677_p2;
reg   [31:0] sub_ln20_1_reg_1263;
wire   [31:0] add_ln19_2_fu_685_p2;
reg   [31:0] add_ln19_2_reg_1268;
wire   [31:0] sub_ln20_2_fu_690_p2;
reg   [31:0] sub_ln20_2_reg_1273;
wire   [31:0] add_ln19_3_fu_698_p2;
reg   [31:0] add_ln19_3_reg_1278;
wire   [31:0] sub_ln20_3_fu_703_p2;
reg   [31:0] sub_ln20_3_reg_1283;
wire   [31:0] add_ln19_4_fu_711_p2;
reg   [31:0] add_ln19_4_reg_1288;
wire   [31:0] sub_ln20_4_fu_716_p2;
reg   [31:0] sub_ln20_4_reg_1293;
wire   [31:0] add_ln19_5_fu_724_p2;
reg   [31:0] add_ln19_5_reg_1298;
wire   [31:0] sub_ln20_5_fu_729_p2;
reg   [31:0] sub_ln20_5_reg_1303;
wire   [31:0] add_ln19_6_fu_737_p2;
reg   [31:0] add_ln19_6_reg_1308;
wire   [31:0] sub_ln20_6_fu_742_p2;
reg   [31:0] sub_ln20_6_reg_1313;
wire   [31:0] add_ln19_7_fu_750_p2;
reg   [31:0] add_ln19_7_reg_1318;
wire   [31:0] sub_ln20_7_fu_755_p2;
reg   [31:0] sub_ln20_7_reg_1323;
wire   [31:0] shl_ln19_fu_760_p2;
wire    ap_CS_fsm_state18;
wire   [31:0] shl_ln19_1_fu_776_p2;
wire   [31:0] shl_ln19_2_fu_792_p2;
wire   [31:0] shl_ln19_3_fu_808_p2;
wire   [31:0] shl_ln19_4_fu_824_p2;
wire   [31:0] shl_ln19_5_fu_840_p2;
wire   [31:0] shl_ln19_6_fu_856_p2;
wire   [31:0] shl_ln19_7_fu_872_p2;
wire   [31:0] grp_fu_765_p2;
reg   [31:0] sdiv_ln19_1_reg_1376;
wire    ap_CS_fsm_state53;
wire   [31:0] grp_fu_781_p2;
reg   [31:0] sdiv_ln19_reg_1381;
wire   [31:0] grp_fu_797_p2;
reg   [31:0] sdiv_ln19_2_reg_1386;
wire   [31:0] grp_fu_813_p2;
reg   [31:0] sdiv_ln19_3_reg_1391;
wire   [31:0] grp_fu_829_p2;
reg   [31:0] sdiv_ln19_4_reg_1396;
wire   [31:0] grp_fu_845_p2;
reg   [31:0] sdiv_ln19_5_reg_1401;
wire   [31:0] grp_fu_861_p2;
reg   [31:0] sdiv_ln19_6_reg_1406;
wire   [31:0] grp_fu_877_p2;
reg   [31:0] sdiv_ln19_7_reg_1411;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_770_p2;
wire   [31:0] grp_fu_786_p2;
wire   [31:0] grp_fu_802_p2;
wire   [31:0] grp_fu_818_p2;
wire   [31:0] grp_fu_834_p2;
wire   [31:0] grp_fu_850_p2;
wire   [31:0] grp_fu_866_p2;
wire   [31:0] grp_fu_882_p2;
wire    ap_CS_fsm_state54;
wire   [31:0] shl_ln13_fu_568_p2;
wire   [31:0] shl_ln13_1_fu_579_p2;
wire   [31:0] shl_ln13_2_fu_590_p2;
wire   [31:0] shl_ln13_3_fu_601_p2;
wire   [31:0] shl_ln13_4_fu_612_p2;
wire   [31:0] shl_ln13_5_fu_623_p2;
wire   [31:0] shl_ln13_6_fu_634_p2;
wire   [31:0] shl_ln13_7_fu_645_p2;
wire  signed [31:0] add_ln19_fu_659_p0;
wire   [31:0] zext_ln840_fu_656_p1;
wire  signed [31:0] sub_ln20_fu_664_p1;
wire  signed [31:0] add_ln19_1_fu_672_p0;
wire   [31:0] zext_ln840_1_fu_669_p1;
wire  signed [31:0] sub_ln20_1_fu_677_p1;
wire  signed [31:0] add_ln19_2_fu_685_p0;
wire   [31:0] zext_ln840_2_fu_682_p1;
wire  signed [31:0] sub_ln20_2_fu_690_p1;
wire  signed [31:0] add_ln19_3_fu_698_p0;
wire   [31:0] zext_ln840_3_fu_695_p1;
wire  signed [31:0] sub_ln20_3_fu_703_p1;
wire  signed [31:0] add_ln19_4_fu_711_p0;
wire   [31:0] zext_ln840_4_fu_708_p1;
wire  signed [31:0] sub_ln20_4_fu_716_p1;
wire  signed [31:0] add_ln19_5_fu_724_p0;
wire   [31:0] zext_ln840_5_fu_721_p1;
wire  signed [31:0] sub_ln20_5_fu_729_p1;
wire  signed [31:0] add_ln19_6_fu_737_p0;
wire   [31:0] zext_ln840_6_fu_734_p1;
wire  signed [31:0] sub_ln20_6_fu_742_p1;
wire  signed [31:0] add_ln19_7_fu_750_p0;
wire   [31:0] zext_ln840_7_fu_747_p1;
wire  signed [31:0] sub_ln20_7_fu_755_p1;
wire  signed [31:0] shl_ln19_fu_760_p0;
wire  signed [31:0] shl_ln19_1_fu_776_p0;
wire  signed [31:0] shl_ln19_2_fu_792_p0;
wire  signed [31:0] shl_ln19_3_fu_808_p0;
wire  signed [31:0] shl_ln19_4_fu_824_p0;
wire  signed [31:0] shl_ln19_5_fu_840_p0;
wire  signed [31:0] shl_ln19_6_fu_856_p0;
wire  signed [31:0] shl_ln19_7_fu_872_p0;
reg    grp_fu_765_ap_start;
wire    grp_fu_765_ap_done;
reg    grp_fu_770_ap_start;
wire    grp_fu_770_ap_done;
reg    grp_fu_781_ap_start;
wire    grp_fu_781_ap_done;
reg    grp_fu_786_ap_start;
wire    grp_fu_786_ap_done;
reg    grp_fu_797_ap_start;
wire    grp_fu_797_ap_done;
reg    grp_fu_802_ap_start;
wire    grp_fu_802_ap_done;
reg    grp_fu_813_ap_start;
wire    grp_fu_813_ap_done;
reg    grp_fu_818_ap_start;
wire    grp_fu_818_ap_done;
reg    grp_fu_829_ap_start;
wire    grp_fu_829_ap_done;
reg    grp_fu_834_ap_start;
wire    grp_fu_834_ap_done;
reg    grp_fu_845_ap_start;
wire    grp_fu_845_ap_done;
reg    grp_fu_850_ap_start;
wire    grp_fu_850_ap_done;
reg    grp_fu_861_ap_start;
wire    grp_fu_861_ap_done;
reg    grp_fu_866_ap_start;
wire    grp_fu_866_ap_done;
reg    grp_fu_877_ap_start;
wire    grp_fu_877_ap_done;
reg    grp_fu_882_ap_start;
wire    grp_fu_882_ap_done;
reg   [53:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
end

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_432(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_reg_1168),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_432_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_437(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_1_reg_1173),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_437_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_442(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_2_reg_1178),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_442_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_447(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_3_reg_1183),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_447_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_452(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_4_reg_1188),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_452_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_457(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_5_reg_1193),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_457_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_462(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_6_reg_1198),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_462_ap_return)
);

kp_502_7_sqrt_fixed_32_32_s grp_sqrt_fixed_32_32_s_fu_467(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(xf_V_7_reg_1203),
    .ap_return(grp_sqrt_fixed_32_32_s_fu_467_ap_return)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_0),
    .din1(B_0),
    .ce(1'b1),
    .dout(grp_fu_472_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0),
    .din1(C_0),
    .ce(1'b1),
    .dout(grp_fu_478_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_1),
    .din1(B_1),
    .ce(1'b1),
    .dout(grp_fu_484_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1),
    .din1(C_1),
    .ce(1'b1),
    .dout(grp_fu_490_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_2),
    .din1(B_2),
    .ce(1'b1),
    .dout(grp_fu_496_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_2),
    .din1(C_2),
    .ce(1'b1),
    .dout(grp_fu_502_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_3),
    .din1(B_3),
    .ce(1'b1),
    .dout(grp_fu_508_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_3),
    .din1(C_3),
    .ce(1'b1),
    .dout(grp_fu_514_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_4),
    .din1(B_4),
    .ce(1'b1),
    .dout(grp_fu_520_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_4),
    .din1(C_4),
    .ce(1'b1),
    .dout(grp_fu_526_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_5),
    .din1(B_5),
    .ce(1'b1),
    .dout(grp_fu_532_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_5),
    .din1(C_5),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_6),
    .din1(B_6),
    .ce(1'b1),
    .dout(grp_fu_544_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_6),
    .din1(C_6),
    .ce(1'b1),
    .dout(grp_fu_550_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_7),
    .din1(B_7),
    .ce(1'b1),
    .dout(grp_fu_556_p2)
);

kp_502_7_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_3_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_7),
    .din1(C_7),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_765_ap_start),
    .done(grp_fu_765_ap_done),
    .din0(add_ln19_reg_1248),
    .din1(shl_ln19_fu_760_p2),
    .ce(1'b1),
    .dout(grp_fu_765_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_770_ap_start),
    .done(grp_fu_770_ap_done),
    .din0(sub_ln20_reg_1253),
    .din1(shl_ln19_fu_760_p2),
    .ce(1'b1),
    .dout(grp_fu_770_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_781_ap_start),
    .done(grp_fu_781_ap_done),
    .din0(add_ln19_1_reg_1258),
    .din1(shl_ln19_1_fu_776_p2),
    .ce(1'b1),
    .dout(grp_fu_781_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_786_ap_start),
    .done(grp_fu_786_ap_done),
    .din0(sub_ln20_1_reg_1263),
    .din1(shl_ln19_1_fu_776_p2),
    .ce(1'b1),
    .dout(grp_fu_786_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_797_ap_start),
    .done(grp_fu_797_ap_done),
    .din0(add_ln19_2_reg_1268),
    .din1(shl_ln19_2_fu_792_p2),
    .ce(1'b1),
    .dout(grp_fu_797_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_802_ap_start),
    .done(grp_fu_802_ap_done),
    .din0(sub_ln20_2_reg_1273),
    .din1(shl_ln19_2_fu_792_p2),
    .ce(1'b1),
    .dout(grp_fu_802_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_813_ap_start),
    .done(grp_fu_813_ap_done),
    .din0(add_ln19_3_reg_1278),
    .din1(shl_ln19_3_fu_808_p2),
    .ce(1'b1),
    .dout(grp_fu_813_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_818_ap_start),
    .done(grp_fu_818_ap_done),
    .din0(sub_ln20_3_reg_1283),
    .din1(shl_ln19_3_fu_808_p2),
    .ce(1'b1),
    .dout(grp_fu_818_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_829_ap_start),
    .done(grp_fu_829_ap_done),
    .din0(add_ln19_4_reg_1288),
    .din1(shl_ln19_4_fu_824_p2),
    .ce(1'b1),
    .dout(grp_fu_829_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_834_ap_start),
    .done(grp_fu_834_ap_done),
    .din0(sub_ln20_4_reg_1293),
    .din1(shl_ln19_4_fu_824_p2),
    .ce(1'b1),
    .dout(grp_fu_834_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_845_ap_start),
    .done(grp_fu_845_ap_done),
    .din0(add_ln19_5_reg_1298),
    .din1(shl_ln19_5_fu_840_p2),
    .ce(1'b1),
    .dout(grp_fu_845_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_850_ap_start),
    .done(grp_fu_850_ap_done),
    .din0(sub_ln20_5_reg_1303),
    .din1(shl_ln19_5_fu_840_p2),
    .ce(1'b1),
    .dout(grp_fu_850_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_861_ap_start),
    .done(grp_fu_861_ap_done),
    .din0(add_ln19_6_reg_1308),
    .din1(shl_ln19_6_fu_856_p2),
    .ce(1'b1),
    .dout(grp_fu_861_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_866_ap_start),
    .done(grp_fu_866_ap_done),
    .din0(sub_ln20_6_reg_1313),
    .din1(shl_ln19_6_fu_856_p2),
    .ce(1'b1),
    .dout(grp_fu_866_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_877_ap_start),
    .done(grp_fu_877_ap_done),
    .din0(add_ln19_7_reg_1318),
    .din1(shl_ln19_7_fu_872_p2),
    .ce(1'b1),
    .dout(grp_fu_877_p2)
);

kp_502_7_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_882_ap_start),
    .done(grp_fu_882_ap_done),
    .din0(sub_ln20_7_reg_1323),
    .din1(shl_ln19_7_fu_872_p2),
    .ce(1'b1),
    .dout(grp_fu_882_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln19_1_reg_1258 <= add_ln19_1_fu_672_p2;
        add_ln19_2_reg_1268 <= add_ln19_2_fu_685_p2;
        add_ln19_3_reg_1278 <= add_ln19_3_fu_698_p2;
        add_ln19_4_reg_1288 <= add_ln19_4_fu_711_p2;
        add_ln19_5_reg_1298 <= add_ln19_5_fu_724_p2;
        add_ln19_6_reg_1308 <= add_ln19_6_fu_737_p2;
        add_ln19_7_reg_1318 <= add_ln19_7_fu_750_p2;
        add_ln19_reg_1248 <= add_ln19_fu_659_p2;
        sub_ln20_1_reg_1263 <= sub_ln20_1_fu_677_p2;
        sub_ln20_2_reg_1273 <= sub_ln20_2_fu_690_p2;
        sub_ln20_3_reg_1283 <= sub_ln20_3_fu_703_p2;
        sub_ln20_4_reg_1293 <= sub_ln20_4_fu_716_p2;
        sub_ln20_5_reg_1303 <= sub_ln20_5_fu_729_p2;
        sub_ln20_6_reg_1313 <= sub_ln20_6_fu_742_p2;
        sub_ln20_7_reg_1323 <= sub_ln20_7_fu_755_p2;
        sub_ln20_reg_1253 <= sub_ln20_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln13_10_reg_1138 <= grp_fu_532_p2;
        mul_ln13_11_reg_1143 <= grp_fu_538_p2;
        mul_ln13_12_reg_1148 <= grp_fu_544_p2;
        mul_ln13_13_reg_1153 <= grp_fu_550_p2;
        mul_ln13_14_reg_1158 <= grp_fu_556_p2;
        mul_ln13_15_reg_1163 <= grp_fu_562_p2;
        mul_ln13_1_reg_1093 <= grp_fu_478_p2;
        mul_ln13_2_reg_1098 <= grp_fu_484_p2;
        mul_ln13_3_reg_1103 <= grp_fu_490_p2;
        mul_ln13_4_reg_1108 <= grp_fu_496_p2;
        mul_ln13_5_reg_1113 <= grp_fu_502_p2;
        mul_ln13_6_reg_1118 <= grp_fu_508_p2;
        mul_ln13_7_reg_1123 <= grp_fu_514_p2;
        mul_ln13_8_reg_1128 <= grp_fu_520_p2;
        mul_ln13_9_reg_1133 <= grp_fu_526_p2;
        mul_ln13_reg_1088 <= grp_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_33_reg_1213 <= grp_sqrt_fixed_32_32_s_fu_437_ap_return;
        p_Val2_34_reg_1218 <= grp_sqrt_fixed_32_32_s_fu_442_ap_return;
        p_Val2_35_reg_1223 <= grp_sqrt_fixed_32_32_s_fu_447_ap_return;
        p_Val2_36_reg_1228 <= grp_sqrt_fixed_32_32_s_fu_452_ap_return;
        p_Val2_37_reg_1233 <= grp_sqrt_fixed_32_32_s_fu_457_ap_return;
        p_Val2_38_reg_1238 <= grp_sqrt_fixed_32_32_s_fu_462_ap_return;
        p_Val2_39_reg_1243 <= grp_sqrt_fixed_32_32_s_fu_467_ap_return;
        p_Val2_s_reg_1208 <= grp_sqrt_fixed_32_32_s_fu_432_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        sdiv_ln19_1_reg_1376 <= grp_fu_765_p2;
        sdiv_ln19_2_reg_1386 <= grp_fu_797_p2;
        sdiv_ln19_3_reg_1391 <= grp_fu_813_p2;
        sdiv_ln19_4_reg_1396 <= grp_fu_829_p2;
        sdiv_ln19_5_reg_1401 <= grp_fu_845_p2;
        sdiv_ln19_6_reg_1406 <= grp_fu_861_p2;
        sdiv_ln19_7_reg_1411 <= grp_fu_877_p2;
        sdiv_ln19_reg_1381 <= grp_fu_781_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xf_V_1_reg_1173 <= xf_V_1_fu_584_p2;
        xf_V_2_reg_1178 <= xf_V_2_fu_595_p2;
        xf_V_3_reg_1183 <= xf_V_3_fu_606_p2;
        xf_V_4_reg_1188 <= xf_V_4_fu_617_p2;
        xf_V_5_reg_1193 <= xf_V_5_fu_628_p2;
        xf_V_6_reg_1198 <= xf_V_6_fu_639_p2;
        xf_V_7_reg_1203 <= xf_V_7_fu_650_p2;
        xf_V_reg_1168 <= xf_V_fu_573_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_0_ap_vld = 1'b1;
    end else begin
        D_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_1_ap_vld = 1'b1;
    end else begin
        D_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_2_ap_vld = 1'b1;
    end else begin
        D_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_3_ap_vld = 1'b1;
    end else begin
        D_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_4_ap_vld = 1'b1;
    end else begin
        D_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_5_ap_vld = 1'b1;
    end else begin
        D_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_6_ap_vld = 1'b1;
    end else begin
        D_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        D_7_ap_vld = 1'b1;
    end else begin
        D_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_0_ap_vld = 1'b1;
    end else begin
        X1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_1_ap_vld = 1'b1;
    end else begin
        X1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_2_ap_vld = 1'b1;
    end else begin
        X1_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_3_ap_vld = 1'b1;
    end else begin
        X1_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_4_ap_vld = 1'b1;
    end else begin
        X1_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_5_ap_vld = 1'b1;
    end else begin
        X1_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_6_ap_vld = 1'b1;
    end else begin
        X1_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        X1_7_ap_vld = 1'b1;
    end else begin
        X1_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_0_ap_vld = 1'b1;
    end else begin
        X2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_1_ap_vld = 1'b1;
    end else begin
        X2_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_2_ap_vld = 1'b1;
    end else begin
        X2_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_3_ap_vld = 1'b1;
    end else begin
        X2_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_4_ap_vld = 1'b1;
    end else begin
        X2_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_5_ap_vld = 1'b1;
    end else begin
        X2_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_6_ap_vld = 1'b1;
    end else begin
        X2_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        X2_7_ap_vld = 1'b1;
    end else begin
        X2_7_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_765_ap_start = 1'b1;
    end else begin
        grp_fu_765_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_770_ap_start = 1'b1;
    end else begin
        grp_fu_770_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_781_ap_start = 1'b1;
    end else begin
        grp_fu_781_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_786_ap_start = 1'b1;
    end else begin
        grp_fu_786_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_797_ap_start = 1'b1;
    end else begin
        grp_fu_797_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_802_ap_start = 1'b1;
    end else begin
        grp_fu_802_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_813_ap_start = 1'b1;
    end else begin
        grp_fu_813_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_818_ap_start = 1'b1;
    end else begin
        grp_fu_818_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_829_ap_start = 1'b1;
    end else begin
        grp_fu_829_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_834_ap_start = 1'b1;
    end else begin
        grp_fu_834_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_845_ap_start = 1'b1;
    end else begin
        grp_fu_845_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_850_ap_start = 1'b1;
    end else begin
        grp_fu_850_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_861_ap_start = 1'b1;
    end else begin
        grp_fu_861_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_866_ap_start = 1'b1;
    end else begin
        grp_fu_866_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_877_ap_start = 1'b1;
    end else begin
        grp_fu_877_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_882_ap_start = 1'b1;
    end else begin
        grp_fu_882_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign D_0 = (mul_ln13_reg_1088 - shl_ln13_fu_568_p2);

assign D_1 = (mul_ln13_2_reg_1098 - shl_ln13_1_fu_579_p2);

assign D_2 = (mul_ln13_4_reg_1108 - shl_ln13_2_fu_590_p2);

assign D_3 = (mul_ln13_6_reg_1118 - shl_ln13_3_fu_601_p2);

assign D_4 = (mul_ln13_8_reg_1128 - shl_ln13_4_fu_612_p2);

assign D_5 = (mul_ln13_10_reg_1138 - shl_ln13_5_fu_623_p2);

assign D_6 = (mul_ln13_12_reg_1148 - shl_ln13_6_fu_634_p2);

assign D_7 = (mul_ln13_14_reg_1158 - shl_ln13_7_fu_645_p2);

assign X1_0 = (32'd0 - sdiv_ln19_1_reg_1376);

assign X1_1 = (32'd0 - sdiv_ln19_reg_1381);

assign X1_2 = (32'd0 - sdiv_ln19_2_reg_1386);

assign X1_3 = (32'd0 - sdiv_ln19_3_reg_1391);

assign X1_4 = (32'd0 - sdiv_ln19_4_reg_1396);

assign X1_5 = (32'd0 - sdiv_ln19_5_reg_1401);

assign X1_6 = (32'd0 - sdiv_ln19_6_reg_1406);

assign X1_7 = (32'd0 - sdiv_ln19_7_reg_1411);

assign X2_0 = grp_fu_770_p2;

assign X2_1 = grp_fu_786_p2;

assign X2_2 = grp_fu_802_p2;

assign X2_3 = grp_fu_818_p2;

assign X2_4 = grp_fu_834_p2;

assign X2_5 = grp_fu_850_p2;

assign X2_6 = grp_fu_866_p2;

assign X2_7 = grp_fu_882_p2;

assign add_ln19_1_fu_672_p0 = B_1;

assign add_ln19_1_fu_672_p2 = ($signed(add_ln19_1_fu_672_p0) + $signed(zext_ln840_1_fu_669_p1));

assign add_ln19_2_fu_685_p0 = B_2;

assign add_ln19_2_fu_685_p2 = ($signed(add_ln19_2_fu_685_p0) + $signed(zext_ln840_2_fu_682_p1));

assign add_ln19_3_fu_698_p0 = B_3;

assign add_ln19_3_fu_698_p2 = ($signed(add_ln19_3_fu_698_p0) + $signed(zext_ln840_3_fu_695_p1));

assign add_ln19_4_fu_711_p0 = B_4;

assign add_ln19_4_fu_711_p2 = ($signed(add_ln19_4_fu_711_p0) + $signed(zext_ln840_4_fu_708_p1));

assign add_ln19_5_fu_724_p0 = B_5;

assign add_ln19_5_fu_724_p2 = ($signed(add_ln19_5_fu_724_p0) + $signed(zext_ln840_5_fu_721_p1));

assign add_ln19_6_fu_737_p0 = B_6;

assign add_ln19_6_fu_737_p2 = ($signed(add_ln19_6_fu_737_p0) + $signed(zext_ln840_6_fu_734_p1));

assign add_ln19_7_fu_750_p0 = B_7;

assign add_ln19_7_fu_750_p2 = ($signed(add_ln19_7_fu_750_p0) + $signed(zext_ln840_7_fu_747_p1));

assign add_ln19_fu_659_p0 = B_0;

assign add_ln19_fu_659_p2 = ($signed(add_ln19_fu_659_p0) + $signed(zext_ln840_fu_656_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign shl_ln13_1_fu_579_p2 = mul_ln13_3_reg_1103 << 32'd2;

assign shl_ln13_2_fu_590_p2 = mul_ln13_5_reg_1113 << 32'd2;

assign shl_ln13_3_fu_601_p2 = mul_ln13_7_reg_1123 << 32'd2;

assign shl_ln13_4_fu_612_p2 = mul_ln13_9_reg_1133 << 32'd2;

assign shl_ln13_5_fu_623_p2 = mul_ln13_11_reg_1143 << 32'd2;

assign shl_ln13_6_fu_634_p2 = mul_ln13_13_reg_1153 << 32'd2;

assign shl_ln13_7_fu_645_p2 = mul_ln13_15_reg_1163 << 32'd2;

assign shl_ln13_fu_568_p2 = mul_ln13_1_reg_1093 << 32'd2;

assign shl_ln19_1_fu_776_p0 = A_1;

assign shl_ln19_1_fu_776_p2 = shl_ln19_1_fu_776_p0 << 32'd1;

assign shl_ln19_2_fu_792_p0 = A_2;

assign shl_ln19_2_fu_792_p2 = shl_ln19_2_fu_792_p0 << 32'd1;

assign shl_ln19_3_fu_808_p0 = A_3;

assign shl_ln19_3_fu_808_p2 = shl_ln19_3_fu_808_p0 << 32'd1;

assign shl_ln19_4_fu_824_p0 = A_4;

assign shl_ln19_4_fu_824_p2 = shl_ln19_4_fu_824_p0 << 32'd1;

assign shl_ln19_5_fu_840_p0 = A_5;

assign shl_ln19_5_fu_840_p2 = shl_ln19_5_fu_840_p0 << 32'd1;

assign shl_ln19_6_fu_856_p0 = A_6;

assign shl_ln19_6_fu_856_p2 = shl_ln19_6_fu_856_p0 << 32'd1;

assign shl_ln19_7_fu_872_p0 = A_7;

assign shl_ln19_7_fu_872_p2 = shl_ln19_7_fu_872_p0 << 32'd1;

assign shl_ln19_fu_760_p0 = A_0;

assign shl_ln19_fu_760_p2 = shl_ln19_fu_760_p0 << 32'd1;

assign sub_ln20_1_fu_677_p1 = B_1;

assign sub_ln20_1_fu_677_p2 = ($signed(zext_ln840_1_fu_669_p1) - $signed(sub_ln20_1_fu_677_p1));

assign sub_ln20_2_fu_690_p1 = B_2;

assign sub_ln20_2_fu_690_p2 = ($signed(zext_ln840_2_fu_682_p1) - $signed(sub_ln20_2_fu_690_p1));

assign sub_ln20_3_fu_703_p1 = B_3;

assign sub_ln20_3_fu_703_p2 = ($signed(zext_ln840_3_fu_695_p1) - $signed(sub_ln20_3_fu_703_p1));

assign sub_ln20_4_fu_716_p1 = B_4;

assign sub_ln20_4_fu_716_p2 = ($signed(zext_ln840_4_fu_708_p1) - $signed(sub_ln20_4_fu_716_p1));

assign sub_ln20_5_fu_729_p1 = B_5;

assign sub_ln20_5_fu_729_p2 = ($signed(zext_ln840_5_fu_721_p1) - $signed(sub_ln20_5_fu_729_p1));

assign sub_ln20_6_fu_742_p1 = B_6;

assign sub_ln20_6_fu_742_p2 = ($signed(zext_ln840_6_fu_734_p1) - $signed(sub_ln20_6_fu_742_p1));

assign sub_ln20_7_fu_755_p1 = B_7;

assign sub_ln20_7_fu_755_p2 = ($signed(zext_ln840_7_fu_747_p1) - $signed(sub_ln20_7_fu_755_p1));

assign sub_ln20_fu_664_p1 = B_0;

assign sub_ln20_fu_664_p2 = ($signed(zext_ln840_fu_656_p1) - $signed(sub_ln20_fu_664_p1));

assign xf_V_1_fu_584_p2 = (mul_ln13_2_reg_1098 - shl_ln13_1_fu_579_p2);

assign xf_V_2_fu_595_p2 = (mul_ln13_4_reg_1108 - shl_ln13_2_fu_590_p2);

assign xf_V_3_fu_606_p2 = (mul_ln13_6_reg_1118 - shl_ln13_3_fu_601_p2);

assign xf_V_4_fu_617_p2 = (mul_ln13_8_reg_1128 - shl_ln13_4_fu_612_p2);

assign xf_V_5_fu_628_p2 = (mul_ln13_10_reg_1138 - shl_ln13_5_fu_623_p2);

assign xf_V_6_fu_639_p2 = (mul_ln13_12_reg_1148 - shl_ln13_6_fu_634_p2);

assign xf_V_7_fu_650_p2 = (mul_ln13_14_reg_1158 - shl_ln13_7_fu_645_p2);

assign xf_V_fu_573_p2 = (mul_ln13_reg_1088 - shl_ln13_fu_568_p2);

assign zext_ln840_1_fu_669_p1 = p_Val2_33_reg_1213;

assign zext_ln840_2_fu_682_p1 = p_Val2_34_reg_1218;

assign zext_ln840_3_fu_695_p1 = p_Val2_35_reg_1223;

assign zext_ln840_4_fu_708_p1 = p_Val2_36_reg_1228;

assign zext_ln840_5_fu_721_p1 = p_Val2_37_reg_1233;

assign zext_ln840_6_fu_734_p1 = p_Val2_38_reg_1238;

assign zext_ln840_7_fu_747_p1 = p_Val2_39_reg_1243;

assign zext_ln840_fu_656_p1 = p_Val2_s_reg_1208;

endmodule //kp_502_7

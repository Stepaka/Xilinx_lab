// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab7_z3_lab7_z3,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.776000,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=8330,HLS_SYN_LUT=4327,HLS_VERSION=2021_2}" *)

module lab7_z3 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_we0,
        a_0_d0,
        a_1_address0,
        a_1_ce0,
        a_1_we0,
        a_1_d0,
        a_2_address0,
        a_2_ce0,
        a_2_we0,
        a_2_d0,
        a_3_address0,
        a_3_ce0,
        a_3_we0,
        a_3_d0,
        a_4_address0,
        a_4_ce0,
        a_4_we0,
        a_4_d0,
        a_5_address0,
        a_5_ce0,
        a_5_we0,
        a_5_d0,
        a_6_address0,
        a_6_ce0,
        a_6_we0,
        a_6_d0,
        a_7_address0,
        a_7_ce0,
        a_7_we0,
        a_7_d0,
        a_8_address0,
        a_8_ce0,
        a_8_we0,
        a_8_d0,
        a_9_address0,
        a_9_ce0,
        a_9_we0,
        a_9_d0,
        a_10_address0,
        a_10_ce0,
        a_10_we0,
        a_10_d0,
        a_11_address0,
        a_11_ce0,
        a_11_we0,
        a_11_d0,
        a_12_address0,
        a_12_ce0,
        a_12_we0,
        a_12_d0,
        a_13_address0,
        a_13_ce0,
        a_13_we0,
        a_13_d0,
        a_14_address0,
        a_14_ce0,
        a_14_we0,
        a_14_d0,
        a_15_address0,
        a_15_ce0,
        a_15_we0,
        a_15_d0,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        b_3_address0,
        b_3_ce0,
        b_3_q0,
        b_4_address0,
        b_4_ce0,
        b_4_q0,
        b_5_address0,
        b_5_ce0,
        b_5_q0,
        b_6_address0,
        b_6_ce0,
        b_6_q0,
        b_7_address0,
        b_7_ce0,
        b_7_q0,
        b_8_address0,
        b_8_ce0,
        b_8_q0,
        b_9_address0,
        b_9_ce0,
        b_9_q0,
        b_10_address0,
        b_10_ce0,
        b_10_q0,
        b_11_address0,
        b_11_ce0,
        b_11_q0,
        b_12_address0,
        b_12_ce0,
        b_12_q0,
        b_13_address0,
        b_13_ce0,
        b_13_q0,
        b_14_address0,
        b_14_ce0,
        b_14_q0,
        b_15_address0,
        b_15_ce0,
        b_15_q0,
        c_0_address0,
        c_0_ce0,
        c_0_q0,
        c_1_address0,
        c_1_ce0,
        c_1_q0,
        c_2_address0,
        c_2_ce0,
        c_2_q0,
        c_3_address0,
        c_3_ce0,
        c_3_q0,
        c_4_address0,
        c_4_ce0,
        c_4_q0,
        c_5_address0,
        c_5_ce0,
        c_5_q0,
        c_6_address0,
        c_6_ce0,
        c_6_q0,
        c_7_address0,
        c_7_ce0,
        c_7_q0,
        c_8_address0,
        c_8_ce0,
        c_8_q0,
        c_9_address0,
        c_9_ce0,
        c_9_q0,
        c_10_address0,
        c_10_ce0,
        c_10_q0,
        c_11_address0,
        c_11_ce0,
        c_11_q0,
        c_12_address0,
        c_12_ce0,
        c_12_q0,
        c_13_address0,
        c_13_ce0,
        c_13_q0,
        c_14_address0,
        c_14_ce0,
        c_14_q0,
        c_15_address0,
        c_15_ce0,
        c_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_0_address0;
output   a_0_ce0;
output   a_0_we0;
output  [63:0] a_0_d0;
output  [2:0] a_1_address0;
output   a_1_ce0;
output   a_1_we0;
output  [63:0] a_1_d0;
output  [2:0] a_2_address0;
output   a_2_ce0;
output   a_2_we0;
output  [63:0] a_2_d0;
output  [2:0] a_3_address0;
output   a_3_ce0;
output   a_3_we0;
output  [63:0] a_3_d0;
output  [2:0] a_4_address0;
output   a_4_ce0;
output   a_4_we0;
output  [63:0] a_4_d0;
output  [2:0] a_5_address0;
output   a_5_ce0;
output   a_5_we0;
output  [63:0] a_5_d0;
output  [2:0] a_6_address0;
output   a_6_ce0;
output   a_6_we0;
output  [63:0] a_6_d0;
output  [2:0] a_7_address0;
output   a_7_ce0;
output   a_7_we0;
output  [63:0] a_7_d0;
output  [2:0] a_8_address0;
output   a_8_ce0;
output   a_8_we0;
output  [63:0] a_8_d0;
output  [2:0] a_9_address0;
output   a_9_ce0;
output   a_9_we0;
output  [63:0] a_9_d0;
output  [2:0] a_10_address0;
output   a_10_ce0;
output   a_10_we0;
output  [63:0] a_10_d0;
output  [2:0] a_11_address0;
output   a_11_ce0;
output   a_11_we0;
output  [63:0] a_11_d0;
output  [2:0] a_12_address0;
output   a_12_ce0;
output   a_12_we0;
output  [63:0] a_12_d0;
output  [2:0] a_13_address0;
output   a_13_ce0;
output   a_13_we0;
output  [63:0] a_13_d0;
output  [2:0] a_14_address0;
output   a_14_ce0;
output   a_14_we0;
output  [63:0] a_14_d0;
output  [2:0] a_15_address0;
output   a_15_ce0;
output   a_15_we0;
output  [63:0] a_15_d0;
output  [2:0] b_0_address0;
output   b_0_ce0;
input  [63:0] b_0_q0;
output  [2:0] b_1_address0;
output   b_1_ce0;
input  [63:0] b_1_q0;
output  [2:0] b_2_address0;
output   b_2_ce0;
input  [63:0] b_2_q0;
output  [2:0] b_3_address0;
output   b_3_ce0;
input  [63:0] b_3_q0;
output  [2:0] b_4_address0;
output   b_4_ce0;
input  [63:0] b_4_q0;
output  [2:0] b_5_address0;
output   b_5_ce0;
input  [63:0] b_5_q0;
output  [2:0] b_6_address0;
output   b_6_ce0;
input  [63:0] b_6_q0;
output  [2:0] b_7_address0;
output   b_7_ce0;
input  [63:0] b_7_q0;
output  [2:0] b_8_address0;
output   b_8_ce0;
input  [63:0] b_8_q0;
output  [2:0] b_9_address0;
output   b_9_ce0;
input  [63:0] b_9_q0;
output  [2:0] b_10_address0;
output   b_10_ce0;
input  [63:0] b_10_q0;
output  [2:0] b_11_address0;
output   b_11_ce0;
input  [63:0] b_11_q0;
output  [2:0] b_12_address0;
output   b_12_ce0;
input  [63:0] b_12_q0;
output  [2:0] b_13_address0;
output   b_13_ce0;
input  [63:0] b_13_q0;
output  [2:0] b_14_address0;
output   b_14_ce0;
input  [63:0] b_14_q0;
output  [2:0] b_15_address0;
output   b_15_ce0;
input  [63:0] b_15_q0;
output  [2:0] c_0_address0;
output   c_0_ce0;
input  [63:0] c_0_q0;
output  [2:0] c_1_address0;
output   c_1_ce0;
input  [63:0] c_1_q0;
output  [2:0] c_2_address0;
output   c_2_ce0;
input  [63:0] c_2_q0;
output  [2:0] c_3_address0;
output   c_3_ce0;
input  [63:0] c_3_q0;
output  [2:0] c_4_address0;
output   c_4_ce0;
input  [63:0] c_4_q0;
output  [2:0] c_5_address0;
output   c_5_ce0;
input  [63:0] c_5_q0;
output  [2:0] c_6_address0;
output   c_6_ce0;
input  [63:0] c_6_q0;
output  [2:0] c_7_address0;
output   c_7_ce0;
input  [63:0] c_7_q0;
output  [2:0] c_8_address0;
output   c_8_ce0;
input  [63:0] c_8_q0;
output  [2:0] c_9_address0;
output   c_9_ce0;
input  [63:0] c_9_q0;
output  [2:0] c_10_address0;
output   c_10_ce0;
input  [63:0] c_10_q0;
output  [2:0] c_11_address0;
output   c_11_ce0;
input  [63:0] c_11_q0;
output  [2:0] c_12_address0;
output   c_12_ce0;
input  [63:0] c_12_q0;
output  [2:0] c_13_address0;
output   c_13_ce0;
input  [63:0] c_13_q0;
output  [2:0] c_14_address0;
output   c_14_ce0;
input  [63:0] c_14_q0;
output  [2:0] c_15_address0;
output   c_15_ce0;
input  [63:0] c_15_q0;

reg ap_idle;
reg a_0_ce0;
reg a_0_we0;
reg a_1_ce0;
reg a_1_we0;
reg a_2_ce0;
reg a_2_we0;
reg a_3_ce0;
reg a_3_we0;
reg a_4_ce0;
reg a_4_we0;
reg a_5_ce0;
reg a_5_we0;
reg a_6_ce0;
reg a_6_we0;
reg a_7_ce0;
reg a_7_we0;
reg a_8_ce0;
reg a_8_we0;
reg a_9_ce0;
reg a_9_we0;
reg a_10_ce0;
reg a_10_we0;
reg a_11_ce0;
reg a_11_we0;
reg a_12_ce0;
reg a_12_we0;
reg a_13_ce0;
reg a_13_we0;
reg a_14_ce0;
reg a_14_we0;
reg a_15_ce0;
reg a_15_we0;
reg b_0_ce0;
reg b_1_ce0;
reg b_2_ce0;
reg b_3_ce0;
reg b_4_ce0;
reg b_5_ce0;
reg b_6_ce0;
reg b_7_ce0;
reg b_8_ce0;
reg b_9_ce0;
reg b_10_ce0;
reg b_11_ce0;
reg b_12_ce0;
reg b_13_ce0;
reg b_14_ce0;
reg b_15_ce0;
reg c_0_ce0;
reg c_1_ce0;
reg c_2_ce0;
reg c_3_ce0;
reg c_4_ce0;
reg c_5_ce0;
reg c_6_ce0;
reg c_7_ce0;
reg c_8_ce0;
reg c_9_ce0;
reg c_10_ce0;
reg c_11_ce0;
reg c_12_ce0;
reg c_13_ce0;
reg c_14_ce0;
reg c_15_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_884_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln10_fu_902_p1;
reg   [63:0] zext_ln10_reg_1152;
reg   [63:0] zext_ln10_reg_1152_pp0_iter1_reg;
reg   [63:0] zext_ln10_reg_1152_pp0_iter2_reg;
reg   [63:0] zext_ln10_reg_1152_pp0_iter3_reg;
reg   [63:0] zext_ln10_reg_1152_pp0_iter4_reg;
reg   [63:0] zext_ln10_reg_1152_pp0_iter5_reg;
reg   [63:0] zext_ln10_reg_1152_pp0_iter6_reg;
reg   [63:0] b_0_load_reg_1332;
reg   [63:0] c_0_load_reg_1337;
reg   [63:0] b_1_load_reg_1342;
reg   [63:0] c_1_load_reg_1347;
reg   [63:0] b_2_load_reg_1352;
reg   [63:0] c_2_load_reg_1357;
reg   [63:0] b_3_load_reg_1362;
reg   [63:0] c_3_load_reg_1367;
reg   [63:0] b_4_load_reg_1372;
reg   [63:0] c_4_load_reg_1377;
reg   [63:0] b_5_load_reg_1382;
reg   [63:0] c_5_load_reg_1387;
reg   [63:0] b_6_load_reg_1392;
reg   [63:0] c_6_load_reg_1397;
reg   [63:0] b_7_load_reg_1402;
reg   [63:0] c_7_load_reg_1407;
reg   [63:0] b_8_load_reg_1412;
reg   [63:0] c_8_load_reg_1417;
reg   [63:0] b_9_load_reg_1422;
reg   [63:0] c_9_load_reg_1427;
reg   [63:0] b_10_load_reg_1432;
reg   [63:0] c_10_load_reg_1437;
reg   [63:0] b_11_load_reg_1442;
reg   [63:0] c_11_load_reg_1447;
reg   [63:0] b_12_load_reg_1452;
reg   [63:0] c_12_load_reg_1457;
reg   [63:0] b_13_load_reg_1462;
reg   [63:0] c_13_load_reg_1467;
reg   [63:0] b_14_load_reg_1472;
reg   [63:0] c_14_load_reg_1477;
reg   [63:0] b_15_load_reg_1482;
reg   [63:0] c_15_load_reg_1487;
wire   [63:0] grp_fu_812_p2;
reg   [63:0] temp_mult_reg_1652;
wire   [63:0] grp_fu_816_p2;
reg   [63:0] temp_mult_1_reg_1657;
wire   [63:0] grp_fu_820_p2;
reg   [63:0] temp_mult_2_reg_1662;
wire   [63:0] grp_fu_824_p2;
reg   [63:0] temp_mult_3_reg_1667;
wire   [63:0] grp_fu_828_p2;
reg   [63:0] temp_mult_4_reg_1672;
wire   [63:0] grp_fu_832_p2;
reg   [63:0] temp_mult_5_reg_1677;
wire   [63:0] grp_fu_836_p2;
reg   [63:0] temp_mult_6_reg_1682;
wire   [63:0] grp_fu_840_p2;
reg   [63:0] temp_mult_7_reg_1687;
wire   [63:0] grp_fu_844_p2;
reg   [63:0] temp_mult_8_reg_1692;
wire   [63:0] grp_fu_848_p2;
reg   [63:0] temp_mult_9_reg_1697;
wire   [63:0] grp_fu_852_p2;
reg   [63:0] temp_mult_10_reg_1702;
wire   [63:0] grp_fu_856_p2;
reg   [63:0] temp_mult_11_reg_1707;
wire   [63:0] grp_fu_860_p2;
reg   [63:0] temp_mult_12_reg_1712;
wire   [63:0] grp_fu_864_p2;
reg   [63:0] temp_mult_13_reg_1717;
wire   [63:0] grp_fu_868_p2;
reg   [63:0] temp_mult_14_reg_1722;
wire   [63:0] grp_fu_872_p2;
reg   [63:0] temp_mult_15_reg_1727;
wire    ap_block_pp0_stage0;
reg   [7:0] i_fu_184;
wire   [7:0] add_ln8_fu_938_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire   [63:0] grp_fu_812_p0;
wire   [63:0] grp_fu_812_p1;
wire   [63:0] grp_fu_816_p0;
wire   [63:0] grp_fu_816_p1;
wire   [63:0] grp_fu_820_p0;
wire   [63:0] grp_fu_820_p1;
wire   [63:0] grp_fu_824_p0;
wire   [63:0] grp_fu_824_p1;
wire   [63:0] grp_fu_828_p0;
wire   [63:0] grp_fu_828_p1;
wire   [63:0] grp_fu_832_p0;
wire   [63:0] grp_fu_832_p1;
wire   [63:0] grp_fu_836_p0;
wire   [63:0] grp_fu_836_p1;
wire   [63:0] grp_fu_840_p0;
wire   [63:0] grp_fu_840_p1;
wire   [63:0] grp_fu_844_p0;
wire   [63:0] grp_fu_844_p1;
wire   [63:0] grp_fu_848_p0;
wire   [63:0] grp_fu_848_p1;
wire   [63:0] grp_fu_852_p0;
wire   [63:0] grp_fu_852_p1;
wire   [63:0] grp_fu_856_p0;
wire   [63:0] grp_fu_856_p1;
wire   [63:0] grp_fu_860_p0;
wire   [63:0] grp_fu_860_p1;
wire   [63:0] grp_fu_864_p0;
wire   [63:0] grp_fu_864_p1;
wire   [63:0] grp_fu_868_p0;
wire   [63:0] grp_fu_868_p1;
wire   [63:0] grp_fu_872_p0;
wire   [63:0] grp_fu_872_p1;
wire   [2:0] lshr_ln_fu_892_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_750;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_812_p0),
    .din1(grp_fu_812_p1),
    .ce(1'b1),
    .dout(grp_fu_812_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_816_p0),
    .din1(grp_fu_816_p1),
    .ce(1'b1),
    .dout(grp_fu_816_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_820_p0),
    .din1(grp_fu_820_p1),
    .ce(1'b1),
    .dout(grp_fu_820_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_824_p0),
    .din1(grp_fu_824_p1),
    .ce(1'b1),
    .dout(grp_fu_824_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_828_p0),
    .din1(grp_fu_828_p1),
    .ce(1'b1),
    .dout(grp_fu_828_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_832_p0),
    .din1(grp_fu_832_p1),
    .ce(1'b1),
    .dout(grp_fu_832_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_836_p0),
    .din1(grp_fu_836_p1),
    .ce(1'b1),
    .dout(grp_fu_836_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_840_p0),
    .din1(grp_fu_840_p1),
    .ce(1'b1),
    .dout(grp_fu_840_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_844_p0),
    .din1(grp_fu_844_p1),
    .ce(1'b1),
    .dout(grp_fu_844_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_848_p0),
    .din1(grp_fu_848_p1),
    .ce(1'b1),
    .dout(grp_fu_848_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_852_p0),
    .din1(grp_fu_852_p1),
    .ce(1'b1),
    .dout(grp_fu_852_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_856_p0),
    .din1(grp_fu_856_p1),
    .ce(1'b1),
    .dout(grp_fu_856_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_860_p0),
    .din1(grp_fu_860_p1),
    .ce(1'b1),
    .dout(grp_fu_860_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_864_p0),
    .din1(grp_fu_864_p1),
    .ce(1'b1),
    .dout(grp_fu_864_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_868_p0),
    .din1(grp_fu_868_p1),
    .ce(1'b1),
    .dout(grp_fu_868_p2)
);

lab7_z3_dmul_64ns_64ns_64_5_med_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_med_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_872_p0),
    .din1(grp_fu_872_p1),
    .ce(1'b1),
    .dout(grp_fu_872_p2)
);

lab7_z3_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_750)) begin
        if ((tmp_fu_884_p3 == 1'd0)) begin
            i_fu_184 <= add_ln8_fu_938_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_184 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        b_0_load_reg_1332 <= b_0_q0;
        b_10_load_reg_1432 <= b_10_q0;
        b_11_load_reg_1442 <= b_11_q0;
        b_12_load_reg_1452 <= b_12_q0;
        b_13_load_reg_1462 <= b_13_q0;
        b_14_load_reg_1472 <= b_14_q0;
        b_15_load_reg_1482 <= b_15_q0;
        b_1_load_reg_1342 <= b_1_q0;
        b_2_load_reg_1352 <= b_2_q0;
        b_3_load_reg_1362 <= b_3_q0;
        b_4_load_reg_1372 <= b_4_q0;
        b_5_load_reg_1382 <= b_5_q0;
        b_6_load_reg_1392 <= b_6_q0;
        b_7_load_reg_1402 <= b_7_q0;
        b_8_load_reg_1412 <= b_8_q0;
        b_9_load_reg_1422 <= b_9_q0;
        c_0_load_reg_1337 <= c_0_q0;
        c_10_load_reg_1437 <= c_10_q0;
        c_11_load_reg_1447 <= c_11_q0;
        c_12_load_reg_1457 <= c_12_q0;
        c_13_load_reg_1467 <= c_13_q0;
        c_14_load_reg_1477 <= c_14_q0;
        c_15_load_reg_1487 <= c_15_q0;
        c_1_load_reg_1347 <= c_1_q0;
        c_2_load_reg_1357 <= c_2_q0;
        c_3_load_reg_1367 <= c_3_q0;
        c_4_load_reg_1377 <= c_4_q0;
        c_5_load_reg_1387 <= c_5_q0;
        c_6_load_reg_1397 <= c_6_q0;
        c_7_load_reg_1407 <= c_7_q0;
        c_8_load_reg_1417 <= c_8_q0;
        c_9_load_reg_1427 <= c_9_q0;
        zext_ln10_reg_1152_pp0_iter1_reg[2 : 0] <= zext_ln10_reg_1152[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        temp_mult_10_reg_1702 <= grp_fu_852_p2;
        temp_mult_11_reg_1707 <= grp_fu_856_p2;
        temp_mult_12_reg_1712 <= grp_fu_860_p2;
        temp_mult_13_reg_1717 <= grp_fu_864_p2;
        temp_mult_14_reg_1722 <= grp_fu_868_p2;
        temp_mult_15_reg_1727 <= grp_fu_872_p2;
        temp_mult_1_reg_1657 <= grp_fu_816_p2;
        temp_mult_2_reg_1662 <= grp_fu_820_p2;
        temp_mult_3_reg_1667 <= grp_fu_824_p2;
        temp_mult_4_reg_1672 <= grp_fu_828_p2;
        temp_mult_5_reg_1677 <= grp_fu_832_p2;
        temp_mult_6_reg_1682 <= grp_fu_836_p2;
        temp_mult_7_reg_1687 <= grp_fu_840_p2;
        temp_mult_8_reg_1692 <= grp_fu_844_p2;
        temp_mult_9_reg_1697 <= grp_fu_848_p2;
        temp_mult_reg_1652 <= grp_fu_812_p2;
        zext_ln10_reg_1152_pp0_iter2_reg[2 : 0] <= zext_ln10_reg_1152_pp0_iter1_reg[2 : 0];
        zext_ln10_reg_1152_pp0_iter3_reg[2 : 0] <= zext_ln10_reg_1152_pp0_iter2_reg[2 : 0];
        zext_ln10_reg_1152_pp0_iter4_reg[2 : 0] <= zext_ln10_reg_1152_pp0_iter3_reg[2 : 0];
        zext_ln10_reg_1152_pp0_iter5_reg[2 : 0] <= zext_ln10_reg_1152_pp0_iter4_reg[2 : 0];
        zext_ln10_reg_1152_pp0_iter6_reg[2 : 0] <= zext_ln10_reg_1152_pp0_iter5_reg[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_884_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln10_reg_1152[2 : 0] <= zext_ln10_fu_902_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_0_we0 = 1'b1;
    end else begin
        a_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_10_ce0 = 1'b1;
    end else begin
        a_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_10_we0 = 1'b1;
    end else begin
        a_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_11_ce0 = 1'b1;
    end else begin
        a_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_11_we0 = 1'b1;
    end else begin
        a_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_12_ce0 = 1'b1;
    end else begin
        a_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_12_we0 = 1'b1;
    end else begin
        a_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_13_ce0 = 1'b1;
    end else begin
        a_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_13_we0 = 1'b1;
    end else begin
        a_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_14_ce0 = 1'b1;
    end else begin
        a_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_14_we0 = 1'b1;
    end else begin
        a_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_15_ce0 = 1'b1;
    end else begin
        a_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_15_we0 = 1'b1;
    end else begin
        a_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_1_we0 = 1'b1;
    end else begin
        a_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_2_we0 = 1'b1;
    end else begin
        a_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_3_ce0 = 1'b1;
    end else begin
        a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_3_we0 = 1'b1;
    end else begin
        a_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_4_ce0 = 1'b1;
    end else begin
        a_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_4_we0 = 1'b1;
    end else begin
        a_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_5_ce0 = 1'b1;
    end else begin
        a_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_5_we0 = 1'b1;
    end else begin
        a_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_6_ce0 = 1'b1;
    end else begin
        a_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_6_we0 = 1'b1;
    end else begin
        a_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_7_ce0 = 1'b1;
    end else begin
        a_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_7_we0 = 1'b1;
    end else begin
        a_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_8_ce0 = 1'b1;
    end else begin
        a_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_8_we0 = 1'b1;
    end else begin
        a_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_9_ce0 = 1'b1;
    end else begin
        a_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        a_9_we0 = 1'b1;
    end else begin
        a_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_884_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_184;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_10_ce0 = 1'b1;
    end else begin
        b_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_11_ce0 = 1'b1;
    end else begin
        b_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_12_ce0 = 1'b1;
    end else begin
        b_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_13_ce0 = 1'b1;
    end else begin
        b_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_14_ce0 = 1'b1;
    end else begin
        b_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_15_ce0 = 1'b1;
    end else begin
        b_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_3_ce0 = 1'b1;
    end else begin
        b_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_4_ce0 = 1'b1;
    end else begin
        b_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_5_ce0 = 1'b1;
    end else begin
        b_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_6_ce0 = 1'b1;
    end else begin
        b_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_7_ce0 = 1'b1;
    end else begin
        b_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_8_ce0 = 1'b1;
    end else begin
        b_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_9_ce0 = 1'b1;
    end else begin
        b_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_0_ce0 = 1'b1;
    end else begin
        c_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_10_ce0 = 1'b1;
    end else begin
        c_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_11_ce0 = 1'b1;
    end else begin
        c_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_12_ce0 = 1'b1;
    end else begin
        c_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_13_ce0 = 1'b1;
    end else begin
        c_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_14_ce0 = 1'b1;
    end else begin
        c_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_15_ce0 = 1'b1;
    end else begin
        c_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_1_ce0 = 1'b1;
    end else begin
        c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_2_ce0 = 1'b1;
    end else begin
        c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_3_ce0 = 1'b1;
    end else begin
        c_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_4_ce0 = 1'b1;
    end else begin
        c_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_5_ce0 = 1'b1;
    end else begin
        c_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_6_ce0 = 1'b1;
    end else begin
        c_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_7_ce0 = 1'b1;
    end else begin
        c_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_8_ce0 = 1'b1;
    end else begin
        c_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        c_9_ce0 = 1'b1;
    end else begin
        c_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_0_d0 = temp_mult_reg_1652;

assign a_10_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_10_d0 = temp_mult_10_reg_1702;

assign a_11_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_11_d0 = temp_mult_11_reg_1707;

assign a_12_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_12_d0 = temp_mult_12_reg_1712;

assign a_13_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_13_d0 = temp_mult_13_reg_1717;

assign a_14_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_14_d0 = temp_mult_14_reg_1722;

assign a_15_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_15_d0 = temp_mult_15_reg_1727;

assign a_1_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_1_d0 = temp_mult_1_reg_1657;

assign a_2_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_2_d0 = temp_mult_2_reg_1662;

assign a_3_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_3_d0 = temp_mult_3_reg_1667;

assign a_4_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_4_d0 = temp_mult_4_reg_1672;

assign a_5_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_5_d0 = temp_mult_5_reg_1677;

assign a_6_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_6_d0 = temp_mult_6_reg_1682;

assign a_7_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_7_d0 = temp_mult_7_reg_1687;

assign a_8_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_8_d0 = temp_mult_8_reg_1692;

assign a_9_address0 = zext_ln10_reg_1152_pp0_iter6_reg;

assign a_9_d0 = temp_mult_9_reg_1697;

assign add_ln8_fu_938_p2 = (ap_sig_allocacmp_i_1 + 8'd16);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_750 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_0_address0 = zext_ln10_fu_902_p1;

assign b_10_address0 = zext_ln10_fu_902_p1;

assign b_11_address0 = zext_ln10_fu_902_p1;

assign b_12_address0 = zext_ln10_fu_902_p1;

assign b_13_address0 = zext_ln10_fu_902_p1;

assign b_14_address0 = zext_ln10_fu_902_p1;

assign b_15_address0 = zext_ln10_fu_902_p1;

assign b_1_address0 = zext_ln10_fu_902_p1;

assign b_2_address0 = zext_ln10_fu_902_p1;

assign b_3_address0 = zext_ln10_fu_902_p1;

assign b_4_address0 = zext_ln10_fu_902_p1;

assign b_5_address0 = zext_ln10_fu_902_p1;

assign b_6_address0 = zext_ln10_fu_902_p1;

assign b_7_address0 = zext_ln10_fu_902_p1;

assign b_8_address0 = zext_ln10_fu_902_p1;

assign b_9_address0 = zext_ln10_fu_902_p1;

assign c_0_address0 = zext_ln10_fu_902_p1;

assign c_10_address0 = zext_ln10_fu_902_p1;

assign c_11_address0 = zext_ln10_fu_902_p1;

assign c_12_address0 = zext_ln10_fu_902_p1;

assign c_13_address0 = zext_ln10_fu_902_p1;

assign c_14_address0 = zext_ln10_fu_902_p1;

assign c_15_address0 = zext_ln10_fu_902_p1;

assign c_1_address0 = zext_ln10_fu_902_p1;

assign c_2_address0 = zext_ln10_fu_902_p1;

assign c_3_address0 = zext_ln10_fu_902_p1;

assign c_4_address0 = zext_ln10_fu_902_p1;

assign c_5_address0 = zext_ln10_fu_902_p1;

assign c_6_address0 = zext_ln10_fu_902_p1;

assign c_7_address0 = zext_ln10_fu_902_p1;

assign c_8_address0 = zext_ln10_fu_902_p1;

assign c_9_address0 = zext_ln10_fu_902_p1;

assign grp_fu_812_p0 = b_0_load_reg_1332;

assign grp_fu_812_p1 = c_0_load_reg_1337;

assign grp_fu_816_p0 = b_1_load_reg_1342;

assign grp_fu_816_p1 = c_1_load_reg_1347;

assign grp_fu_820_p0 = b_2_load_reg_1352;

assign grp_fu_820_p1 = c_2_load_reg_1357;

assign grp_fu_824_p0 = b_3_load_reg_1362;

assign grp_fu_824_p1 = c_3_load_reg_1367;

assign grp_fu_828_p0 = b_4_load_reg_1372;

assign grp_fu_828_p1 = c_4_load_reg_1377;

assign grp_fu_832_p0 = b_5_load_reg_1382;

assign grp_fu_832_p1 = c_5_load_reg_1387;

assign grp_fu_836_p0 = b_6_load_reg_1392;

assign grp_fu_836_p1 = c_6_load_reg_1397;

assign grp_fu_840_p0 = b_7_load_reg_1402;

assign grp_fu_840_p1 = c_7_load_reg_1407;

assign grp_fu_844_p0 = b_8_load_reg_1412;

assign grp_fu_844_p1 = c_8_load_reg_1417;

assign grp_fu_848_p0 = b_9_load_reg_1422;

assign grp_fu_848_p1 = c_9_load_reg_1427;

assign grp_fu_852_p0 = b_10_load_reg_1432;

assign grp_fu_852_p1 = c_10_load_reg_1437;

assign grp_fu_856_p0 = b_11_load_reg_1442;

assign grp_fu_856_p1 = c_11_load_reg_1447;

assign grp_fu_860_p0 = b_12_load_reg_1452;

assign grp_fu_860_p1 = c_12_load_reg_1457;

assign grp_fu_864_p0 = b_13_load_reg_1462;

assign grp_fu_864_p1 = c_13_load_reg_1467;

assign grp_fu_868_p0 = b_14_load_reg_1472;

assign grp_fu_868_p1 = c_14_load_reg_1477;

assign grp_fu_872_p0 = b_15_load_reg_1482;

assign grp_fu_872_p1 = c_15_load_reg_1487;

assign lshr_ln_fu_892_p4 = {{ap_sig_allocacmp_i_1[6:4]}};

assign tmp_fu_884_p3 = ap_sig_allocacmp_i_1[32'd7];

assign zext_ln10_fu_902_p1 = lshr_ln_fu_892_p4;

always @ (posedge ap_clk) begin
    zext_ln10_reg_1152[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_1152_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_1152_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_1152_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_1152_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_1152_pp0_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln10_reg_1152_pp0_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab7_z3
